{"task_id": "MBPP/1", "completion": "\tR = 3\n\tC = 3\n\t \n\ttc = [[0 for x in range(C)] for x in range(R)] \n\ttc[0][0] = cost[0][0] \n\tfor i in range(1, m+1): \n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \n\tfor j in range(1, n+1): \n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \n\tfor i in range(1, m+1): \n\t\tfor j in range(1, n+1): \n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \n\treturn tc[m][n]", "language": "python"}
{"task_id": "MBPP/2", "completion": "  \n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/3", "completion": "    import math\n    \n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result", "language": "python"}
{"task_id": "MBPP/4", "completion": "  import heapq as hq\n  \n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums", "language": "python"}
{"task_id": "MBPP/5", "completion": "\t \n\tA = [0] * (n + 1) \n\tB = [0] * (n + 1) \n\tA[0] = 1\n\tA[1] = 0\n\tB[0] = 0\n\tB[1] = 1\n\tfor i in range(2, n+1): \n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \n\t\tB[i] = A[i - 1] + B[i - 2] \n\treturn A[n] ", "language": "python"}
{"task_id": "MBPP/6", "completion": "    def is_Power_Of_Two (x): \n        return x and (not(x & (x - 1))) \n     \n    return is_Power_Of_Two(a ^ b)", "language": "python"}
{"task_id": "MBPP/7", "completion": "  import re\n  \n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "language": "python"}
{"task_id": "MBPP/8", "completion": " \n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums", "language": "python"}
{"task_id": "MBPP/9", "completion": "     \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n ", "language": "python"}
{"task_id": "MBPP/10", "completion": "  import heapq\n  \n  smallest=heapq.nsmallest(n,list1)\n  return smallest", "language": "python"}
{"task_id": "MBPP/11", "completion": "     \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "language": "python"}
{"task_id": "MBPP/12", "completion": "    \n    result = sorted(M, key=sum)\n    return result", "language": "python"}
{"task_id": "MBPP/13", "completion": "  from collections import Counter\n  \n  word_counts = Counter(words)\n  top_four = word_counts.most_common(4)\n  return (top_four)\n", "language": "python"}
{"task_id": "MBPP/14", "completion": "     \n    return ((l * b * h) / 2) ", "language": "python"}
{"task_id": "MBPP/15", "completion": " import re\n \n return (re.findall('[a-z][^a-z]*', text))", "language": "python"}
{"task_id": "MBPP/16", "completion": "        import re\n        \n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "language": "python"}
{"task_id": "MBPP/17", "completion": "  \n  perimeter=4*a\n  return perimeter", "language": "python"}
{"task_id": "MBPP/18", "completion": "\tNO_OF_CHARS = 256\n\tdef str_to_list(string): \n\t\ttemp = [] \n\t\tfor x in string: \n\t\t\ttemp.append(x) \n\t\treturn temp \n\tdef lst_to_string(List): \n\t\treturn ''.join(List) \n\tdef get_char_count_array(string): \n\t\tcount = [0] * NO_OF_CHARS \n\t\tfor i in string: \n\t\t\tcount[ord(i)] += 1\n\t\treturn count \n\t \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ", "language": "python"}
{"task_id": "MBPP/19", "completion": "    \n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "language": "python"}
{"task_id": "MBPP/20", "completion": "\t \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False", "language": "python"}
{"task_id": "MBPP/21", "completion": "     \n    multiples_of_num= list(range(n,(m+1)*n, n)) \n    return list(multiples_of_num)", "language": "python"}
{"task_id": "MBPP/22", "completion": "    \n    num_set = set()\n    no_duplicate = -1\n\n    for i in range(len(nums)):\n\n        if nums[i] in num_set:\n            return nums[i]\n        else:\n            num_set.add(nums[i])\n\n    return no_duplicate", "language": "python"}
{"task_id": "MBPP/23", "completion": "     \n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        for y in x: \n            sum+= y      \n        maxi = max(sum,maxi)     \n    return maxi ", "language": "python"}
{"task_id": "MBPP/24", "completion": "     \n    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return (decimal)", "language": "python"}
{"task_id": "MBPP/25", "completion": "     \n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n        if (arr[i - 1] != arr[i]): \n            prod = prod * arr[i] \n    return prod; ", "language": "python"}
{"task_id": "MBPP/26", "completion": "  \n  res = True\n  for tup in test_list:\n    for ele in tup:\n      if ele != K:\n        res = False\n  return (res) ", "language": "python"}
{"task_id": "MBPP/27", "completion": "    import re  \n     \n    pattern = '[0-9]'\n    list = [re.sub(pattern, '', i) for i in list] \n    return list", "language": "python"}
{"task_id": "MBPP/28", "completion": "     \n    if k > n : \n       return 0\n    if k==0 or k ==n : \n        return 1 \n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ", "language": "python"}
{"task_id": "MBPP/29", "completion": "       \n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n                count+=1     \n        if (count % 2 != 0): \n            return arr[i]     \n    return -1", "language": "python"}
{"task_id": "MBPP/30", "completion": "    def check_Equality(s): \n        return (ord(s[0]) == ord(s[len(s) - 1])); \n     \n    result = 0; \n    n = len(s); \n    for i in range(n): \n        for j in range(1,n-i+1):  \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result; ", "language": "python"}
{"task_id": "MBPP/31", "completion": "    \n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "language": "python"}
{"task_id": "MBPP/32", "completion": "    import math \n     \n    maxPrime = -1 \n    while n%2 == 0: \n        maxPrime = 2\n        n >>= 1    \n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i \n    if n > 2: \n        maxPrime = n  \n    return int(maxPrime)", "language": "python"}
{"task_id": "MBPP/33", "completion": "     \n    B_Number = 0\n    cnt = 0\n    while (N != 0): \n        rem = N % 2\n        c = pow(10,cnt)  \n        B_Number += rem*c  \n        N //= 2 \n        cnt += 1\n    return B_Number  ", "language": "python"}
{"task_id": "MBPP/34", "completion": "     \n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n            return (mid + 1)  \n        elif (ar[mid] != mid + 1): \n            r = mid - 1 \n        else: \n            l = mid + 1\n    return (-1) ", "language": "python"}
{"task_id": "MBPP/35", "completion": "  \n  return n*(n + 1) ", "language": "python"}
{"task_id": "MBPP/36", "completion": "      \n    while (N > 0) : \n        N -= 1;  \n        p *= 10;  \n        res = p // q;  \n        p %= q;  \n    return res;  ", "language": "python"}
{"task_id": "MBPP/37", "completion": "    \n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part", "language": "python"}
{"task_id": "MBPP/38", "completion": "    \n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even/first_odd)", "language": "python"}
{"task_id": "MBPP/39", "completion": "    import heapq\n    from collections import Counter\n    \n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")", "language": "python"}
{"task_id": "MBPP/40", "completion": "  from collections import Counter\n  from itertools import chain\n  \n  result = Counter(chain.from_iterable(nums))\n  return result", "language": "python"}
{"task_id": "MBPP/41", "completion": " \n even_nums = list(filter(lambda x: x%2 == 0, nums))\n return even_nums", "language": "python"}
{"task_id": "MBPP/42", "completion": "     \n    return sum([x for x in arr if arr.count(x) > 1])", "language": "python"}
{"task_id": "MBPP/43", "completion": "  import re\n  \n  patterns = '^[a-z]+_[a-z]+$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')", "language": "python"}
{"task_id": "MBPP/44", "completion": "        import re\n        \n        patterns = '^\\w+'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'", "language": "python"}
{"task_id": "MBPP/45", "completion": "  def find_gcd(x, y): \n  \twhile(y): \n  \t\tx, y = y, x % y \n  \treturn x \n  \n  num1 = l[0]\n  num2 = l[1]\n  gcd = find_gcd(num1, num2)\n  for i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\n  return gcd", "language": "python"}
{"task_id": "MBPP/46", "completion": "  \n  if len(data) == len(set(data)):\n    return True\n  else:\n    return False;", "language": "python"}
{"task_id": "MBPP/47", "completion": "     \n    variable = 1\n    if (A == B): \n        return 1\n    elif ((B - A) >= 5):  \n        return 0\n    else:   \n        for i in range(A + 1,B + 1): \n            variable = (variable * (i % 10)) % 10\n        return variable % 10", "language": "python"}
{"task_id": "MBPP/48", "completion": "    \n    count = 0;res = 0;temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n | res)", "language": "python"}
{"task_id": "MBPP/49", "completion": "    \n    result = [i[N] for i in nums]\n    return result\n    ", "language": "python"}
{"task_id": "MBPP/50", "completion": "    \n    min_length = min(len(x) for x in input_list )  \n    min_list = min(input_list, key = lambda i: len(i))\n    return(min_length, min_list)", "language": "python"}
{"task_id": "MBPP/51", "completion": "  \n  if x == y == z:\n\t   return True\n  else:\n     return False", "language": "python"}
{"task_id": "MBPP/52", "completion": "  \n  area=b*h\n  return area", "language": "python"}
{"task_id": "MBPP/53", "completion": "  \n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n  else:  \n    return (\"Not Equal\") ", "language": "python"}
{"task_id": "MBPP/54", "completion": "    \n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n        buckets[i] += 1\n    i = 0\n    for j in range(max_value + 1):\n         for a in range(buckets[j]):\n             my_list[i] = j\n             i += 1\n    return my_list", "language": "python"}
{"task_id": "MBPP/55", "completion": "  import math\n  \n  tn = a * (math.pow(r, n - 1))\n  return tn", "language": "python"}
{"task_id": "MBPP/56", "completion": "    def rev(num):    \n        rev_num = 0\n        while (num > 0):  \n            rev_num = (rev_num * 10 + num % 10) \n            num = num // 10  \n        return rev_num  \n        \n    return (2 * rev(n) == n + 1)  ", "language": "python"}
{"task_id": "MBPP/57", "completion": "     \n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ", "language": "python"}
{"task_id": "MBPP/58", "completion": "     \n    return ((x ^ y) < 0); ", "language": "python"}
{"task_id": "MBPP/59", "completion": "\t \n\treturn 3 * n * n - 2 * n ", "language": "python"}
{"task_id": "MBPP/60", "completion": "\t \n\tmls=[] \n\tmax = 0\n\tfor i in range(n): \n\t\tmls.append(1) \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \n\t\t\t\tmls[i] = mls[j] + 1\n\tfor i in range(n): \n\t\tif (max < mls[i]): \n\t\t\tmax = mls[i] \n\treturn max", "language": "python"}
{"task_id": "MBPP/61", "completion": "    from collections import defaultdict\n    \n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count", "language": "python"}
{"task_id": "MBPP/62", "completion": "  \n  return min(xs)\n", "language": "python"}
{"task_id": "MBPP/63", "completion": "  \n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/64", "completion": "\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "language": "python"}
{"task_id": "MBPP/65", "completion": "\t\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "language": "python"}
{"task_id": "MBPP/66", "completion": "  \n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ", "language": "python"}
{"task_id": "MBPP/67", "completion": "       \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ", "language": "python"}
{"task_id": "MBPP/68", "completion": "     \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "language": "python"}
{"task_id": "MBPP/69", "completion": "\t\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "language": "python"}
{"task_id": "MBPP/70", "completion": "  def find_equal_tuple(Input, k):\n    flag = 1\n    for tuple in Input:\n      if len(tuple) != k:\n        flag = 0\n        break\n    return flag\n  \n  if find_equal_tuple(Input, k) == 1:\n    return (\"All tuples have same length\")\n  else:\n    return (\"All tuples do not have same length\")", "language": "python"}
{"task_id": "MBPP/71", "completion": "    \n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums", "language": "python"}
{"task_id": "MBPP/72", "completion": "     \n    if (n % 4 != 2): \n        return True\n    return False", "language": "python"}
{"task_id": "MBPP/73", "completion": "  import re\n  \n  return (re.split('; |, |\\*|\\n',text))", "language": "python"}
{"task_id": "MBPP/74", "completion": "        \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True", "language": "python"}
{"task_id": "MBPP/75", "completion": "  \n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return (str(res)) ", "language": "python"}
{"task_id": "MBPP/76", "completion": "    \n    if(n < m):\n        temp = m\n        m = n\n        n = temp\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))", "language": "python"}
{"task_id": "MBPP/77", "completion": "     \n    return (n % 11 == 0) ", "language": "python"}
{"task_id": "MBPP/78", "completion": "     \n    if (n % 2 != 0): \n        return (n + 1) / 2\n    count = bin(n).count('1') \n    ans = n / 2\n    if (count % 2 != 0): \n        ans += 1\n    return ans ", "language": "python"}
{"task_id": "MBPP/79", "completion": "     \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False", "language": "python"}
{"task_id": "MBPP/80", "completion": "\t \n\treturn (n * (n + 1) * (n + 2)) / 6", "language": "python"}
{"task_id": "MBPP/81", "completion": "  \n  res = []\n  for i, j in enumerate(test_tup1):\n    res.append((j, test_tup2[i % len(test_tup2)])) \n  return (res) ", "language": "python"}
{"task_id": "MBPP/82", "completion": "  import math\n  \n  volume=(4/3)*math.pi*r*r*r\n  return volume", "language": "python"}
{"task_id": "MBPP/83", "completion": "      \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)", "language": "python"}
{"task_id": "MBPP/84", "completion": "\t \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "language": "python"}
{"task_id": "MBPP/85", "completion": "  import math\n  \n  surfacearea=4*math.pi*r*r\n  return surfacearea", "language": "python"}
{"task_id": "MBPP/86", "completion": "  \n  return 3 * n * (n - 1) + 1", "language": "python"}
{"task_id": "MBPP/87", "completion": "    import collections as ct\n    \n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict", "language": "python"}
{"task_id": "MBPP/88", "completion": "  import collections\n  \n  freq_count= collections.Counter(list1)\n  return freq_count", "language": "python"}
{"task_id": "MBPP/89", "completion": "  \n  return (N - 1)", "language": "python"}
{"task_id": "MBPP/90", "completion": "    \n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max", "language": "python"}
{"task_id": "MBPP/91", "completion": "   \n   if any(sub_str in s for s in str1):\n       return True\n   return False", "language": "python"}
{"task_id": "MBPP/92", "completion": "\t \n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True", "language": "python"}
{"task_id": "MBPP/93", "completion": "\t\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)", "language": "python"}
{"task_id": "MBPP/94", "completion": "  from operator import itemgetter \n  \n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ", "language": "python"}
{"task_id": "MBPP/95", "completion": "      \n    minLength = min(len(x) for x in lst )\n    return minLength ", "language": "python"}
{"task_id": "MBPP/96", "completion": "  \n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "language": "python"}
{"task_id": "MBPP/97", "completion": "    \n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "language": "python"}
{"task_id": "MBPP/98", "completion": "      \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ", "language": "python"}
{"task_id": "MBPP/99", "completion": "     \n    return bin(n).replace(\"0b\",\"\") ", "language": "python"}
{"task_id": "MBPP/100", "completion": "    import sys\n    \n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i", "language": "python"}
{"task_id": "MBPP/101", "completion": "  \n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]", "language": "python"}
{"task_id": "MBPP/102", "completion": "        \n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "language": "python"}
{"task_id": "MBPP/103", "completion": "\t \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "language": "python"}
{"task_id": "MBPP/104", "completion": "    \n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result", "language": "python"}
{"task_id": "MBPP/105", "completion": "       \n    return sum(lst) ", "language": "python"}
{"task_id": "MBPP/106", "completion": "  \n  res = tuple(list(test_tup) + test_list)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/107", "completion": "      \n    count = 0;  \n    for i in range(L,R + 1) : \n        if (i >= 10 and i <= 15) : \n            count += 1;  \n        elif (i > 15) : \n            k = i;  \n            while (k != 0) :  \n                if (k % 16 >= 10) : \n                    count += 1;  \n                k = k // 16;  \n    return count;  ", "language": "python"}
{"task_id": "MBPP/108", "completion": "  import heapq\n  \n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)", "language": "python"}
{"task_id": "MBPP/109", "completion": "     \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ", "language": "python"}
{"task_id": "MBPP/110", "completion": "  \n  res = []\n  for sub in test_list:\n    if sub[0] > strt_val:\n      res.append((strt_val, sub[0]))\n      strt_val = sub[1]\n    if strt_val < stop_val:\n      res.append((strt_val, stop_val))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/111", "completion": "    \n    result = list(set.intersection(*map(set, nestedlist)))\n    return result", "language": "python"}
{"task_id": "MBPP/112", "completion": "     \n    return 2*(diameter+height)  ", "language": "python"}
{"task_id": "MBPP/113", "completion": " \n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False", "language": "python"}
{"task_id": "MBPP/114", "completion": "  from collections import Counter \n  \n  res = [(*key, val) for key, val in Counter(test_list).items()]\n  return (str(res)) ", "language": "python"}
{"task_id": "MBPP/115", "completion": " \n empty_dit=all(not d for d in list1)\n return empty_dit", "language": "python"}
{"task_id": "MBPP/116", "completion": "    \n    result = int(''.join(map(str,nums)))\n    return result", "language": "python"}
{"task_id": "MBPP/117", "completion": "  \n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return (str(res)) ", "language": "python"}
{"task_id": "MBPP/118", "completion": "     \n    lst = list(string.split(\" \")) \n    return lst", "language": "python"}
{"task_id": "MBPP/119", "completion": "    \n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)", "language": "python"}
{"task_id": "MBPP/120", "completion": "    \n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max", "language": "python"}
{"task_id": "MBPP/121", "completion": "    \n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\n           check_triplet(A, n - 1, sum, count)", "language": "python"}
{"task_id": "MBPP/122", "completion": "\tMAX = 3000 \n\t \n\tprimes = [0] * MAX \n\tresult = [] \n\tfor i in range(2, MAX): \n\t\tif (primes[i] == 0): \n\t\t\tprimes[i] = 1 \n\t\t\tj = i * 2 \n\t\t\twhile (j < MAX): \n\t\t\t\tprimes[j] -= 1 \n\t\t\t\tif ( (primes[j] + 3) == 0): \n\t\t\t\t\tresult.append(j) \n\t\t\t\tj = j + i \n\tresult.sort() \n\treturn result[n - 1] ", "language": "python"}
{"task_id": "MBPP/123", "completion": "    \n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)", "language": "python"}
{"task_id": "MBPP/124", "completion": "  import cmath\n  \n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle", "language": "python"}
{"task_id": "MBPP/125", "completion": "\t \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0", "language": "python"}
{"task_id": "MBPP/126", "completion": "     \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum", "language": "python"}
{"task_id": "MBPP/127", "completion": "    \n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)", "language": "python"}
{"task_id": "MBPP/128", "completion": "    \n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t", "language": "python"}
{"task_id": "MBPP/129", "completion": "    \n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "language": "python"}
{"task_id": "MBPP/130", "completion": "    from collections import defaultdict\n    \n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result", "language": "python"}
{"task_id": "MBPP/131", "completion": "\t\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "language": "python"}
{"task_id": "MBPP/132", "completion": "  \n  str =  ''.join(tup1)\n  return str", "language": "python"}
{"task_id": "MBPP/133", "completion": "  \n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)", "language": "python"}
{"task_id": "MBPP/134", "completion": "     \n    _sum = 0\n    for i in range(n): \n        _sum = _sum + arr[i] \n    if p == 1: \n        if _sum % 2 == 0: \n            return \"ODD\"\n        else: \n            return \"EVEN\"\n    return \"EVEN\"\n      ", "language": "python"}
{"task_id": "MBPP/135", "completion": "\t \n\treturn n*(2*n - 1) ", "language": "python"}
{"task_id": "MBPP/136", "completion": " \n if(units < 50):\n    amount = units * 2.60\n    surcharge = 25\n elif(units <= 100):\n    amount = 130 + ((units - 50) * 3.25)\n    surcharge = 35\n elif(units <= 200):\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\n    surcharge = 45\n else:\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n    surcharge = 75\n total = amount + surcharge\n return total", "language": "python"}
{"task_id": "MBPP/137", "completion": "    from array import array\n    \n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "language": "python"}
{"task_id": "MBPP/138", "completion": "     \n    if (n % 2 == 1): \n        return False\n    else: \n        return True", "language": "python"}
{"task_id": "MBPP/139", "completion": "  \n  perimeter=2*3.1415*r\n  return perimeter", "language": "python"}
{"task_id": "MBPP/140", "completion": "  \n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/141", "completion": "    \n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums", "language": "python"}
{"task_id": "MBPP/142", "completion": "    \n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result", "language": "python"}
{"task_id": "MBPP/143", "completion": "\t \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ", "language": "python"}
{"task_id": "MBPP/144", "completion": "     \n    sum = 0\n    for i in range(n - 1,-1,-1): \n        sum += i*arr[i] - (n-1-i) * arr[i] \n    return sum", "language": "python"}
{"task_id": "MBPP/145", "completion": "     \n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ", "language": "python"}
{"task_id": "MBPP/146", "completion": "  \n  for i in range(len(str1)):\n   return ord(str1[i])", "language": "python"}
{"task_id": "MBPP/147", "completion": "\t \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telse: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "language": "python"}
{"task_id": "MBPP/148", "completion": "    def sum_digits_single(x) : \n        ans = 0\n        while x : \n            ans += x % 10\n            x //= 10  \n        return ans \n    def closest(x) : \n        ans = 0\n        while (ans * 10 + 9 <= x) : \n            ans = ans * 10 + 9  \n        return ans   \n     \n    A = closest(N)  \n    return sum_digits_single(A) + sum_digits_single(N - A) ", "language": "python"}
{"task_id": "MBPP/149", "completion": "\t \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "language": "python"}
{"task_id": "MBPP/150", "completion": "     \n    if (a == b): \n        return True\n    if ((b - a) * c > 0 and (b - a) % c == 0): \n        return True\n    return False", "language": "python"}
{"task_id": "MBPP/151", "completion": "    def gcd(p,q):\n        while q != 0:\n            p, q = q,p%q\n        return p\n    \n    return gcd(x,y) == 1", "language": "python"}
{"task_id": "MBPP/152", "completion": "    def merge(a,b):\n        c = []\n        while len(a) != 0 and len(b) != 0:\n            if a[0] < b[0]:\n                c.append(a[0])\n                a.remove(a[0])\n            else:\n                c.append(b[0])\n                b.remove(b[0])\n        if len(a) == 0:\n            c += b\n        else:\n            c += a\n        return c\n    \n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x)//2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a,b)\n", "language": "python"}
{"task_id": "MBPP/153", "completion": "   \n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  return vertex", "language": "python"}
{"task_id": "MBPP/154", "completion": "    \n    result = [i[N] for i in nums]\n    return result", "language": "python"}
{"task_id": "MBPP/155", "completion": "     \n    res = 0; count = 0; temp = n \n    while (temp > 0) :     \n        if (count % 2 == 1) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res ", "language": "python"}
{"task_id": "MBPP/156", "completion": "    \n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result", "language": "python"}
{"task_id": "MBPP/157", "completion": "    from itertools import groupby\n    \n    return [[len(list(group)), key] for key, group in groupby(list1)]", "language": "python"}
{"task_id": "MBPP/158", "completion": "     \n    max1 = max(arr) \n    res = 0\n    for i in range(0,n):  \n        if ((max1 - arr[i]) % k != 0): \n            return -1 \n        else: \n            res += (max1 - arr[i]) / k \n    return int(res) ", "language": "python"}
{"task_id": "MBPP/159", "completion": " \n if month in ('January', 'February', 'March'):\n\t season = 'winter'\n elif month in ('April', 'May', 'June'):\n\t season = 'spring'\n elif month in ('July', 'August', 'September'):\n\t season = 'summer'\n else:\n\t season = 'autumn'\n if (month == 'March') and (days > 19):\n\t season = 'spring'\n elif (month == 'June') and (days > 20):\n\t season = 'summer'\n elif (month == 'September') and (days > 21):\n\t season = 'autumn'\n elif (month == 'October') and (days > 21):\n\t season = 'autumn'\n elif (month == 'November') and (days > 21):\n\t season = 'autumn'\n elif (month == 'December') and (days > 20):\n\t season = 'winter'\n return season", "language": "python"}
{"task_id": "MBPP/160", "completion": "\t \n\ti = 0\n\twhile i * a <= n: \n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (\"x = \",i ,\", y = \", \n\t\t\tint((n - (i * a)) / b)) \n\t\t\treturn 0\n\t\ti = i + 1\n\treturn (\"No solution\") ", "language": "python"}
{"task_id": "MBPP/161", "completion": "    \n    result = [x for x in list1 if x not in list2]\n    return result", "language": "python"}
{"task_id": "MBPP/162", "completion": "  \n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)", "language": "python"}
{"task_id": "MBPP/163", "completion": "  from math import tan, pi\n  \n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area", "language": "python"}
{"task_id": "MBPP/164", "completion": "    import math \n    def divSum(n): \n        sum = 1; \n        i = 2; \n        while(i * i <= n): \n            if (n % i == 0): \n                sum = (sum + i +math.floor(n / i)); \n            i += 1; \n        return sum; \n     \n    return divSum(num1) == divSum(num2); ", "language": "python"}
{"task_id": "MBPP/165", "completion": "     \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ", "language": "python"}
{"task_id": "MBPP/166", "completion": "     \n    evenPair = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n            if ((A[i] ^ A[j]) % 2 == 0): \n                evenPair+=1\n    return evenPair; ", "language": "python"}
{"task_id": "MBPP/167", "completion": "     \n    count = 0; \n    if (n and not(n & (n - 1))): \n        return n   \n    while( n != 0): \n        n >>= 1\n        count += 1\n    return 1 << count; ", "language": "python"}
{"task_id": "MBPP/168", "completion": "     \n    count = 0  \n    for i in a: \n        if i == x: count += 1\n    return count ", "language": "python"}
{"task_id": "MBPP/169", "completion": "\t \n\tif (n <= 2): \n\t\treturn n \n\ta = 1\n\tb = 2\n\tfor i in range(3, n+1): \n\t\tc = 2 * b + a \n\t\ta = b \n\t\tb = c \n\treturn b ", "language": "python"}
{"task_id": "MBPP/170", "completion": "                                                                                                                                                                                                    \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ", "language": "python"}
{"task_id": "MBPP/171", "completion": "  import math\n  \n  perimeter=(5*a)\n  return perimeter", "language": "python"}
{"task_id": "MBPP/172", "completion": "  \n  count=0\n  for i in range(len(s)):\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\n      count = count + 1\n  return count", "language": "python"}
{"task_id": "MBPP/173", "completion": " import re\n  \n pattern = re.compile('[\\W_]+')\n return (pattern.sub('', text))", "language": "python"}
{"task_id": "MBPP/174", "completion": "    \n    result = {}\n    for k, v in l:\n         result.setdefault(k, []).append(v)\n    return result", "language": "python"}
{"task_id": "MBPP/175", "completion": "        \n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for parenthese in str1:\n            if parenthese in pchar:\n                stack.append(parenthese)\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n                return False\n        return len(stack) == 0", "language": "python"}
{"task_id": "MBPP/176", "completion": "  \n  perimeter=a+b+c\n  return perimeter", "language": "python"}
{"task_id": "MBPP/177", "completion": "     \n    if (2 * L <= R): \n        return (L ,2*L)\n    else: \n        return (-1) ", "language": "python"}
{"task_id": "MBPP/178", "completion": "  import re\n  \n  for pattern in patterns:\n     if re.search(pattern,  text):\n       return ('Matched!')\n     else:\n       return ('Not Matched!')", "language": "python"}
{"task_id": "MBPP/179", "completion": "\t \n\tterms = [] \n\ttemp = x \n\tn = 0 \n\twhile (temp > 0): \n\t\tterms.append(temp % 10) \n\t\ttemp = int(temp / 10) \n\t\tn+=1 \n\tterms.reverse() \n\tnext_term = 0 \n\ti = n \n\twhile (next_term < x): \n\t\tnext_term = 0 \n\t\tfor j in range(1,n+1): \n\t\t\tnext_term += terms[i - j] \n\t\tterms.append(next_term) \n\t\ti+=1 \n\treturn (next_term == x) ", "language": "python"}
{"task_id": "MBPP/180", "completion": " from math import radians, sin, cos, acos\n \n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\n return dist", "language": "python"}
{"task_id": "MBPP/181", "completion": "\tdef common_prefix_util(str1, str2): \n\t\tresult = \"\"; \n\t\tn1 = len(str1) \n\t\tn2 = len(str2) \n\t\ti = 0\n\t\tj = 0\n\t\twhile i <= n1 - 1 and j <= n2 - 1: \n\t\t\tif (str1[i] != str2[j]): \n\t\t\t\tbreak\n\t\t\tresult += str1[i] \n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn (result) \n\t \n\tprefix = arr[0] \n\tfor i in range (1, n): \n\t\tprefix = common_prefix_util(prefix, arr[i]) \n\treturn (prefix) ", "language": "python"}
{"task_id": "MBPP/182", "completion": "  import re\n  \n  uppercase_characters = re.findall(r\"[A-Z]\", string) \n  lowercase_characters = re.findall(r\"[a-z]\", string) \n  numerical_characters = re.findall(r\"[0-9]\", string) \n  special_characters = re.findall(r\"[, .!?]\", string) \n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "language": "python"}
{"task_id": "MBPP/183", "completion": "  \n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n        count += 1\n  return count", "language": "python"}
{"task_id": "MBPP/184", "completion": " \n greater_specificnum=all(x >= num for x in list)\n return greater_specificnum", "language": "python"}
{"task_id": "MBPP/185", "completion": "   \n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n  return focus", "language": "python"}
{"task_id": "MBPP/186", "completion": "  import re\n  \n  for pattern in patterns:\n    if re.search(pattern,  text):\n        return ('Matched!')\n    else:\n        return ('Not Matched!')", "language": "python"}
{"task_id": "MBPP/187", "completion": "     \n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n    else: \n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "language": "python"}
{"task_id": "MBPP/188", "completion": "    \n    for i in range(2,(n) + 1):\n        if (i*i < (n+1)):\n            for j in range(2,n + 1):\n                if ((i*i*j*j) == n):\n                    return True;\n    return False;", "language": "python"}
{"task_id": "MBPP/189", "completion": "     \n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return(1)\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n    for i in range(n):\n        arr[(arr[i] - 1) % n] += n\n    for i in range(n):\n        if arr[i] <= n:\n            return(i + 1)\n    return(n + 1)", "language": "python"}
{"task_id": "MBPP/190", "completion": "     \n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ", "language": "python"}
{"task_id": "MBPP/191", "completion": "  \n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n  else:\n    return False", "language": "python"}
{"task_id": "MBPP/192", "completion": "     \n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n ", "language": "python"}
{"task_id": "MBPP/193", "completion": "  \n  res = tuple(set(test_tup))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/194", "completion": "      \n    num = n; \n    dec_value = 0; \n    base = 1; \n    temp = num; \n    while (temp): \n        last_digit = temp % 10; \n        temp = int(temp / 10); \n        dec_value += last_digit*base; \n        base = base * 8; \n    return dec_value; ", "language": "python"}
{"task_id": "MBPP/195", "completion": "     \n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res", "language": "python"}
{"task_id": "MBPP/196", "completion": "  \n  res = [ele for ele in test_list if len(ele) != K]\n  return (res) ", "language": "python"}
{"task_id": "MBPP/197", "completion": "  \n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n", "language": "python"}
{"task_id": "MBPP/198", "completion": "    import math\n     \n    if (a < 0 or b < 0): \n        return -1 \n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \n    return area ", "language": "python"}
{"task_id": "MBPP/199", "completion": "     \n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break;      \n    return res; ", "language": "python"}
{"task_id": "MBPP/200", "completion": "    \n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result", "language": "python"}
{"task_id": "MBPP/201", "completion": "     \n    return len(set(lst)) == 1", "language": "python"}
{"task_id": "MBPP/202", "completion": " \n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 != 0):\n        str2 = str2 + str1[i - 1]\n return str2", "language": "python"}
{"task_id": "MBPP/203", "completion": "     \n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n        setBits += x & 1\n        x >>= 1\n    return setBits  ", "language": "python"}
{"task_id": "MBPP/204", "completion": "     \n    res = 0 \n    for i in range(len(s)) : \n        if (s[i] == c): \n            res = res + 1\n    return res ", "language": "python"}
{"task_id": "MBPP/205", "completion": "  \n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/206", "completion": "  \n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/207", "completion": "\t \n\tn = len(str) \n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \n\tfor i in range(1, n+1): \n\t\tfor j in range(1, n+1): \n\t\t\tif (str[i-1] == str[j-1] and i != j): \n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \n\t\t\telse: \n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \n\treturn dp[n][n]", "language": "python"}
{"task_id": "MBPP/208", "completion": "  import re\n  \n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  result = num_fetch.search(num)\n  return bool(result)", "language": "python"}
{"task_id": "MBPP/209", "completion": "  import heapq as hq\n  \n  hq.heapify(heap)\n  hq.heapreplace(heap, a)\n  return heap", "language": "python"}
{"task_id": "MBPP/210", "completion": "    import re\n    \n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    string = get_char.search(string)\n    return not bool(string)", "language": "python"}
{"task_id": "MBPP/211", "completion": "     \n    if (n == 1): \n        return 1\n    count = pow(2,n - 2) \n    return count ", "language": "python"}
{"task_id": "MBPP/212", "completion": "    import math  \n     \n    sum = 0\n    for i in range(1,n+1) : \n        sum = sum + (i*i*i*i) \n    return sum", "language": "python"}
{"task_id": "MBPP/213", "completion": "  \n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/214", "completion": " import math\n \n degree = radian*(180/math.pi)\n return degree", "language": "python"}
{"task_id": "MBPP/215", "completion": "    \n    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n        else:\n            return [(g, [0])]\n    return [x for g in alist for x, R in aux(g) for i in R]", "language": "python"}
{"task_id": "MBPP/216", "completion": "     \n    l1, l2 = list1[0], list2[0] \n    exist = True\n    for i in list2: \n        if i not in list1: \n            exist = False\n    return exist ", "language": "python"}
{"task_id": "MBPP/217", "completion": "     \n    h = {}\n    for ch in str:\n        if ch in h: \n            return ch;\n        else: \n            h[ch] = 0\n    return '\\0'", "language": "python"}
{"task_id": "MBPP/218", "completion": "    import math   \n      \n    if (A > B): \n        swap(A,B)  \n    B = B // math.gcd(A,B);  \n    return B - 1", "language": "python"}
{"task_id": "MBPP/219", "completion": "  \n  \n  res = []\n  test_tup = list(test_tup)\n  temp = sorted(test_tup)\n  for idx, val in enumerate(temp):\n    if idx < K or idx >= len(temp) - K:\n      res.append(val)\n  res = tuple(res)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/220", "completion": " import re\n \n return (re.sub(\"[ ,.]\", \":\", text, n))", "language": "python"}
{"task_id": "MBPP/221", "completion": "    \n    first_even = next((el for el in nums if el%2==0),-1)\n    return first_even", "language": "python"}
{"task_id": "MBPP/222", "completion": "  \n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ", "language": "python"}
{"task_id": "MBPP/223", "completion": "\t\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1", "language": "python"}
{"task_id": "MBPP/224", "completion": "     \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ", "language": "python"}
{"task_id": "MBPP/225", "completion": "     \n    while (low < high): \n        mid = low + (high - low) // 2;   \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high]; ", "language": "python"}
{"task_id": "MBPP/226", "completion": "  \n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result", "language": "python"}
{"task_id": "MBPP/227", "completion": "       \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ", "language": "python"}
{"task_id": "MBPP/228", "completion": "      \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False", "language": "python"}
{"task_id": "MBPP/229", "completion": "  \n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr", "language": "python"}
{"task_id": "MBPP/230", "completion": " \n str2 = str1.replace(' ', char)\n return str2", "language": "python"}
{"task_id": "MBPP/231", "completion": "\t \n\tif n > 1: \n\t\ttri[1][1] = tri[1][1]+tri[0][0] \n\t\ttri[1][0] = tri[1][0]+tri[0][0] \n\tfor i in range(2, n): \n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \n\t\tfor j in range(1, i): \n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \n\t\t\telse: \n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \n\treturn (max(tri[n-1]))", "language": "python"}
{"task_id": "MBPP/232", "completion": " import heapq\n \n largest=heapq.nlargest(n,list1)\n return largest", "language": "python"}
{"task_id": "MBPP/233", "completion": "  \n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface", "language": "python"}
{"task_id": "MBPP/234", "completion": "  \n  volume = l * l * l\n  return volume", "language": "python"}
{"task_id": "MBPP/235", "completion": "     \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ", "language": "python"}
{"task_id": "MBPP/236", "completion": "    \n    if (N < K):\n        return -1;\n    else:\n        Tri_up = 0;\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\n        Tri_down = 0;\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\n        return Tri_up + Tri_down;", "language": "python"}
{"task_id": "MBPP/237", "completion": "  from collections import Counter \n  \n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ", "language": "python"}
{"task_id": "MBPP/238", "completion": "\t \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ", "language": "python"}
{"task_id": "MBPP/239", "completion": "\t \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]", "language": "python"}
{"task_id": "MBPP/240", "completion": " \n list1[-1:] = list2\n replace_list=list1\n return replace_list\n", "language": "python"}
{"task_id": "MBPP/241", "completion": " \n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n return array_3d", "language": "python"}
{"task_id": "MBPP/242", "completion": " \n total = 0\n for i in str1:\n    total = total + 1\n return total", "language": "python"}
{"task_id": "MBPP/243", "completion": "\t \n\tdct = {} \n\tfor i, j in lst: \n\t\tdct.setdefault(i, []).append(j) \n\treturn ([(i, *dict.fromkeys(j), len(j)) \n\t\t\t\tfor i, j in dct.items()]) ", "language": "python"}
{"task_id": "MBPP/244", "completion": "    import math  \n     \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ", "language": "python"}
{"task_id": "MBPP/245", "completion": "\t \n\tMSIBS = arr[:] \n\tfor i in range(n): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, n + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum", "language": "python"}
{"task_id": "MBPP/246", "completion": "    \n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;", "language": "python"}
{"task_id": "MBPP/247", "completion": "\t \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]", "language": "python"}
{"task_id": "MBPP/248", "completion": "  \n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ", "language": "python"}
{"task_id": "MBPP/249", "completion": " \n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result", "language": "python"}
{"task_id": "MBPP/250", "completion": "     \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ", "language": "python"}
{"task_id": "MBPP/251", "completion": " \n list = [v for elt in list for v in (element, elt)]\n return list", "language": "python"}
{"task_id": "MBPP/252", "completion": "  import cmath  \n      \n  num = cmath.polar(numbers)  \n  return (num) ", "language": "python"}
{"task_id": "MBPP/253", "completion": "    \n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr", "language": "python"}
{"task_id": "MBPP/254", "completion": " import re\n \n list = re.findall(\"[ae]\\w+\", text)\n return list", "language": "python"}
{"task_id": "MBPP/255", "completion": "    from itertools import combinations_with_replacement \n    \n    return list(combinations_with_replacement(l,n))", "language": "python"}
{"task_id": "MBPP/256", "completion": "    \n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr", "language": "python"}
{"task_id": "MBPP/257", "completion": " \n temp = a\n a = b\n b = temp\n return (a,b)", "language": "python"}
{"task_id": "MBPP/258", "completion": "   \n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   return count_odd", "language": "python"}
{"task_id": "MBPP/259", "completion": "  \n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/260", "completion": "\t \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "language": "python"}
{"task_id": "MBPP/261", "completion": "  \n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/262", "completion": "    \n    return list1[:L], list1[L:]", "language": "python"}
{"task_id": "MBPP/263", "completion": " \n d = d1.copy()\n d.update(d2)\n return d", "language": "python"}
{"task_id": "MBPP/264", "completion": " \n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age", "language": "python"}
{"task_id": "MBPP/265", "completion": "    \n    return [S[i::step] for i in range(step)]", "language": "python"}
{"task_id": "MBPP/266", "completion": "  \n  LSA = 4 * (l * l)\n  return LSA", "language": "python"}
{"task_id": "MBPP/267", "completion": "      \n    return int(n*(4*n*n-1)/3) ", "language": "python"}
{"task_id": "MBPP/268", "completion": "\t \n\treturn (6 * n * (n - 1) + 1) ", "language": "python"}
{"task_id": "MBPP/269", "completion": "  \n  ch=k\n  return ord(ch)", "language": "python"}
{"task_id": "MBPP/270", "completion": "      \n    i = 0\n    sum = 0\n    for i in range(0,n,2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum", "language": "python"}
{"task_id": "MBPP/271", "completion": "     \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ", "language": "python"}
{"task_id": "MBPP/272", "completion": "  \n  res = [lis[-1] for lis in test_list]\n  return (res) ", "language": "python"}
{"task_id": "MBPP/273", "completion": "  \n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/274", "completion": "    import math  \n     \n    return (1 << (n - 1)) ", "language": "python"}
{"task_id": "MBPP/275", "completion": "    import math as mt \n     \n    for i in range(n): \n        a[i] = (a[i] // m + (a[i] % m != 0))  \n    result,maxx = -1,-1\n    for i in range(n - 1,-1,-1): \n        if (maxx < a[i]): \n            maxx = a[i] \n            result = i \n    return result + 1", "language": "python"}
{"task_id": "MBPP/276", "completion": "  \n  volume=3.1415*r*r*h\n  return volume", "language": "python"}
{"task_id": "MBPP/277", "completion": " \n result = {key:value for (key, value) in dict.items() if value >=n}\n return result", "language": "python"}
{"task_id": "MBPP/278", "completion": "  \n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ", "language": "python"}
{"task_id": "MBPP/279", "completion": "\t \n\treturn 4 * n * n - 3 * n ", "language": "python"}
{"task_id": "MBPP/280", "completion": "    \n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos", "language": "python"}
{"task_id": "MBPP/281", "completion": "    \n    if len(test_list) > len(set(test_list)):\n        return False\n    return True", "language": "python"}
{"task_id": "MBPP/282", "completion": "  \n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "language": "python"}
{"task_id": "MBPP/283", "completion": "     \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True", "language": "python"}
{"task_id": "MBPP/284", "completion": "  \n  check_element=all(v== element for v in list)\n  return check_element", "language": "python"}
{"task_id": "MBPP/285", "completion": "        import re\n        \n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "language": "python"}
{"task_id": "MBPP/286", "completion": "\t \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "language": "python"}
{"task_id": "MBPP/287", "completion": "      \n    return int(2*n*(n+1)*(2*n+1)/3)", "language": "python"}
{"task_id": "MBPP/288", "completion": "\t\n\tcurrent_element = 0\n\tfor i in range(0, N):\n\t\tif ((arr[i] * arr[i]) % P == 1):\n\t\t\tcurrent_element = current_element + 1\n\treturn current_element", "language": "python"}
{"task_id": "MBPP/289", "completion": "     \n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap \n    if (hund1): \n        ordd += hund1 \n        leap -= hund1 \n    if (hund4): \n        ordd -= hund4 \n        leap += hund4 \n    days = ordd + leap * 2\n    odd = days % 7\n    return odd ", "language": "python"}
{"task_id": "MBPP/290", "completion": "    \n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)", "language": "python"}
{"task_id": "MBPP/291", "completion": "\t \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]", "language": "python"}
{"task_id": "MBPP/292", "completion": "      \n    q = n//m \n    return (q)", "language": "python"}
{"task_id": "MBPP/293", "completion": "  import math\n  \n  s=math.sqrt((w*w)+(h*h))\n  return s", "language": "python"}
{"task_id": "MBPP/294", "completion": "     \n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)", "language": "python"}
{"task_id": "MBPP/295", "completion": "    \n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)", "language": "python"}
{"task_id": "MBPP/296", "completion": "     \n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ", "language": "python"}
{"task_id": "MBPP/297", "completion": "    \n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ", "language": "python"}
{"task_id": "MBPP/298", "completion": "    \n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result", "language": "python"}
{"task_id": "MBPP/299", "completion": "    from collections import defaultdict\n    \n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])", "language": "python"}
{"task_id": "MBPP/300", "completion": "\t \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ", "language": "python"}
{"task_id": "MBPP/301", "completion": "    \n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0", "language": "python"}
{"task_id": "MBPP/302", "completion": "     \n    if (n == 0): \n        return 0; \n    msb = 0; \n    n = int(n / 2); \n    while (n > 0): \n        n = int(n / 2); \n        msb += 1; \n    return (1 << msb)", "language": "python"}
{"task_id": "MBPP/303", "completion": "    import sys \n       \n    mx = -sys.maxsize - 1\n    for j in range(1,n):  \n        if (mx > a[j]):  \n            return False  \n        mx = max(mx,a[j - 1])    \n    return True", "language": "python"}
{"task_id": "MBPP/304", "completion": "      \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ", "language": "python"}
{"task_id": "MBPP/305", "completion": " import re\n \n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()", "language": "python"}
{"task_id": "MBPP/306", "completion": "\t\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]", "language": "python"}
{"task_id": "MBPP/307", "completion": "  from copy import deepcopy\n  \n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon", "language": "python"}
{"task_id": "MBPP/308", "completion": "    \n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "language": "python"}
{"task_id": "MBPP/309", "completion": "       \n    if a >= b: \n        return a \n    else: \n        return b ", "language": "python"}
{"task_id": "MBPP/310", "completion": "    \n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "language": "python"}
{"task_id": "MBPP/311", "completion": "     \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ", "language": "python"}
{"task_id": "MBPP/312", "completion": "  import math\n  \n  volume = (1.0/3) * math.pi * r * r * h\n  return volume", "language": "python"}
{"task_id": "MBPP/313", "completion": "  \n  for num in list1: \n    if num >= 0: \n       return num ", "language": "python"}
{"task_id": "MBPP/314", "completion": "\t \n\tincl = max(grid[0][0], grid[1][0]) \n\texcl = 0\n\tfor i in range(1, n) : \n\t\texcl_new = max(excl, incl) \n\t\tincl = excl + max(grid[0][i], grid[1][i]) \n\t\texcl = excl_new \n\treturn max(excl, incl)", "language": "python"}
{"task_id": "MBPP/315", "completion": "     \n    n = len(str) \n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while (i < n): \n        if (str[i] == ' '): \n            if (currlen % 2 == 0): \n                if (maxlen < currlen): \n                    maxlen = currlen \n                    st = i - currlen \n            currlen = 0 \n        else : \n            currlen += 1\n        i += 1\n    if (currlen % 2 == 0): \n        if (maxlen < currlen): \n            maxlen = currlen \n            st = i - currlen \n    if (st == -1): \n        return \"-1\" \n    return str[st: st + maxlen] ", "language": "python"}
{"task_id": "MBPP/316", "completion": "    \n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result ", "language": "python"}
{"task_id": "MBPP/317", "completion": "        from itertools import groupby\n        \n        def ctr_ele(el):\n            if len(el)>1: return [len(el), el[0]]\n            else: return el[0]\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]", "language": "python"}
{"task_id": "MBPP/318", "completion": "     \n    maxvalue = 0\n    i = 1\n    for i in range(s - 1): \n        j = 1\n        for j in range(s): \n            k = s - i - j \n            maxvalue = max(maxvalue, i * j * k)         \n    return maxvalue ", "language": "python"}
{"task_id": "MBPP/319", "completion": "  import re\n  \n  return (re.findall(r\"\\b\\w{5}\\b\", text))", "language": "python"}
{"task_id": "MBPP/320", "completion": "    \n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n+1):\n        sumofsquares += num * num\n        squareofsum += num\n    squareofsum = squareofsum ** 2\n    return squareofsum - sumofsquares", "language": "python"}
{"task_id": "MBPP/321", "completion": "\t \n\tl = len(s) \n\tres = \"\" \n\tfor i in range(1,l+1): \n\t\tres = res + str(i) \n\tfor i in range(l-1,0,-1): \n\t\tres = res + str(i) \n\treturn res \t", "language": "python"}
{"task_id": "MBPP/322", "completion": "    \n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result", "language": "python"}
{"task_id": "MBPP/323", "completion": "\tdef right_rotate(arr, n, out_of_place, cur):\n\t\ttemp = arr[cur]\n\t\tfor i in range(cur, out_of_place, -1):\n\t\t\tarr[i] = arr[i - 1]\n\t\tarr[out_of_place] = temp\n\t\treturn arr\n\t\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index-out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = - 1\n\t\tif (out_of_place == -1):\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\n\t\t\t\tout_of_place = index\n\treturn arr", "language": "python"}
{"task_id": "MBPP/324", "completion": "  \n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return ((sum1),(sum2)) ", "language": "python"}
{"task_id": "MBPP/325", "completion": "    \n    if n <= 3:\n        return n;\n    res = n \n    for x in range(1,n + 1):\n        temp = x * x;\n        if temp > n:\n            break\n        else:\n            res = min(res,1 + get_Min_Squares(n  - temp)) \n    return res;", "language": "python"}
{"task_id": "MBPP/326", "completion": "  from collections import defaultdict \n  \n  \n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res)) ", "language": "python"}
{"task_id": "MBPP/327", "completion": "  \n  if x==y or y==z or z==x:\n\t   return True\n  else:\n     return False", "language": "python"}
{"task_id": "MBPP/328", "completion": "  \n  result =  list1[m:]+list1[:n]\n  return result", "language": "python"}
{"task_id": "MBPP/329", "completion": "  \n  neg_count= 0\n  for num in list: \n    if num <= 0: \n      neg_count += 1\n  return neg_count ", "language": "python"}
{"task_id": "MBPP/330", "completion": "  import re\n  \n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))", "language": "python"}
{"task_id": "MBPP/331", "completion": "     \n    count = 0\n    x = 1\n    while(x < n + 1): \n        if ((x & n) == 0): \n            count += 1\n        x = x << 1\n    return count  ", "language": "python"}
{"task_id": "MBPP/332", "completion": "    \n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict", "language": "python"}
{"task_id": "MBPP/333", "completion": "     \n    sub_li.sort(key = lambda x: x[1]) \n    return sub_li ", "language": "python"}
{"task_id": "MBPP/334", "completion": "      \n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return False\n    else: \n        return True        ", "language": "python"}
{"task_id": "MBPP/335", "completion": "  \n  total = (n * (2 * a + (n - 1) * d)) / 2\n  return total", "language": "python"}
{"task_id": "MBPP/336", "completion": "  \n  if monthname1 == \"February\":\n    return True\n  else:\n    return False", "language": "python"}
{"task_id": "MBPP/337", "completion": "        import re\n        \n        patterns = '\\w+\\S*$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'", "language": "python"}
{"task_id": "MBPP/338", "completion": "    def check_Equality(s): \n        return (ord(s[0]) == ord(s[len(s) - 1])); \n     \n    result = 0; \n    n = len(s); \n    for i in range(n):\n        for j in range(1,n-i+1): \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result; ", "language": "python"}
{"task_id": "MBPP/339", "completion": "      \n    if (x==y): \n        return y \n    return 2", "language": "python"}
{"task_id": "MBPP/340", "completion": "\t\n\treturn sum(sorted([x for x in lst if x > 0])[:3])", "language": "python"}
{"task_id": "MBPP/341", "completion": "  \n  t = tuple(s)\n  return (t)", "language": "python"}
{"task_id": "MBPP/342", "completion": "    from heapq import heappop, heappush\n    class Node:\n        def __init__(self, value, list_num, index):\n            self.value = value\n            self.list_num = list_num\n            self.index = index\n        def __lt__(self, other):\n            return self.value < other.value\n    \n    high = float('-inf')\n    p = (0, float('inf'))\n    pq = []\n    for i in range(len(list)):\n        heappush(pq, Node(list[i][0], i, 0))\n        high = max(high, list[i][0])\n    while True:\n        top = heappop(pq)\n        low = top.value\n        i = top.list_num\n        j = top.index\n        if high - low < p[1] - p[0]:\n            p = (low, high)\n        if j == len(list[i]) - 1:\n            return p\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\n        high = max(high, list[i][j + 1])", "language": "python"}
{"task_id": "MBPP/343", "completion": " \n d=l=0\n for c in s:\n    if c.isdigit():\n        d=d+1\n    elif c.isalpha():\n        l=l+1\n    else:\n        pass\n return (l,d)", "language": "python"}
{"task_id": "MBPP/344", "completion": "     \n    return int(m**0.5) - int((n-1)**0.5) ", "language": "python"}
{"task_id": "MBPP/345", "completion": "    \n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "language": "python"}
{"task_id": "MBPP/346", "completion": "\t \n\tif (n == 0 and k == 0): \n\t\treturn 1\n\tif (k == 0): \n\t\treturn 0\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)", "language": "python"}
{"task_id": "MBPP/347", "completion": "     \n    if (n < m): \n        temp = m \n        m = n \n        n = temp \n    return n * (n + 1) * (3 * m - n + 1) // 6", "language": "python"}
{"task_id": "MBPP/348", "completion": "\tdef bin_coff(n, r): \n\t\tval = 1\n\t\tif (r > (n - r)): \n\t\t\tr = (n - r) \n\t\tfor i in range(0, r): \n\t\t\tval *= (n - i) \n\t\t\tval //= (i + 1) \n\t\treturn val \n\t \n\tn = M // 2\n\ta = bin_coff(2 * n, n) \n\tb = a // (n + 1) \n\treturn (b) ", "language": "python"}
{"task_id": "MBPP/349", "completion": "    \n    p = set(string) \n    s = {'0', '1'} \n    if s == p or p == {'0'} or p == {'1'}: \n        return (\"Yes\") \n    else : \n        return (\"No\") ", "language": "python"}
{"task_id": "MBPP/350", "completion": "     \n    maxOcc = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n) : \n        arr[ord(s[i]) -ord('a')] += 1\n    for i in range(26) : \n        if arr[i] > maxOcc : \n            maxOcc = arr[i] \n    return n - maxOcc ", "language": "python"}
{"task_id": "MBPP/351", "completion": "     \n    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):  \n        if (count_map[arr[i]] == k): \n            return arr[i] \n        i += 1 \n    return -1", "language": "python"}
{"task_id": "MBPP/352", "completion": "    \n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n            if (str[i] == str[j]):\n                return False;\n    return True;", "language": "python"}
{"task_id": "MBPP/353", "completion": "   \n   for i in list1: \n    del i[n] \n   return list1", "language": "python"}
{"task_id": "MBPP/354", "completion": "  \n  tn = a + (n - 1) * d\n  return tn", "language": "python"}
{"task_id": "MBPP/355", "completion": "      \n    rectangles = 0 \n    diameter = 2 * radius \n    diameterSquare = diameter * diameter \n    for a in range(1, 2 * radius):  \n        for b in range(1, 2 * radius): \n            diagnalLengthSquare = (a * a +  b * b)  \n            if (diagnalLengthSquare <= diameterSquare) : \n                rectangles += 1\n    return rectangles ", "language": "python"}
{"task_id": "MBPP/356", "completion": " \n c = 180 - (a + b)\n return c\n", "language": "python"}
{"task_id": "MBPP/357", "completion": "  \n  res = max(int(j) for i in test_list for j in i)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/358", "completion": "  \n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)", "language": "python"}
{"task_id": "MBPP/359", "completion": "     \n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n    else: \n        return (\"No\"); ", "language": "python"}
{"task_id": "MBPP/360", "completion": "\t \n\tresult = (2**n) - 1\n\treturn result * result - 2", "language": "python"}
{"task_id": "MBPP/361", "completion": "  \n  remove_empty = [x for x in list1 if x]\n  return remove_empty", "language": "python"}
{"task_id": "MBPP/362", "completion": "    \n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result", "language": "python"}
{"task_id": "MBPP/363", "completion": "  \n  res = [tuple(j + K for j in sub ) for sub in test_list]\n  return (res) ", "language": "python"}
{"task_id": "MBPP/364", "completion": "\tdef make_flip(ch): \n\t\treturn '1' if (ch == '0') else '0'\n\tdef get_flip_with_starting_charcter(str, expected): \n\t\tflip_count = 0\n\t\tfor i in range(len( str)): \n\t\t\tif (str[i] != expected): \n\t\t\t\tflip_count += 1\n\t\t\texpected = make_flip(expected) \n\t\treturn flip_count \n\t \n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ", "language": "python"}
{"task_id": "MBPP/365", "completion": "    \n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count", "language": "python"}
{"task_id": "MBPP/366", "completion": "    \n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "language": "python"}
{"task_id": "MBPP/367", "completion": "\tclass Node: \n\t\tdef __init__(self, data): \n\t\t\tself.data = data \n\t\t\tself.left = None\n\t\t\tself.right = None\n\tdef get_height(root): \n\t\tif root is None: \n\t\t\treturn 0\n\t\treturn max(get_height(root.left), get_height(root.right)) + 1\n\t \n\tif root is None: \n\t\treturn True\n\tlh = get_height(root.left) \n\trh = get_height(root.right) \n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \n\troot.left) is True and is_tree_balanced( root.right) is True: \n\t\treturn True\n\treturn False", "language": "python"}
{"task_id": "MBPP/368", "completion": "  \n  res = ((test_tup, ) * N)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/369", "completion": "  \n  LSA = 2*h*(l+w)\n  return LSA", "language": "python"}
{"task_id": "MBPP/370", "completion": "  \n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\n  return float_sort", "language": "python"}
{"task_id": "MBPP/371", "completion": "    \n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)", "language": "python"}
{"task_id": "MBPP/372", "completion": "  import heapq as hq\n  \n  hq.heapify(nums)\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\n  return s_result", "language": "python"}
{"task_id": "MBPP/373", "completion": "  \n  volume=l*w*h\n  return volume", "language": "python"}
{"task_id": "MBPP/374", "completion": "    \n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list", "language": "python"}
{"task_id": "MBPP/375", "completion": "    \n    a = (n //m) * m\n    b = a + m\n    return (b if n - a > b - n else a)", "language": "python"}
{"task_id": "MBPP/376", "completion": "  \n  temp = set()\n  res = tuple(ele if ele not in temp and not temp.add(ele) \n\t\t\t\telse 'MSP' for ele in test_tup)\n  return (res)", "language": "python"}
{"task_id": "MBPP/377", "completion": "      \n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n        s.remove(c) \n        counts -= 1 \n    s = '' . join(s)   \n    return (s) ", "language": "python"}
{"task_id": "MBPP/378", "completion": "  \n  test_list = test_list[-1:] + test_list[:-1]  \n  return test_list", "language": "python"}
{"task_id": "MBPP/379", "completion": "  \n  SA = 2*(l*w + l * h + w * h)\n  return SA", "language": "python"}
{"task_id": "MBPP/380", "completion": "  \n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n  for row in range(rownum):\n    for col in range(colnum):\n        multi_list[row][col]= row*col\n  return multi_list\n", "language": "python"}
{"task_id": "MBPP/381", "completion": "    from operator import itemgetter\n    \n    result = sorted(list_data, key=itemgetter(index_no))\n    return result", "language": "python"}
{"task_id": "MBPP/382", "completion": "    \n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "language": "python"}
{"task_id": "MBPP/383", "completion": "     \n    res = 0; count = 0; temp = n    \n    while(temp > 0 ) : \n        if (count % 2 == 0) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res ", "language": "python"}
{"task_id": "MBPP/384", "completion": "     \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ", "language": "python"}
{"task_id": "MBPP/385", "completion": "  \n  if (n == 0):\n    return 3\n  if (n == 1):\n    return 0\n  if (n == 2):\n    return 2 \n  return get_perrin(n - 2) + get_perrin(n - 3)", "language": "python"}
{"task_id": "MBPP/386", "completion": "\t\n\tchars = s\n\tcount_left = 0\n\tcount_right = 0\n\tswap = 0\n\timbalance = 0; \n\tfor i in range(len(chars)):\n\t\tif chars[i] == '[':\n\t\t\tcount_left += 1\n\t\t\tif imbalance > 0:\n\t\t\t\tswap += imbalance\n\t\t\t\timbalance -= 1\n\t\telif chars[i] == ']':\n\t\t\tcount_right += 1\n\t\t\timbalance = (count_right - count_left) \n\treturn swap", "language": "python"}
{"task_id": "MBPP/387", "completion": "     \n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        N[l-1] =='C'or N[l-1] =='E'): \n        return (\"Even\") \n    else: \n        return (\"Odd\") ", "language": "python"}
{"task_id": "MBPP/388", "completion": "     \n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break; \n    return res; ", "language": "python"}
{"task_id": "MBPP/389", "completion": "\t \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "language": "python"}
{"task_id": "MBPP/390", "completion": " \n add_string=[string.format(i) for i in  list]\n return add_string", "language": "python"}
{"task_id": "MBPP/391", "completion": "     \n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "language": "python"}
{"task_id": "MBPP/392", "completion": "\t\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]", "language": "python"}
{"task_id": "MBPP/393", "completion": "    \n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)", "language": "python"}
{"task_id": "MBPP/394", "completion": "  \n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/395", "completion": "  \n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "language": "python"}
{"task_id": "MBPP/396", "completion": "\timport re  \n\tregex = r'^[a-z]$|^([a-z]).*\\1$'\n\t \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ", "language": "python"}
{"task_id": "MBPP/397", "completion": " \n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "language": "python"}
{"task_id": "MBPP/398", "completion": "    \n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "language": "python"}
{"task_id": "MBPP/399", "completion": "  \n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/400", "completion": "  \n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)", "language": "python"}
{"task_id": "MBPP/401", "completion": "  \n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/402", "completion": "     \n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p   \n    return C[r] ", "language": "python"}
{"task_id": "MBPP/403", "completion": "\timport re\n\t\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False", "language": "python"}
{"task_id": "MBPP/404", "completion": "       \n    if a <= b: \n        return a \n    else: \n        return b ", "language": "python"}
{"task_id": "MBPP/405", "completion": "   \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "language": "python"}
{"task_id": "MBPP/406", "completion": "     \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return (\"Odd Parity\"); \n    return (\"Even Parity\"); ", "language": "python"}
{"task_id": "MBPP/407", "completion": "    \n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False", "language": "python"}
{"task_id": "MBPP/408", "completion": "   import heapq\n   \n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs", "language": "python"}
{"task_id": "MBPP/409", "completion": "    \n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min", "language": "python"}
{"task_id": "MBPP/410", "completion": "     \n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "language": "python"}
{"task_id": "MBPP/411", "completion": "  import re\n  \n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "language": "python"}
{"task_id": "MBPP/412", "completion": "    \n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l", "language": "python"}
{"task_id": "MBPP/413", "completion": "    \n    result = [x[n] for x in list1]\n    return result", "language": "python"}
{"task_id": "MBPP/414", "completion": "      \n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n        d+=1\n    for i in range(0,c): \n        for j in range(0,d): \n            if(list1[i]==list2[j]): \n                return 1\n    return 0", "language": "python"}
{"task_id": "MBPP/415", "completion": "     \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ", "language": "python"}
{"task_id": "MBPP/416", "completion": "\tMAX = 1000000\n\t \n\tdp = [0]*(n+1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \n\treturn dp[n]", "language": "python"}
{"task_id": "MBPP/417", "completion": "\t \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ", "language": "python"}
{"task_id": "MBPP/418", "completion": "     \n    maxList = max((x) for x in lst) \n    return maxList", "language": "python"}
{"task_id": "MBPP/419", "completion": "  \n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "language": "python"}
{"task_id": "MBPP/420", "completion": "     \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum", "language": "python"}
{"task_id": "MBPP/421", "completion": "    \n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ", "language": "python"}
{"task_id": "MBPP/422", "completion": "      \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ", "language": "python"}
{"task_id": "MBPP/423", "completion": "     \n    goldTable = [[0 for i in range(n)] \n                        for j in range(m)]   \n    for col in range(n-1, -1, -1): \n        for row in range(m):  \n            if (col == n-1): \n                right = 0\n            else: \n                right = goldTable[row][col+1] \n            if (row == 0 or col == n-1): \n                right_up = 0\n            else: \n                right_up = goldTable[row-1][col+1] \n            if (row == m-1 or col == n-1): \n                right_down = 0\n            else: \n                right_down = goldTable[row+1][col+1] \n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \n    res = goldTable[0][0] \n    for i in range(1, m): \n        res = max(res, goldTable[i][0])  \n    return res ", "language": "python"}
{"task_id": "MBPP/424", "completion": "  \n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/425", "completion": "     \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "language": "python"}
{"task_id": "MBPP/426", "completion": " \n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums", "language": "python"}
{"task_id": "MBPP/427", "completion": "        import re\n        \n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "language": "python"}
{"task_id": "MBPP/428", "completion": "    \n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "language": "python"}
{"task_id": "MBPP/429", "completion": "  \n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/430", "completion": "   \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix", "language": "python"}
{"task_id": "MBPP/431", "completion": "     \n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result", "language": "python"}
{"task_id": "MBPP/432", "completion": " \n median = 0.5 * (base1+ base2)\n return median", "language": "python"}
{"task_id": "MBPP/433", "completion": "  \n  arr.sort()\n  if number > arr[-1]:\n    return ('Yes, the entered number is greater than those in the array')\n  else:\n    return ('No, entered number is less than those in the array')", "language": "python"}
{"task_id": "MBPP/434", "completion": "        import re\n        \n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n", "language": "python"}
{"task_id": "MBPP/435", "completion": "    \n    return (n % 10) ", "language": "python"}
{"task_id": "MBPP/436", "completion": "  \n  for num in list1: \n    if num < 0: \n       return num ", "language": "python"}
{"task_id": "MBPP/437", "completion": " \n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2", "language": "python"}
{"task_id": "MBPP/438", "completion": "  \n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return (str(res)) ", "language": "python"}
{"task_id": "MBPP/439", "completion": "  \n  x = int(\"\".join(map(str, L)))\n  return x", "language": "python"}
{"task_id": "MBPP/440", "completion": " import re\n \n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))", "language": "python"}
{"task_id": "MBPP/441", "completion": "  \n  surfacearea= 6*l*l\n  return surfacearea", "language": "python"}
{"task_id": "MBPP/442", "completion": "    from array import array\n    \n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "language": "python"}
{"task_id": "MBPP/443", "completion": "     \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max", "language": "python"}
{"task_id": "MBPP/444", "completion": "  \n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ", "language": "python"}
{"task_id": "MBPP/445", "completion": "  \n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/446", "completion": "    from collections import Counter \n     \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ", "language": "python"}
{"task_id": "MBPP/447", "completion": " \n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums", "language": "python"}
{"task_id": "MBPP/448", "completion": "\t \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum", "language": "python"}
{"task_id": "MBPP/449", "completion": "     \n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \n    if a == 0: \n        return ('No') \n    else: \n        return ('Yes') ", "language": "python"}
{"task_id": "MBPP/450", "completion": "    \n    result = [e for e in str if len(e) == l] \n    return result", "language": "python"}
{"task_id": "MBPP/451", "completion": "  import re\n  \n  return (re.sub(r'\\s+', '',text1))", "language": "python"}
{"task_id": "MBPP/452", "completion": "   \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return None", "language": "python"}
{"task_id": "MBPP/453", "completion": "    import math \n     \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res ", "language": "python"}
{"task_id": "MBPP/454", "completion": "        import re\n        \n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "language": "python"}
{"task_id": "MBPP/455", "completion": "  \n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False", "language": "python"}
{"task_id": "MBPP/456", "completion": "    \n    result = [x[::-1] for x in stringlist]\n    return result", "language": "python"}
{"task_id": "MBPP/457", "completion": "     \n    minList = min((x) for x in lst) \n    return minList", "language": "python"}
{"task_id": "MBPP/458", "completion": "  \n  area=l*b\n  return area", "language": "python"}
{"task_id": "MBPP/459", "completion": "  import re\n  \n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\n  result =  remove_upper(str1)\n  return (result)", "language": "python"}
{"task_id": "MBPP/460", "completion": "     \n    return [item[0] for item in lst] ", "language": "python"}
{"task_id": "MBPP/461", "completion": "    \n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr", "language": "python"}
{"task_id": "MBPP/462", "completion": "    \n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "language": "python"}
{"task_id": "MBPP/463", "completion": "\t\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far", "language": "python"}
{"task_id": "MBPP/464", "completion": "    \n    result = all(x == n for x in dict.values()) \n    return result", "language": "python"}
{"task_id": "MBPP/465", "completion": "  \n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "language": "python"}
{"task_id": "MBPP/466", "completion": "\tdef find_peak_util(arr, low, high, n): \n\t\tmid = low + (high - low)/2\n\t\tmid = int(mid) \n\t\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n\t\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \n\t\t\treturn mid \n\t\telif (mid > 0 and arr[mid - 1] > arr[mid]): \n\t\t\treturn find_peak_util(arr, low, (mid - 1), n) \n\t\telse: \n\t\t\treturn find_peak_util(arr, (mid + 1), high, n) \n\t \n\treturn find_peak_util(arr, 0, n - 1, n) ", "language": "python"}
{"task_id": "MBPP/467", "completion": "    \n    octalNum = 0\n    countval = 1;\n    dNo = deciNum;\n    while (deciNum!= 0):\n        remainder= deciNum % 8;\n        octalNum+= remainder*countval;\n        countval= countval*10;\n        deciNum //= 8; \n    return (octalNum)", "language": "python"}
{"task_id": "MBPP/468", "completion": "\t \n\tmpis =[0] * (n) \n\tfor i in range(n): \n\t\tmpis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \n\treturn max(mpis)", "language": "python"}
{"task_id": "MBPP/469", "completion": "    \n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n                max_so_far = 0\n                for x in range(j):\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\n                    if max_so_far < curr_price:\n                        max_so_far = curr_price\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\n    return final_profit[k][n-1]", "language": "python"}
{"task_id": "MBPP/470", "completion": "  \n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/471", "completion": "     \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ", "language": "python"}
{"task_id": "MBPP/472", "completion": "     \n    return sorted(l) == list(range(min(l),max(l)+1)) ", "language": "python"}
{"task_id": "MBPP/473", "completion": "  \n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)", "language": "python"}
{"task_id": "MBPP/474", "completion": " \n str2 = str1.replace(ch, newch)\n return str2", "language": "python"}
{"task_id": "MBPP/475", "completion": " from collections import Counter\n \n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter", "language": "python"}
{"task_id": "MBPP/476", "completion": "      \n      sum= max(nums)+min(nums)\n      return sum", "language": "python"}
{"task_id": "MBPP/477", "completion": "  \n  return (string.lower())", "language": "python"}
{"task_id": "MBPP/478", "completion": " import re\n \n remove_lower = lambda text: re.sub('[a-z]', '', text)\n result =  remove_lower(str1)\n return result", "language": "python"}
{"task_id": "MBPP/479", "completion": "      \n    while n >= 10:  \n        n = n / 10; \n    return int(n) ", "language": "python"}
{"task_id": "MBPP/480", "completion": "  \n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1;\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "language": "python"}
{"task_id": "MBPP/481", "completion": "\t\n\tif (sum == 0):\n\t\treturn True\n\tif (n == 0):\n\t\treturn False\n\tif (set[n - 1] > sum):\n\t\treturn is_subset_sum(set, n - 1, sum)\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])", "language": "python"}
{"task_id": "MBPP/482", "completion": "\t\timport re \n\t\t \n\t\tpattern = '[A-Z]+[a-z]+$'\n\t\tif re.search(pattern, text): \n\t\t\t\treturn('Yes') \n\t\telse: \n\t\t\t\treturn('No') ", "language": "python"}
{"task_id": "MBPP/483", "completion": "     \n    i = 1;\n    fact = 1; \n    for i in range(1,x): \n        fact = fact * i \n        if (fact % x == 0): \n            break\n    return i ", "language": "python"}
{"task_id": "MBPP/484", "completion": "  \n  res = [sub for sub in test_list1 if sub not in test_list2]\n  return (res) ", "language": "python"}
{"task_id": "MBPP/485", "completion": "\tdef is_palindrome(n) : \n\t\tdivisor = 1\n\t\twhile (n / divisor >= 10) : \n\t\t\tdivisor *= 10\n\t\twhile (n != 0) : \n\t\t\tleading = n // divisor \n\t\t\ttrailing = n % 10\n\t\t\tif (leading != trailing) : \n\t\t\t\treturn False\n\t\t\tn = (n % divisor) // 10\n\t\t\tdivisor = divisor // 100\n\t\treturn True\n\t \n\tA.sort() \n\tfor i in range(n - 1, -1, -1) : \n\t\tif (is_palindrome(A[i])) : \n\t\t\treturn A[i] \n\treturn -1", "language": "python"}
{"task_id": "MBPP/486", "completion": "\tdef nCr(n, r): \n\t\tif (r > n / 2): \n\t\t\tr = n - r \n\t\tanswer = 1 \n\t\tfor i in range(1, r + 1): \n\t\t\tanswer *= (n - r + i) \n\t\t\tanswer /= i \n\t\treturn answer \n\t \n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ", "language": "python"}
{"task_id": "MBPP/487", "completion": "\t \n\tlst = len(tup) \n\tfor i in range(0, lst): \n\t\tfor j in range(0, lst-i-1): \n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \n\t\t\t\ttemp = tup[j] \n\t\t\t\ttup[j]= tup[j + 1] \n\t\t\t\ttup[j + 1]= temp \n\treturn tup", "language": "python"}
{"task_id": "MBPP/488", "completion": "  import math\n  \n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  return area", "language": "python"}
{"task_id": "MBPP/489", "completion": "     \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ", "language": "python"}
{"task_id": "MBPP/490", "completion": "  \n  temp = set(test_list) & {(b, a) for a, b in test_list}\n  res = {(a, b) for a, b in temp if a < b}\n  return (res) ", "language": "python"}
{"task_id": "MBPP/491", "completion": " import math\n \n total = (a * (1 - math.pow(r, n ))) / (1- r)\n return total", "language": "python"}
{"task_id": "MBPP/492", "completion": "\t\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t\tfound = True\n\t\telse:\n\t\t\tif item < item_list[mid]:\n\t\t\t\tlast = mid - 1\n\t\t\telse:\n\t\t\t\tfirst = mid + 1\t\n\treturn found", "language": "python"}
{"task_id": "MBPP/493", "completion": "    import math\n    \n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl   \n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            p2x = startx\n            p2y = starty + (3 * p)\n            p3x = startx + b\n            p3y = starty + h\n            p4x = startx + w\n            p4y = starty + (3 * p)\n            p5x = startx + w\n            p5y = starty + p\n            p6x = startx + b\n            p6y = starty\n            poly = [\n                (p1x, p1y),\n                (p2x, p2y),\n                (p3x, p3y),\n                (p4x, p4y),\n                (p5x, p5y),\n                (p6x, p6y),\n                (p1x, p1y)]\n            polygons.append(poly)\n            counter += 1\n            startx += w\n        starty += yoffset\n        row += 1\n    return polygons", "language": "python"}
{"task_id": "MBPP/494", "completion": "  \n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\n  return (str(res)) ", "language": "python"}
{"task_id": "MBPP/495", "completion": "  import re\n  \n  remove_lower = lambda text: re.sub('[a-z]', '', text)\n  result =  remove_lower(str1)\n  return (result)", "language": "python"}
{"task_id": "MBPP/496", "completion": "  import heapq as hq\n  \n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums", "language": "python"}
{"task_id": "MBPP/497", "completion": "  import math\n  \n  l = math.sqrt(r * r + h * h)\n  SA = math.pi * r * (r + l)\n  return SA", "language": "python"}
{"task_id": "MBPP/498", "completion": "    \n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break  \n    return gcd", "language": "python"}
{"task_id": "MBPP/499", "completion": "  \n  diameter=2*r\n  return diameter", "language": "python"}
{"task_id": "MBPP/500", "completion": "  \n  ans = ' '\n  for i in list:\n    ans = ans+ ' '+i\n  return (ans) ", "language": "python"}
{"task_id": "MBPP/501", "completion": "  def ngcd(x,y):\n      i=1\n      while(i<=x and i<=y):\n          if(x%i==0 and y%i == 0):\n              gcd=i;\n          i+=1\n      return gcd;\n  \n  n = ngcd(x,y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while(i <= z):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result", "language": "python"}
{"task_id": "MBPP/502", "completion": "  \n  r = n%m\n  return (r)", "language": "python"}
{"task_id": "MBPP/503", "completion": "    \n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "language": "python"}
{"task_id": "MBPP/504", "completion": "     \n    sum = 0\n    for i in range(1,n + 1): \n        sum += i * i*i       \n    return sum", "language": "python"}
{"task_id": "MBPP/505", "completion": "    \n    k = 0\n    for i in A:\n        if i:\n            A[k] = i\n            k = k + 1\n    for i in range(k, len(A)):\n        A[i] = 0\n    return A", "language": "python"}
{"task_id": "MBPP/506", "completion": "\t \n\tP = [[0 for i in range(k + 1)] \n\t\t\tfor j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\telse: \n\t\t\t\tP[i][j] = P[i - 1][j] + ( \n\t\t\t\t\t\tj * P[i - 1][j - 1]) \n\t\t\tif (j < k): \n\t\t\t\tP[i][j + 1] = 0\n\treturn P[n][k] ", "language": "python"}
{"task_id": "MBPP/507", "completion": "    \n    for word in list(list1):\n        if word in removewords:\n            list1.remove(word)\n    return list1  ", "language": "python"}
{"task_id": "MBPP/508", "completion": "    \n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    l2 = [e for e in l2 if e in common_elements]\n    return l1 == l2", "language": "python"}
{"task_id": "MBPP/509", "completion": "     \n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    while (n>=1) : \n        count=count+1\n        sm = sm + n \n        n = n-2\n    return sm//count ", "language": "python"}
{"task_id": "MBPP/510", "completion": "\t \n\tn = len(arr) \n\tdp = [[0 for i in range(n + 1)] \n\t\t\tfor j in range(k + 1)] \n\tfor i in range(1, k + 1): \n\t\tfor j in range(1, n + 1): \n\t\t\tdp[i][j] = dp[i][j - 1] \n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n\treturn dp[k][n]", "language": "python"}
{"task_id": "MBPP/511", "completion": "     \n    sum = 0\n    i = 2\n    while(i * i <= num): \n        while(num % i == 0): \n            sum += i \n            num /= i \n        i += 1\n    sum += num \n    return sum", "language": "python"}
{"task_id": "MBPP/512", "completion": "  def flatten(test_tuple): \n  \tfor tup in test_tuple: \n  \t\tif isinstance(tup, tuple): \n  \t\t\tyield from flatten(tup) \n  \t\telse: \n  \t\t\tyield tup \n  \n  res = {}\n  for ele in flatten(test_tuple):\n    if ele not in res:\n      res[ele] = 0\n    res[ele] += 1\n  return (res) ", "language": "python"}
{"task_id": "MBPP/513", "completion": "  \n  res = [ele for sub in test_tup for ele in (sub, K)]\n  return (res) ", "language": "python"}
{"task_id": "MBPP/514", "completion": "  \n  res = sum(list(test_tup))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/515", "completion": "\t \n\tif (n > m): \n\t\treturn True\n\tDP = [False for i in range(m)] \n\tfor i in range(n): \n\t\tif (DP[0]): \n\t\t\treturn True\n\t\ttemp = [False for i in range(m)] \n\t\tfor j in range(m): \n\t\t\tif (DP[j] == True): \n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\n\t\tfor j in range(m): \n\t\t\tif (temp[j]): \n\t\t\t\tDP[j] = True\n\t\tDP[arr[i] % m] = True\n\treturn DP[0]", "language": "python"}
{"task_id": "MBPP/516", "completion": "    \n    RADIX = 10\n    placement = 1\n    max_digit = max(nums)\n\n    while placement < max_digit:\n      buckets = [list() for _ in range( RADIX )]\n      for i in nums:\n        tmp = int((i / placement) % RADIX)\n        buckets[tmp].append(i)\n      a = 0\n      for b in range( RADIX ):\n        buck = buckets[b]\n        for i in buck:\n          nums[a] = i\n          a += 1\n      placement *= RADIX\n    return nums", "language": "python"}
{"task_id": "MBPP/517", "completion": "     \n    max = list1[0] \n    for x in list1: \n        if x > max : \n             max = x  \n    return max", "language": "python"}
{"task_id": "MBPP/518", "completion": " import math\n \n sqrt_root = math.pow(num, 0.5)\n return sqrt_root ", "language": "python"}
{"task_id": "MBPP/519", "completion": "\timport math\n\t\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\n\treturn round(volume, 2)", "language": "python"}
{"task_id": "MBPP/520", "completion": "  def find_lcm(num1, num2): \n  \tif(num1>num2): \n  \t\tnum = num1 \n  \t\tden = num2 \n  \telse: \n  \t\tnum = num2 \n  \t\tden = num1 \n  \trem = num % den \n  \twhile (rem != 0): \n  \t\tnum = den \n  \t\tden = rem \n  \t\trem = num % den \n  \tgcd = den \n  \tlcm = int(int(num1 * num2)/int(gcd)) \n  \treturn lcm \n  \n  num1 = l[0]\n  num2 = l[1]\n  lcm = find_lcm(num1, num2)\n  for i in range(2, len(l)):\n    lcm = find_lcm(lcm, l[i])\n  return lcm ", "language": "python"}
{"task_id": "MBPP/521", "completion": "  \n  if x!=y & y!=z & z!=x:\n\t   return True\n  else:\n     return False", "language": "python"}
{"task_id": "MBPP/522", "completion": "\t \n\tn = len(arr) \n\tlis = [1 for i in range(n+1)] \n\tfor i in range(1 , n): \n\t\tfor j in range(0 , i): \n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \n\t\t\t\tlis[i] = lis[j] + 1\n\tlds = [1 for i in range(n+1)] \n\tfor i in reversed(range(n-1)): \n\t\tfor j in reversed(range(i-1 ,n)): \n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \n\t\t\t\tlds[i] = lds[j] + 1\n\tmaximum = lis[0] + lds[0] - 1\n\tfor i in range(1 , n): \n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \n\treturn maximum", "language": "python"}
{"task_id": "MBPP/523", "completion": "    \n    messg = [\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\n    result = [x for x in [i(str1) for i in messg] if x != True]\n    if not result:\n        result.append('Valid string.')\n    return result  ", "language": "python"}
{"task_id": "MBPP/524", "completion": "\t \n\tmax = 0\n\tmsis = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tmsis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \n\t\t\t\tmsis[i] = msis[j] + arr[i] \n\tfor i in range(n): \n\t\tif max < msis[i]: \n\t\t\tmax = msis[i] \n\treturn max", "language": "python"}
{"task_id": "MBPP/525", "completion": "  \n  return line1[0]/line1[1] == line2[0]/line2[1]", "language": "python"}
{"task_id": "MBPP/526", "completion": "     \n     str1 = result = str1.title()\n     result =  \"\"\n     for word in str1.split():\n        result += word[:-1] + word[-1].upper() + \" \"\n     return result[:-1]  ", "language": "python"}
{"task_id": "MBPP/527", "completion": "    \n    count = 0 \n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count", "language": "python"}
{"task_id": "MBPP/528", "completion": "   \n   min_length = min(len(x) for x in  list1 )  \n   min_list = min((x) for x in   list1)\n   return(min_length, min_list)     ", "language": "python"}
{"task_id": "MBPP/529", "completion": "\t \n\tdp=[0] * (n + 1) \n\tdp[0] = 2\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \n\treturn dp[n]", "language": "python"}
{"task_id": "MBPP/530", "completion": "    from array import array\n    \n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x < 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "language": "python"}
{"task_id": "MBPP/531", "completion": "    import sys \n     \n    if (V == 0): \n        return 0\n    res = sys.maxsize \n    for i in range(0, m): \n        if (coins[i] <= V): \n            sub_res = min_coins(coins, m, V-coins[i]) \n            if (sub_res != sys.maxsize and sub_res + 1 < res): \n                res = sub_res + 1  \n    return res ", "language": "python"}
{"task_id": "MBPP/532", "completion": "  \n  n1=len(str1)\n  n2=len(str2)\n  if(n1!=n2):\n    return False\n  a=sorted(str1)\n  str1=\" \".join(a)\n  b=sorted(str2)\n  str2=\" \".join(b)\n  for i in range(0, n1, 1):\n    if(str1[i] != str2[i]):\n      return False\n  return True", "language": "python"}
{"task_id": "MBPP/533", "completion": "  \n  res = []\n  for ele in test_tuple:\n    if not isinstance(ele, data_type):\n      res.append(ele)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/534", "completion": " import re\n \n match = re.search(pattern, text)\n s = match.start()\n e = match.end()\n return (s, e)", "language": "python"}
{"task_id": "MBPP/535", "completion": "  \n  toporbottomarea=3.1415*r*r\n  return toporbottomarea", "language": "python"}
{"task_id": "MBPP/536", "completion": " \n return list[::n]", "language": "python"}
{"task_id": "MBPP/537", "completion": "  \n  temp = set()\n  for word in str1.split():\n    if word in temp:\n      return word;\n    else:\n      temp.add(word)\n  return 'None'", "language": "python"}
{"task_id": "MBPP/538", "completion": "    \n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "language": "python"}
{"task_id": "MBPP/539", "completion": "  \n  result = list(map(pow, bases_num, index))\n  return result", "language": "python"}
{"task_id": "MBPP/540", "completion": "     \n    arr.sort()  \n    count = 0; max_count = 0; min_count = n \n    for i in range(0,(n-1)): \n        if arr[i] == arr[i + 1]: \n            count += 1\n            continue\n        else: \n            max_count = max(max_count,count) \n            min_count = min(min_count,count) \n            count = 0\n    return max_count - min_count ", "language": "python"}
{"task_id": "MBPP/541", "completion": "\timport math \n\tdef get_sum(n): \n\t\tsum = 0\n\t\ti = 1\n\t\twhile i <= (math.sqrt(n)): \n\t\t\tif n%i == 0: \n\t\t\t\tif n/i == i : \n\t\t\t\t\tsum = sum + i \n\t\t\t\telse: \n\t\t\t\t\tsum = sum + i \n\t\t\t\t\tsum = sum + (n / i ) \n\t\t\ti = i + 1\n\t\tsum = sum - n \n\t\treturn sum\n\t \n\tif (get_sum(n) > n): \n\t\treturn True\n\telse: \n\t\treturn False", "language": "python"}
{"task_id": "MBPP/542", "completion": "  import re\n  \n  return (re.sub(\"[ ,.]\", \":\", text))", "language": "python"}
{"task_id": "MBPP/543", "completion": "    \n    number=num1+num2\n    count = 0\n    while(number > 0):\n        number = number // 10\n        count = count + 1\n    return count", "language": "python"}
{"task_id": "MBPP/544", "completion": "  \n  res = ' '.join([idx for tup in test_list for idx in tup])\n  return (res) ", "language": "python"}
{"task_id": "MBPP/545", "completion": "    def take_L_and_F_set_bits(n) : \n        n = n | n >> 1\n        n = n | n >> 2\n        n = n | n >> 4\n        n = n | n >> 8\n        n = n | n >> 16 \n        return ((n + 1) >> 1) + 1      \n      \n    if (n == 1) : \n        return 0 \n    return n ^ take_L_and_F_set_bits(n) ", "language": "python"}
{"task_id": "MBPP/546", "completion": " \n flag = -1\n for i in range(len(string)):\n     if(string[i] == char):\n         flag = i\n if(flag == -1):\n    return None\n else:\n    return flag + 1", "language": "python"}
{"task_id": "MBPP/547", "completion": "       \n    i = 1\n    sum = 0\n    while (n // i > 0):  \n        sum = sum + n // i  \n        i = i * 2     \n    return sum", "language": "python"}
{"task_id": "MBPP/548", "completion": "\t \n\tn = len(arr) \n\tlongest_increasing_subsequence = [1]*n \n\tfor i in range (1 , n): \n\t\tfor j in range(0 , i): \n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\n\tmaximum = 0\n\tfor i in range(n): \n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \n\treturn maximum", "language": "python"}
{"task_id": "MBPP/549", "completion": "     \n    j = 0\n    sm = 0\n    for i in range(1,n+1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j*j)     \n    return sm ", "language": "python"}
{"task_id": "MBPP/550", "completion": "     \n    if (high < low): \n        return arr[0] \n    if (high == low): \n        return arr[low] \n    mid = low + (high - low) // 2 \n    if (mid < high and arr[mid + 1] < arr[mid]): \n        return arr[mid] \n    if (mid > low and arr[mid] < arr[mid - 1]): \n        return arr[mid - 1]  \n    if (arr[low] > arr[mid]): \n        return find_Max(arr,low,mid - 1) \n    else: \n        return find_Max(arr,mid + 1,high) ", "language": "python"}
{"task_id": "MBPP/551", "completion": "   \n   result = [i.pop(n) for i in list1]\n   return result ", "language": "python"}
{"task_id": "MBPP/552", "completion": "  \n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\n  if len(set(seq_nums)) == 1: \n    return \"Linear Sequence\"\n  else:\n    return \"Non Linear Sequence\"", "language": "python"}
{"task_id": "MBPP/553", "completion": "  \n  res = float('.'.join(str(ele) for ele in test_tup))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/554", "completion": "     \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li", "language": "python"}
{"task_id": "MBPP/555", "completion": "      \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  ", "language": "python"}
{"task_id": "MBPP/556", "completion": "     \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  ", "language": "python"}
{"task_id": "MBPP/557", "completion": " \n string1 = string.swapcase()\n return string1", "language": "python"}
{"task_id": "MBPP/558", "completion": "         \n         return sum(map(int,str(abs(n1-n2))))", "language": "python"}
{"task_id": "MBPP/559", "completion": "  \n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far", "language": "python"}
{"task_id": "MBPP/560", "completion": "  \n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/561", "completion": "  \n  res = dict()\n  for key, val in test_list:\n    res.setdefault(val, [])\n    res.setdefault(key, []).append(val)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/562", "completion": "      \n    maxLength = max(len(x) for x in lst )\n    return maxLength ", "language": "python"}
{"task_id": "MBPP/563", "completion": " import re\n \n return (re.findall(r'\"(.*?)\"', text))", "language": "python"}
{"task_id": "MBPP/564", "completion": "     \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; ", "language": "python"}
{"task_id": "MBPP/565", "completion": "     \n    return [char for char in word] ", "language": "python"}
{"task_id": "MBPP/566", "completion": "  \n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))", "language": "python"}
{"task_id": "MBPP/567", "completion": "    \n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result", "language": "python"}
{"task_id": "MBPP/568", "completion": " \n empty_list = [{} for _ in range(length)]\n return empty_list", "language": "python"}
{"task_id": "MBPP/569", "completion": "    \n    result = list(map(sorted,list1)) \n    return result", "language": "python"}
{"task_id": "MBPP/570", "completion": "    \n    new_list = []\n    for line in list1:\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\n        new_list.append(new_words)\n    return new_list", "language": "python"}
{"task_id": "MBPP/571", "completion": "\t \n\tarr.sort() \n\tdp = [0] * N \n\tdp[0] = 0\n\tfor i in range(1, N): \n\t\tdp[i] = dp[i-1] \n\t\tif (arr[i] - arr[i-1] < K): \n\t\t\tif (i >= 2): \n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \n\t\t\telse: \n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \n\treturn dp[N - 1]", "language": "python"}
{"task_id": "MBPP/572", "completion": "  \n  return [i for i in nums if nums.count(i)==1]", "language": "python"}
{"task_id": "MBPP/573", "completion": "    \n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p", "language": "python"}
{"task_id": "MBPP/574", "completion": "  \n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea", "language": "python"}
{"task_id": "MBPP/575", "completion": "     \n    count = 0\n    for i in range (L,R + 1): \n        if (i % A != 0): \n            count += 1\n        if (count == N): \n            break\n    return (i) ", "language": "python"}
{"task_id": "MBPP/576", "completion": "     \n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; ", "language": "python"}
{"task_id": "MBPP/577", "completion": "     \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0", "language": "python"}
{"task_id": "MBPP/578", "completion": "    \n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result", "language": "python"}
{"task_id": "MBPP/579", "completion": "  \n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/580", "completion": "  def even_ele(test_tuple, even_fnc): \n  \tres = tuple() \n  \tfor ele in test_tuple: \n  \t\tif isinstance(ele, tuple): \n  \t\t\tres += (even_ele(ele, even_fnc), ) \n  \t\telif even_fnc(ele): \n  \t\t\tres += (ele, ) \n  \treturn res \n  \n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/581", "completion": "     \n    return 2 * b * s + pow(b,2) ", "language": "python"}
{"task_id": "MBPP/582", "completion": "  \n  if bool(dict1):\n     return False\n  else:\n     return True", "language": "python"}
{"task_id": "MBPP/583", "completion": "    \n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num", "language": "python"}
{"task_id": "MBPP/584", "completion": "  import re\n  \n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))", "language": "python"}
{"task_id": "MBPP/585", "completion": "  import heapq\n  \n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items", "language": "python"}
{"task_id": "MBPP/586", "completion": "     \n   b = a[:k] \n   return (a[k::]+b[::]) ", "language": "python"}
{"task_id": "MBPP/587", "completion": "  \n  tuplex = tuple(listx)\n  return tuplex", "language": "python"}
{"task_id": "MBPP/588", "completion": "     \n     diff= max(nums)-min(nums)\n     return diff", "language": "python"}
{"task_id": "MBPP/589", "completion": "    \n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists", "language": "python"}
{"task_id": "MBPP/590", "completion": " import cmath\n \n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)", "language": "python"}
{"task_id": "MBPP/591", "completion": "     \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList ", "language": "python"}
{"task_id": "MBPP/592", "completion": "    def binomial_Coeff(n,k): \n        C = [0] * (k + 1); \n        C[0] = 1; # nC0 is 1 \n        for i in range(1,n + 1):  \n            for j in range(min(i, k),0,-1): \n                C[j] = C[j] + C[j - 1]; \n        return C[k]; \n     \n    return binomial_Coeff(2 * n,n - 1); ", "language": "python"}
{"task_id": "MBPP/593", "completion": " import re\n \n string = re.sub('\\.[0]*', '.', ip)\n return string", "language": "python"}
{"task_id": "MBPP/594", "completion": "    \n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)", "language": "python"}
{"task_id": "MBPP/595", "completion": "     \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") ", "language": "python"}
{"task_id": "MBPP/596", "completion": "  import sys \n  \n  return (sys.getsizeof(tuple_list)) ", "language": "python"}
{"task_id": "MBPP/597", "completion": "\t\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]", "language": "python"}
{"task_id": "MBPP/598", "completion": " \n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False", "language": "python"}
{"task_id": "MBPP/599", "completion": " \n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)", "language": "python"}
{"task_id": "MBPP/600", "completion": "     \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; ", "language": "python"}
{"task_id": "MBPP/601", "completion": "\tclass Pair(object): \n\t\tdef __init__(self, a, b): \n\t\t\tself.a = a \n\t\t\tself.b = b \n\t \n\tmax = 0\n\tmcl = [1 for i in range(n)] \n\tfor i in range(1, n): \n\t\tfor j in range(0, i): \n\t\t\tif (arr[i].a > arr[j].b and\n\t\t\t\tmcl[i] < mcl[j] + 1): \n\t\t\t\tmcl[i] = mcl[j] + 1\n\tfor i in range(n): \n\t\tif (max < mcl[i]): \n\t\t\tmax = mcl[i] \n\treturn max", "language": "python"}
{"task_id": "MBPP/602", "completion": "  \n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c \n  return \"None\"", "language": "python"}
{"task_id": "MBPP/603", "completion": "\t\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics", "language": "python"}
{"task_id": "MBPP/604", "completion": "        \n        return ' '.join(reversed(s.split()))", "language": "python"}
{"task_id": "MBPP/605", "completion": "  \n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False", "language": "python"}
{"task_id": "MBPP/606", "completion": " import math\n \n radian = degree*(math.pi/180)\n return radian", "language": "python"}
{"task_id": "MBPP/607", "completion": "  import re\n  pattern = 'fox'\n  text = 'The quick brown fox jumps over the lazy dog.'\n  \n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)", "language": "python"}
{"task_id": "MBPP/608", "completion": "     \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] ", "language": "python"}
{"task_id": "MBPP/609", "completion": "    \n    x = max(B - 1,N)\n    return (A*x) // B", "language": "python"}
{"task_id": "MBPP/610", "completion": "    \n    return  list1[:L-1] + list1[L:]", "language": "python"}
{"task_id": "MBPP/611", "completion": "  \n  res = max([sub[N] for sub in test_list])\n  return (res) ", "language": "python"}
{"task_id": "MBPP/612", "completion": "      \n    return [list(ele) for ele in list(zip(*lst))] ", "language": "python"}
{"task_id": "MBPP/613", "completion": "  \n  res = [(key, max(lst)) for key, lst in test_list]\n  return (res) ", "language": "python"}
{"task_id": "MBPP/614", "completion": "  \n  res = sum(map(sum, test_list))\n  return (res)", "language": "python"}
{"task_id": "MBPP/615", "completion": "    \n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result", "language": "python"}
{"task_id": "MBPP/616", "completion": "  \n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) ", "language": "python"}
{"task_id": "MBPP/617", "completion": "     \n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2", "language": "python"}
{"task_id": "MBPP/618", "completion": "  \n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)", "language": "python"}
{"task_id": "MBPP/619", "completion": "  \n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) ", "language": "python"}
{"task_id": "MBPP/620", "completion": "\t\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)", "language": "python"}
{"task_id": "MBPP/621", "completion": "  \n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\n  return res ", "language": "python"}
{"task_id": "MBPP/622", "completion": "  \n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2", "language": "python"}
{"task_id": "MBPP/623", "completion": " \n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums", "language": "python"}
{"task_id": "MBPP/624", "completion": "  \n  return (string.upper())", "language": "python"}
{"task_id": "MBPP/625", "completion": "     \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList ", "language": "python"}
{"task_id": "MBPP/626", "completion": "      \n    if r < 0 : \n        return -1\n    return r * r ", "language": "python"}
{"task_id": "MBPP/627", "completion": "     \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) ", "language": "python"}
{"task_id": "MBPP/628", "completion": "  MAX=1000;\n  \n  string=string.strip()\n  i=len(string)\n  space_count=string.count(' ')\n  new_length = i + space_count*2\n  if new_length > MAX:\n    return -1\n  index = new_length-1\n  string=list(string)\n  for f in range(i-2, new_length-2):\n    string.append('0')\n  for j in range(i-1, 0, -1):\n    if string[j] == ' ':\n      string[index] = '0'\n      string[index-1] = '2'\n      string[index-2] = '%'\n      index=index-3\n    else:\n      string[index] = string[j]\n      index -= 1\n  return ''.join(string)", "language": "python"}
{"task_id": "MBPP/629", "completion": "     \n    ev_li = [] \n    for i in list: \n        if (i % 2 == 0): \n            ev_li.append(i)  \n    return ev_li", "language": "python"}
{"task_id": "MBPP/630", "completion": "  def adjac(ele, sub = []): \n    if not ele: \n       yield sub \n    else: \n       yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                  for idx in adjac(ele[1:], sub + [j])] \n  \n  res = list(adjac(test_tup))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/631", "completion": "  import re\n  text = 'Python Exercises'\n  \n  text =text.replace (\" \", \"_\")\n  return (text)\n  text =text.replace (\"_\", \" \")\n  return (text)", "language": "python"}
{"task_id": "MBPP/632", "completion": "    \n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return (x)", "language": "python"}
{"task_id": "MBPP/633", "completion": "     \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans ", "language": "python"}
{"task_id": "MBPP/634", "completion": "     \n    sum = 0; \n    for i in range(1,n + 1): \n        j = 2*i; \n        sum = sum + (j*j*j*j); \n    return sum; ", "language": "python"}
{"task_id": "MBPP/635", "completion": "    import heapq as hq\n    \n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]", "language": "python"}
{"task_id": "MBPP/636", "completion": "     \n    if (a == c): \n        return (\"Yes\"); \n    else: \n        return (\"No\"); ", "language": "python"}
{"task_id": "MBPP/637", "completion": "   \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False", "language": "python"}
{"task_id": "MBPP/638", "completion": " import math\n \n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))", "language": "python"}
{"task_id": "MBPP/639", "completion": "  \n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))", "language": "python"}
{"task_id": "MBPP/640", "completion": " import re\n \n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "language": "python"}
{"task_id": "MBPP/641", "completion": "\t \n\treturn int(n * (7 * n - 5) / 2) ", "language": "python"}
{"task_id": "MBPP/642", "completion": "  \n  res = set([tuple(set(sub)) for sub in test_list])\n  return (res) ", "language": "python"}
{"task_id": "MBPP/643", "completion": "        import re\n        \n        patterns = '\\Bz\\B'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "language": "python"}
{"task_id": "MBPP/644", "completion": "   \n  return (input[k-1::-1] + input[k:]) ", "language": "python"}
{"task_id": "MBPP/645", "completion": "  def get_product(val) : \n  \tres = 1\n  \tfor ele in val: \n  \t\tres *= ele \n  \treturn res \n  \n  res = get_product([sub[K] for sub in test_list])\n  return (res) ", "language": "python"}
{"task_id": "MBPP/646", "completion": "    \n    No = 0\n    No = (N - K + 1)\n    No = pow(No, 3)\n    return No", "language": "python"}
{"task_id": "MBPP/647", "completion": " import re\n \n return (re.findall('[A-Z][^A-Z]*', text))", "language": "python"}
{"task_id": "MBPP/648", "completion": "    from itertools import zip_longest, chain, tee\n    \n    lst1, lst2 = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))", "language": "python"}
{"task_id": "MBPP/649", "completion": "                                                                                                                                                                                                    \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += nums[i]                                                                                                                                                                                                  \n    return sum_range   ", "language": "python"}
{"task_id": "MBPP/650", "completion": "    \n    if (n != m):\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0,n - 1):\n        if (arr1[i] != arr2[i]):\n            return False\n    return True", "language": "python"}
{"task_id": "MBPP/651", "completion": "  \n  res = set(test_tup2).issubset(test_tup1)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/652", "completion": "  \n  temp = [ele for sub in test_list for ele in sub]\n  res = list(zip(*temp))\n  return (str(res))", "language": "python"}
{"task_id": "MBPP/653", "completion": "    from collections import defaultdict\n    \n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d", "language": "python"}
{"task_id": "MBPP/654", "completion": "  \n  perimeter=2*(l+b)\n  return perimeter", "language": "python"}
{"task_id": "MBPP/655", "completion": "     \n    sm = 0 \n    for i in range(1,n+1) : \n        sm = sm + (i*i*i*i*i) \n    return sm ", "language": "python"}
{"task_id": "MBPP/656", "completion": "     \n    a.sort() \n    b.sort() \n    sum = 0  \n    for i in range(n): \n        sum = sum + abs(a[i] - b[i]) \n    return sum", "language": "python"}
{"task_id": "MBPP/657", "completion": "    import math \n     \n    fact = 1\n    for i in range(2,n + 1) : \n        fact = fact * i \n        while (fact % 10 == 0) :  \n            fact = int(fact / 10) \n    while (fact >= 10) : \n        fact = int(fact / 10) \n    return math.floor(fact) ", "language": "python"}
{"task_id": "MBPP/658", "completion": "    \n    max_val = 0\n    result = list1[0] \n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result", "language": "python"}
{"task_id": "MBPP/659", "completion": "     \n    _size = len(x) \n    repeated = [] \n    for i in range(_size): \n        k = i + 1\n        for j in range(k, _size): \n            if x[i] == x[j] and x[i] not in repeated: \n                repeated.append(x[i]) \n    return repeated ", "language": "python"}
{"task_id": "MBPP/660", "completion": "     \n    x = min(l1,l2) if (l1 != l2) else -1\n    y = max(r1,r2) if (r1 != r2) else -1\n    return (x,y)", "language": "python"}
{"task_id": "MBPP/661", "completion": "\t \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = arr[0] + arr[1] \n\tif n > 2: \n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \n\tfor i in range(3, n): \n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \n\treturn sum[n-1]", "language": "python"}
{"task_id": "MBPP/662", "completion": "  \n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n  return sorted_dict", "language": "python"}
{"task_id": "MBPP/663", "completion": "\timport sys \n\t \n\tans = -sys.maxsize \n\tfor k in range(n + 1): \n\t\tif (k % x == y): \n\t\t\tans = max(ans, k) \n\treturn (ans if (ans >= 0 and\n\t\t\t\t\tans <= n) else -1) ", "language": "python"}
{"task_id": "MBPP/664", "completion": "     \n    if (n% 2!= 0) : \n        return (\"Invalid Input\") \n        return -1  \n    sm = 0\n    count = 0\n    while (n>= 2) : \n        count = count+1\n        sm = sm+n \n        n = n-2\n    return sm // count ", "language": "python"}
{"task_id": "MBPP/665", "completion": "    \n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return (x)", "language": "python"}
{"task_id": "MBPP/666", "completion": " \n count = 0\n for i in range(len(string)):\n    if(string[i] == char):\n        count = count + 1\n return count", "language": "python"}
{"task_id": "MBPP/667", "completion": "     \n    final = [each for each in string if each in vowels] \n    return(len(final)) \n", "language": "python"}
{"task_id": "MBPP/668", "completion": "    import re \n     \n    pattern = char + '{2,}'\n    string = re.sub(pattern, char, string) \n    return string ", "language": "python"}
{"task_id": "MBPP/669", "completion": "\timport re \n\tregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\t\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\t\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\t\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\n\t \n\tif(re.search(regex, Ip)): \n\t\treturn (\"Valid IP address\") \n\telse: \n\t\treturn (\"Invalid IP address\") ", "language": "python"}
{"task_id": "MBPP/670", "completion": "    \n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False", "language": "python"}
{"task_id": "MBPP/671", "completion": "    import math \n    def get_Pos_Of_Right_most_Set_Bit(n): \n        return int(math.log2(n&-n)+1)   \n     \n    if (n == 0): \n        return 1\n    if ((n & (n + 1)) == 0):     \n        return n \n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \n    return ((1 << (pos - 1)) | n) ", "language": "python"}
{"task_id": "MBPP/672", "completion": "     \n    if (num1 >= num2) and (num1 >= num3):\n       lnum = num1\n    elif (num2 >= num1) and (num2 >= num3):\n       lnum = num2\n    else:\n       lnum = num3\n    return lnum", "language": "python"}
{"task_id": "MBPP/673", "completion": "     \n    s = [str(i) for i in list] \n    res = int(\"\".join(s))  \n    return (res) ", "language": "python"}
{"task_id": "MBPP/674", "completion": "  from collections import OrderedDict\n  \n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\n  return result", "language": "python"}
{"task_id": "MBPP/675", "completion": "    \n    sum_nums= x + y\n    if sum_nums in range(m, n):\n        return 20\n    else:\n        return sum_nums", "language": "python"}
{"task_id": "MBPP/676", "completion": "  import re\n  \n  pattern = re.compile('[\\W_]+')\n  return (pattern.sub('', text1))", "language": "python"}
{"task_id": "MBPP/677", "completion": " \n total = a + b + c\n if total == 180:\n    return True\n else:\n    return False", "language": "python"}
{"task_id": "MBPP/678", "completion": "  \n  str1 = str1.replace(' ','')\n  return str1", "language": "python"}
{"task_id": "MBPP/679", "completion": "  \n  return list(ditionary)[key]", "language": "python"}
{"task_id": "MBPP/680", "completion": "    \n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False", "language": "python"}
{"task_id": "MBPP/681", "completion": "     \n    if (n % 2 == 0): \n        return 2; \n    i = 3;  \n    while (i*i <= n): \n        if (n % i == 0): \n            return i; \n        i += 2; \n    return n; ", "language": "python"}
{"task_id": "MBPP/682", "completion": "  \n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)", "language": "python"}
{"task_id": "MBPP/683", "completion": "     \n    i = 1 \n    while i*i <= n : \n        j = 1\n        while (j*j <= n) : \n            if (i*i+j*j == n) : \n                return True\n            j = j+1\n        i = i+1     \n    return False", "language": "python"}
{"task_id": "MBPP/684", "completion": "     \n    count = 0\n    for i in range(len(str)):  \n        if (str[i] == x) : \n            count += 1\n    n = 10\n    repititions = n // len(str)  \n    count = count * repititions  \n    l = n % len(str)  \n    for i in range(l): \n        if (str[i] == x):  \n            count += 1\n    return count  ", "language": "python"}
{"task_id": "MBPP/685", "completion": "     \n    prime = [True] * (n + 1)  \n    p = 2\n    while p * p <= n: \n        if prime[p] == True:  \n            i = p * 2\n            while i <= n: \n                prime[i] = False\n                i += p \n        p += 1    \n    sum = 0\n    for i in range (2,n + 1): \n        if(prime[i]): \n            sum += i \n    return sum", "language": "python"}
{"task_id": "MBPP/686", "completion": "  from collections import defaultdict \n  \n  res = defaultdict(int)\n  for ele in test_tup:\n    res[ele] += 1\n  return (str(dict(res))) ", "language": "python"}
{"task_id": "MBPP/687", "completion": "\t\n\tlow = min(a, b)\n\thigh = max(a, b)\n\tif low == 0:\n\t\treturn high\n\telif low == 1:\n\t\treturn 1\n\telse:\n\t\treturn recur_gcd(low, high%low)", "language": "python"}
{"task_id": "MBPP/688", "completion": "  import cmath\n  \n  cn=complex(a,b)\n  length=abs(cn)\n  return length", "language": "python"}
{"task_id": "MBPP/689", "completion": "\t\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\tbreak\n\treturn jumps[n-1]", "language": "python"}
{"task_id": "MBPP/690", "completion": "    \n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "language": "python"}
{"task_id": "MBPP/691", "completion": "  from itertools import groupby \n  \n  res = dict()\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\n    res[key] = [ele[0] for ele in val] \n  return (res)\n", "language": "python"}
{"task_id": "MBPP/692", "completion": "     \n    if (N >= 10): \n        return\n    fac = 1\n    for i in range(1,N + 1): \n        fac = (fac * i) % 100\n    return (fac) ", "language": "python"}
{"task_id": "MBPP/693", "completion": "  import re\n  \n  return (re.sub(' +',' ',text1))", "language": "python"}
{"task_id": "MBPP/694", "completion": "  \n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\n  return res", "language": "python"}
{"task_id": "MBPP/695", "completion": "  \n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/696", "completion": "   \n result = list(map(list.__add__, list1, list2)) \n return result", "language": "python"}
{"task_id": "MBPP/697", "completion": "   \n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even", "language": "python"}
{"task_id": "MBPP/698", "completion": "  \n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\n  return  (res) \n", "language": "python"}
{"task_id": "MBPP/699", "completion": "     \n    count = 0\n    for i in range(len(str1)) : \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") ", "language": "python"}
{"task_id": "MBPP/700", "completion": "\t\n\tctr = 0\n\tfor x in li:\n\t\tif min <= x <= max:\n\t\t\tctr += 1\n\treturn ctr", "language": "python"}
{"task_id": "MBPP/701", "completion": "  \n  total_sum = sum(arr)\n  left_sum=0\n  for i, num in enumerate(arr):\n    total_sum -= num\n    if left_sum == total_sum:\n      return i\n    left_sum += num\n  return -1", "language": "python"}
{"task_id": "MBPP/702", "completion": "\tdef find_ind(key, i, n, \n\t\t\t\tk, arr):\n\t\tind = -1\n\t\tstart = i + 1\n\t\tend = n - 1;\n\t\twhile (start < end):\n\t\t\tmid = int(start +\n\t\t\t\t\t(end - start) / 2)\n\t\t\tif (arr[mid] - key <= k):\n\t\t\t\tind = mid\n\t\t\t\tstart = mid + 1\n\t\t\telse:\n\t\t\t\tend = mid\n\t\treturn ind\n\t\n\tans = n - 1\n\tarr.sort()\n\tfor i in range(0, n):\n\t\tj = find_ind(arr[i], i, \n\t\t\t\t\tn, k, arr)\n\t\tif (j != -1):\n\t\t\tans = min(ans, n -\n\t\t\t\t\t\t(j - i + 1))\n\treturn ans", "language": "python"}
{"task_id": "MBPP/703", "completion": "  \n  if x in d:\n    return True\n  else:\n     return False", "language": "python"}
{"task_id": "MBPP/704", "completion": "  \n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1))", "language": "python"}
{"task_id": "MBPP/705", "completion": "      \n      list1.sort()  \n      list1.sort(key=len)\n      return  list1", "language": "python"}
{"task_id": "MBPP/706", "completion": "\t \n\thashset = set() \n\tfor i in range(0, m): \n\t\thashset.add(arr1[i]) \n\tfor i in range(0, n): \n\t\tif arr2[i] in hashset: \n\t\t\tcontinue\n\t\telse: \n\t\t\treturn False\n\treturn True\t\t", "language": "python"}
{"task_id": "MBPP/707", "completion": "      \n    n += 1; \n    powerOf2 = 2;   \n    cnt = n // 2;  \n    while (powerOf2 <= n) : \n        totalPairs = n // powerOf2;  \n        cnt += (totalPairs // 2) * powerOf2;  \n        if (totalPairs & 1) : \n            cnt += (n % powerOf2) \n        else : \n            cnt += 0\n        powerOf2 <<= 1;    \n    return cnt;  ", "language": "python"}
{"task_id": "MBPP/708", "completion": "     \n    li = list(string.split(\" \")) \n    return li ", "language": "python"}
{"task_id": "MBPP/709", "completion": "  from collections import defaultdict \n  \n  res = defaultdict(list)\n  for sub in test_list:\n    res[sub[1]].append(sub[0])\n  res = dict(res)\n  res_dict = dict()\n  for key in res:\n    res_dict[key] = len(list(set(res[key])))\n  return (str(res_dict)) ", "language": "python"}
{"task_id": "MBPP/710", "completion": "  \n  res = (test_tup[0], test_tup[-1])\n  return (res) ", "language": "python"}
{"task_id": "MBPP/711", "completion": "     \n    if n < 10: \n        return False\n    prodOdd = 1; prodEven = 1\n    while n > 0: \n        digit = n % 10\n        prodOdd *= digit \n        n = n//10\n        if n == 0: \n            break; \n        digit = n % 10\n        prodEven *= digit \n        n = n//10\n    if prodOdd == prodEven: \n        return True\n    return False", "language": "python"}
{"task_id": "MBPP/712", "completion": " import itertools\n \n list.sort(list1)\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\n return remove_duplicate", "language": "python"}
{"task_id": "MBPP/713", "completion": "  \n  res = not any(map(lambda ele: not ele, test_tup))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/714", "completion": "      \n    m = n \n    count = 0\n    i = 2\n    while((i * i) <= m): \n        total = 0\n        while (n % i == 0): \n            n /= i \n            total += 1 \n        temp = 0\n        j = 1\n        while((temp + j) <= total): \n            temp += j \n            count += 1\n            j += 1 \n        i += 1\n    if (n != 1): \n        count += 1 \n    return count ", "language": "python"}
{"task_id": "MBPP/715", "completion": "  \n  res = tuple(map(int, test_str.split(', ')))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/716", "completion": "  \n  perimeter=4*a\n  return perimeter", "language": "python"}
{"task_id": "MBPP/717", "completion": "    import math\n    import sys\n    \n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean)**2\n    sd = math.sqrt(sd / float(n-1))\n    return sd\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean", "language": "python"}
{"task_id": "MBPP/718", "completion": "    \n    result=[]\n    for item in list1[::2]:\n        result.append(item)\n    return result ", "language": "python"}
{"task_id": "MBPP/719", "completion": "        import re\n        \n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "language": "python"}
{"task_id": "MBPP/720", "completion": "  \n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) ", "language": "python"}
{"task_id": "MBPP/721", "completion": "\tM = 100\n\t \n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \n\tdp[0][0] = cost[0][0] \n\tfor i in range(1, N): \n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \n\tfor j in range(1, N): \n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \n\tfor i in range(1, N): \n\t\tfor j in range(1, N): \n\t\t\tdp[i][j] = max(dp[i - 1][j], \n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \n\treturn dp[N - 1][N - 1] / (2 * N - 1)", "language": "python"}
{"task_id": "MBPP/722", "completion": "    \n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    ", "language": "python"}
{"task_id": "MBPP/723", "completion": "    from operator import eq\n    \n    result = sum(map(eq, nums1, nums2))\n    return result", "language": "python"}
{"task_id": "MBPP/724", "completion": "    \n    return sum([int(i) for i in str(pow(base, power))])", "language": "python"}
{"task_id": "MBPP/725", "completion": "  import re\n  \n  return (re.findall(r'\"(.*?)\"', text1))", "language": "python"}
{"task_id": "MBPP/726", "completion": "  \n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/727", "completion": "  import re \n  \n  result = re.sub('[\\W_]+', '', S) \n  return result", "language": "python"}
{"task_id": "MBPP/728", "completion": "  \n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "language": "python"}
{"task_id": "MBPP/729", "completion": "  \n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)", "language": "python"}
{"task_id": "MBPP/730", "completion": "    from itertools import groupby\n    \n    return [key for key, group in groupby(nums)] ", "language": "python"}
{"task_id": "MBPP/731", "completion": "  import math\n  \n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA", "language": "python"}
{"task_id": "MBPP/732", "completion": " import re\n \n return (re.sub(\"[ ,.]\", \":\", text))", "language": "python"}
{"task_id": "MBPP/733", "completion": "    \n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "language": "python"}
{"task_id": "MBPP/734", "completion": "    \n    ans = 0\n    res = 0\n    i = n - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)", "language": "python"}
{"task_id": "MBPP/735", "completion": "    def set_middle_bits(n):  \n        n |= n >> 1; \n        n |= n >> 2; \n        n |= n >> 4; \n        n |= n >> 8; \n        n |= n >> 16;  \n        return (n >> 1) ^ 1\n     \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) ", "language": "python"}
{"task_id": "MBPP/736", "completion": "    import bisect\n    \n    i = bisect.bisect_left(a, x)\n    return i", "language": "python"}
{"task_id": "MBPP/737", "completion": "\timport re \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\t \n\tif(re.search(regex, string)): \n\t\treturn (\"Valid\") \n\telse: \n\t\treturn (\"Invalid\") ", "language": "python"}
{"task_id": "MBPP/738", "completion": "  \n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "language": "python"}
{"task_id": "MBPP/739", "completion": "    import math \n     \n    x = math.sqrt(2 * math.pow(10,(n - 1))); \n    return round(x); ", "language": "python"}
{"task_id": "MBPP/740", "completion": "  \n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/741", "completion": "    \n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True", "language": "python"}
{"task_id": "MBPP/742", "completion": "  import math\n  \n  area = math.sqrt(3)*(side*side)\n  return area", "language": "python"}
{"task_id": "MBPP/743", "completion": "  \n  result =  list1[-(m):]+list1[:-(n)]\n  return result", "language": "python"}
{"task_id": "MBPP/744", "completion": "  \n  res = any(map(lambda ele: ele is None, test_tup))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/745", "completion": "    \n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "language": "python"}
{"task_id": "MBPP/746", "completion": "    \n    pi=22/7\n    if a >= 360:\n        return None\n    sectorarea = (pi*r**2) * (a/360)\n    return sectorarea", "language": "python"}
{"task_id": "MBPP/747", "completion": "\t \n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \n\t\tfor k in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tfor k in range(o+1): \n\t\t\t\tif (i == 0 or j == 0 or k == 0): \n\t\t\t\t\tL[i][j][k] = 0\n\t\t\t\telif (X[i-1] == Y[j-1] and\n\t\t\t\t\tX[i-1] == Z[k-1]): \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t\telse: \n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \n\treturn L[m][n][o]", "language": "python"}
{"task_id": "MBPP/748", "completion": "  import re\n  \n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "language": "python"}
{"task_id": "MBPP/749", "completion": "    \n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result", "language": "python"}
{"task_id": "MBPP/750", "completion": "  \n  test_list += test_tup\n  return (test_list) ", "language": "python"}
{"task_id": "MBPP/751", "completion": "    \n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap(arr, 2 * i + 2))\n    return left_child and right_child", "language": "python"}
{"task_id": "MBPP/752", "completion": "\t \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]", "language": "python"}
{"task_id": "MBPP/753", "completion": "  \n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) ", "language": "python"}
{"task_id": "MBPP/754", "completion": "    \n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result", "language": "python"}
{"task_id": "MBPP/755", "completion": "  \n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()    \n  return  uniq_items[1] ", "language": "python"}
{"task_id": "MBPP/756", "completion": "        import re\n        \n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "language": "python"}
{"task_id": "MBPP/757", "completion": "  \n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return str(res)", "language": "python"}
{"task_id": "MBPP/758", "completion": "    \n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "language": "python"}
{"task_id": "MBPP/759", "completion": "    \n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)", "language": "python"}
{"task_id": "MBPP/760", "completion": "    \n    s = set(arr)\n    if (len(s) == 1):\n        return ('YES')\n    else:\n        return ('NO')", "language": "python"}
{"task_id": "MBPP/761", "completion": "    \n    pi=22/7\n    if a >= 360:\n        return None\n    arclength = (pi*d) * (a/360)\n    return arclength", "language": "python"}
{"task_id": "MBPP/762", "completion": "  \n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n    return True\n  else:\n    return False", "language": "python"}
{"task_id": "MBPP/763", "completion": "     \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff ", "language": "python"}
{"task_id": "MBPP/764", "completion": "      \n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr", "language": "python"}
{"task_id": "MBPP/765", "completion": "\timport math \n\t \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "language": "python"}
{"task_id": "MBPP/766", "completion": "    \n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp", "language": "python"}
{"task_id": "MBPP/767", "completion": "    \n    count = 0  \n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count", "language": "python"}
{"task_id": "MBPP/768", "completion": "     \n    parity = 0\n    while (x != 0): \n        x = x & (x - 1) \n        parity += 1\n    if (parity % 2 == 1): \n        return True\n    else: \n        return False", "language": "python"}
{"task_id": "MBPP/769", "completion": "    \n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n ", "language": "python"}
{"task_id": "MBPP/770", "completion": "     \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm ", "language": "python"}
{"task_id": "MBPP/771", "completion": "    from collections import deque\n    \n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack", "language": "python"}
{"task_id": "MBPP/772", "completion": "  \n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/773", "completion": " import re\n \n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)", "language": "python"}
{"task_id": "MBPP/774", "completion": "\timport re \n\tregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n\t \n\tif(re.search(regex,email)): \n\t\treturn (\"Valid Email\") \n\telse: \n\t\treturn (\"Invalid Email\") ", "language": "python"}
{"task_id": "MBPP/775", "completion": "\t\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "language": "python"}
{"task_id": "MBPP/776", "completion": "  \n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) ", "language": "python"}
{"task_id": "MBPP/777", "completion": "     \n    arr.sort() \n    sum = arr[0] \n    for i in range(0,n-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum", "language": "python"}
{"task_id": "MBPP/778", "completion": "    from itertools import groupby\n    \n    return [list(group) for key, group in groupby(list1)]", "language": "python"}
{"task_id": "MBPP/779", "completion": "    \n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "language": "python"}
{"task_id": "MBPP/780", "completion": "  from itertools import combinations \n  \n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) ", "language": "python"}
{"task_id": "MBPP/781", "completion": "    import math \n     \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    if (count % 2 == 0) : \n        return (\"Even\") \n    else : \n        return (\"Odd\") ", "language": "python"}
{"task_id": "MBPP/782", "completion": "    \n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum", "language": "python"}
{"task_id": "MBPP/783", "completion": "    \n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v", "language": "python"}
{"task_id": "MBPP/784", "completion": "    \n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)", "language": "python"}
{"task_id": "MBPP/785", "completion": "  \n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/786", "completion": "    import bisect\n    \n    i = bisect.bisect_right(a, x)\n    return i", "language": "python"}
{"task_id": "MBPP/787", "completion": "        import re\n        \n        patterns = 'ab{3}?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "language": "python"}
{"task_id": "MBPP/788", "completion": "  \n  res = tuple(test_list + [test_str])\n  return (res) ", "language": "python"}
{"task_id": "MBPP/789", "completion": "  from math import tan, pi\n  \n  perimeter = s*l\n  return perimeter", "language": "python"}
{"task_id": "MBPP/790", "completion": "\t\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "language": "python"}
{"task_id": "MBPP/791", "completion": "  \n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) ", "language": "python"}
{"task_id": "MBPP/792", "completion": "     \n    return len(input_list)", "language": "python"}
{"task_id": "MBPP/793", "completion": "    \n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res", "language": "python"}
{"task_id": "MBPP/794", "completion": "        import re\n        \n        patterns = 'a.*?b$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "language": "python"}
{"task_id": "MBPP/795", "completion": "  import heapq\n  \n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\n  return cheap_items", "language": "python"}
{"task_id": "MBPP/796", "completion": "  \n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum", "language": "python"}
{"task_id": "MBPP/797", "completion": "    def sum_Odd(n): \n        terms = (n + 1)//2\n        sum1 = terms * terms \n        return sum1  \n     \n    return sum_Odd(r) - sum_Odd(l - 1)", "language": "python"}
{"task_id": "MBPP/798", "completion": "      \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  ", "language": "python"}
{"task_id": "MBPP/799", "completion": "    INT_BITS = 32\n       \n    return (n << d)|(n >> (INT_BITS - d))  ", "language": "python"}
{"task_id": "MBPP/800", "completion": " import re\n \n return (re.sub(r'\\s+', '',text))", "language": "python"}
{"task_id": "MBPP/801", "completion": "  \n  result= set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return (4-len(result))", "language": "python"}
{"task_id": "MBPP/802", "completion": "       \n    for i in range (1,n): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0", "language": "python"}
{"task_id": "MBPP/803", "completion": "    \n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False", "language": "python"}
{"task_id": "MBPP/804", "completion": "     \n    for i in range(0,n): \n        if ((arr[i] & 1) == 0): \n            return True\n    return False", "language": "python"}
{"task_id": "MBPP/805", "completion": " \n return max(lists, key=sum)", "language": "python"}
{"task_id": "MBPP/806", "completion": "  \n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)", "language": "python"}
{"task_id": "MBPP/807", "completion": "  \n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd", "language": "python"}
{"task_id": "MBPP/808", "completion": "  \n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return (res) ", "language": "python"}
{"task_id": "MBPP/809", "completion": "  \n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/810", "completion": "  from collections import Counter\n  \n  c = Counter(p=a, q=b, r=c, s=d)\n  return list(c.elements())", "language": "python"}
{"task_id": "MBPP/811", "completion": "  \n  res = test_list1 == test_list2\n  return (res) ", "language": "python"}
{"task_id": "MBPP/812", "completion": "  import re\n  \n  return (re.sub('Road$', 'Rd.', street))", "language": "python"}
{"task_id": "MBPP/813", "completion": "    \n    count = 0\n    for char in str1:\n        count += 1\n    return count", "language": "python"}
{"task_id": "MBPP/814", "completion": "  \n  area=(p*q)/2\n  return area", "language": "python"}
{"task_id": "MBPP/815", "completion": "  \n  low=0\n  mid=0\n  high=n-1\n  while mid <= high:\n    if arr[mid] == 0:\n      arr[low], arr[mid] = arr[mid], arr[low]\n      low = low + 1\n      mid = mid + 1\n    elif arr[mid] == 1:\n      mid = mid + 1\n    else:\n      arr[mid], arr[high] = arr[high], arr[mid]\n      high = high - 1\n  return arr", "language": "python"}
{"task_id": "MBPP/816", "completion": "  \n  temp = list(test_tup)\n  temp.clear()\n  test_tup = tuple(temp)\n  return (test_tup) ", "language": "python"}
{"task_id": "MBPP/817", "completion": " \n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \n return result", "language": "python"}
{"task_id": "MBPP/818", "completion": "      \n      lower_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \n      return  lower_ctr", "language": "python"}
{"task_id": "MBPP/819", "completion": "    \n    element = []\n    frequency = []\n    if not lists:\n        return element\n    running_count = 1\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lists[i+1])\n    return element,frequency\n", "language": "python"}
{"task_id": "MBPP/820", "completion": "  \n  if monthnum1 == 2:\n    return True\n  else:\n    return False", "language": "python"}
{"task_id": "MBPP/821", "completion": "    import collections as ct\n    \n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\n    return merged_dict", "language": "python"}
{"task_id": "MBPP/822", "completion": " import re\n \n x = True\n while x:  \n    if (len(p)<6 or len(p)>12):\n        break\n    elif not re.search(\"[a-z]\",p):\n        break\n    elif not re.search(\"[0-9]\",p):\n        break\n    elif not re.search(\"[A-Z]\",p):\n        break\n    elif not re.search(\"[$#@]\",p):\n        break\n    elif re.search(\"\\s\",p):\n        break\n    else:\n        return True\n        x=False\n        break\n\n if x:\n    return False", "language": "python"}
{"task_id": "MBPP/823", "completion": "  import re \n   \n  if (sample in string): \n      y = \"\\A\" + sample \n      x = re.search(y, string) \n      if x : \n          return (\"string starts with the given substring\") \n      else : \n          return (\"string doesnt start with the given substring\") \n  else : \n      return (\"entered string isnt a substring\")", "language": "python"}
{"task_id": "MBPP/824", "completion": "    \n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l", "language": "python"}
{"task_id": "MBPP/825", "completion": "    \n    result = [nums[i] for i in list_index]\n    return result", "language": "python"}
{"task_id": "MBPP/826", "completion": "     \n    sqa = pow(a,2) \n    sqb = pow(b,2) \n    sqc = pow(c,2) \n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \n        return (\"Right-angled Triangle\") \n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \n        return (\"Obtuse-angled Triangle\") \n    else: \n        return (\"Acute-angled Triangle\") ", "language": "python"}
{"task_id": "MBPP/827", "completion": "    \n    result = sum(row[C] for row in list1)\n    return result", "language": "python"}
{"task_id": "MBPP/828", "completion": "  \n  alphabets=digits = special = 0\n  for i in range(len(string)):\n    if(string[i].isalpha()):\n        alphabets = alphabets + 1\n    elif(string[i].isdigit()):\n        digits = digits + 1\n    else:\n        special = special + 1\n  return (alphabets,digits,special)   ", "language": "python"}
{"task_id": "MBPP/829", "completion": "\tfrom collections import Counter \n\t\t\n\t \n\tdict = Counter(input) \n\tvalue = sorted(dict.values(), reverse=True)  \n\tsecond_large = value[1] \n\tfor (key, val) in dict.items(): \n\t\tif val == second_large: \n\t\t\treturn (key) ", "language": "python"}
{"task_id": "MBPP/830", "completion": "    import math\n    \n    n = 10**-digits\n    return round(math.ceil(a / n) * n, digits)", "language": "python"}
{"task_id": "MBPP/831", "completion": "     \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] == arr[j]): \n                cnt += 1; \n    return cnt; ", "language": "python"}
{"task_id": "MBPP/832", "completion": "\timport re \n\t \n\tnumbers = re.findall('\\d+',input) \n\tnumbers = map(int,numbers) \n\treturn max(numbers)", "language": "python"}
{"task_id": "MBPP/833", "completion": "     \n    list = [] \n    for key in dict.keys(): \n        list.append(key)           \n    return list", "language": "python"}
{"task_id": "MBPP/834", "completion": "        \n        if n<=0:\n            return [] \n        matrix=[row[:] for row in [[0]*n]*n]        \n        row_st=0\n        row_ed=n-1        \n        col_st=0\n        col_ed=n-1\n        current=1        \n        while (True):\n            if current>n*n:\n                break\n            for c in range (col_st, col_ed+1):\n                matrix[row_st][c]=current\n                current+=1\n            row_st+=1\n            for r in range (row_st, row_ed+1):\n                matrix[r][col_ed]=current\n                current+=1\n            col_ed-=1\n            for c in range (col_ed, col_st-1, -1):\n                matrix[row_ed][c]=current\n                current+=1\n            row_ed-=1\n            for r in range (row_ed, row_st-1, -1):\n                matrix[r][col_st]=current\n                current+=1\n            col_st+=1\n        return matrix", "language": "python"}
{"task_id": "MBPP/835", "completion": "     \n    return (float)(y2-y1)/(x2-x1)  ", "language": "python"}
{"task_id": "MBPP/836", "completion": "\tfrom sys import maxsize \n\t \n\tmax_so_far = -maxsize - 1\n\tmax_ending_here = 0\n\tstart = 0\n\tend = 0\n\ts = 0\n\tfor i in range(0,size): \n\t\tmax_ending_here += a[i] \n\t\tif max_so_far < max_ending_here: \n\t\t\tmax_so_far = max_ending_here \n\t\t\tstart = s \n\t\t\tend = i \n\t\tif max_ending_here < 0: \n\t\t\tmax_ending_here = 0\n\t\t\ts = i+1\n\treturn (end - start + 1)", "language": "python"}
{"task_id": "MBPP/837", "completion": "     \n    sum = 0   \n    for i in range(0,n) : \n        sum += (2*i+1)*(2*i+1)*(2*i+1) \n    return sum", "language": "python"}
{"task_id": "MBPP/838", "completion": "      \n    c0 = 0; c1 = 0;  \n    for i in range(len(s1)) :  \n        if (s1[i] == '0' and s2[i] == '1') : \n            c0 += 1;    \n        elif (s1[i] == '1' and s2[i] == '0') : \n            c1 += 1;  \n    result = c0 // 2 + c1 // 2;  \n    if (c0 % 2 == 0 and c1 % 2 == 0) : \n        return result;  \n    elif ((c0 + c1) % 2 == 0) : \n        return result + 2;  \n    else : \n        return -1;  ", "language": "python"}
{"task_id": "MBPP/839", "completion": "\t \n\tn = len(tup) \n\tfor i in range(n): \n\t\tfor j in range(n-i-1): \n\t\t\tif tup[j][0] > tup[j + 1][0]: \n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \n\treturn tup", "language": "python"}
{"task_id": "MBPP/840", "completion": "      \n    if b == 0:  \n        return (\"Yes\")  \n    else: \n        return (\"No\")  ", "language": "python"}
{"task_id": "MBPP/841", "completion": "\t \n\tinv_count = 0\n\tfor i in range(n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif (arr[i] > arr[j]): \n\t\t\t\tinv_count += 1\n\treturn inv_count ", "language": "python"}
{"task_id": "MBPP/842", "completion": "  \n  for i in range(0, arr_size):\n    count = 0\n    for j in range(0, arr_size):\n      if arr[i] == arr[j]:\n        count += 1\n    if (count % 2 != 0):\n      return arr[i]\n  return -1", "language": "python"}
{"task_id": "MBPP/843", "completion": "    import heapq\n    \n    uglies = [1]\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]", "language": "python"}
{"task_id": "MBPP/844", "completion": "     \n    arr = [0] * n; \n    i = 0; \n    odd = 1; \n    while (odd <= n):   \n        arr[i] = odd; \n        i += 1; \n        odd += 2;\n    even = 2; \n    while (even <= n): \n        arr[i] = even; \n        i += 1;\n        even += 2; \n    return arr[k - 1]; ", "language": "python"}
{"task_id": "MBPP/845", "completion": "    import math \n     \n    if (n < 0): \n        return 0;\n    if (n <= 1): \n        return 1; \n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \n    return math.floor(x) + 1; ", "language": "python"}
{"task_id": "MBPP/846", "completion": "     \n    arr.sort() \n    dep.sort() \n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n): \n        if (arr[i] <= dep[j]):           \n            plat_needed+= 1\n            i+= 1\n        elif (arr[i] > dep[j]):           \n            plat_needed-= 1\n            j+= 1\n        if (plat_needed > result):  \n            result = plat_needed           \n    return result", "language": "python"}
{"task_id": "MBPP/847", "completion": "  \n  return xs[:]\n", "language": "python"}
{"task_id": "MBPP/848", "completion": " \n area = 0.5 * (base1 + base2) * height\n return area", "language": "python"}
{"task_id": "MBPP/849", "completion": "     \n    SumOfPrimeDivisors = [0]*(N + 1)   \n    for i in range(2,N + 1) : \n        if (SumOfPrimeDivisors[i] == 0) : \n            for j in range(i,N + 1,i) : \n                SumOfPrimeDivisors[j] += i           \n    return SumOfPrimeDivisors[N] ", "language": "python"}
{"task_id": "MBPP/850", "completion": "     \n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \n            return True \n        else:\n            return False\n    else:\n        return False", "language": "python"}
{"task_id": "MBPP/851", "completion": "     \n    ans = float(Sum)*1.0 /float(N);  \n    return round(ans,2); ", "language": "python"}
{"task_id": "MBPP/852", "completion": "     \n    for item in num_list: \n        if item < 0: \n           num_list.remove(item) \n    return num_list", "language": "python"}
{"task_id": "MBPP/853", "completion": "    import math\n     \n    res = 1\n    while n % 2 == 0: \n        n = n // 2 \n    for i in range(3,int(math.sqrt(n) + 1)): \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0: \n            count+=1 \n            n = n // i \n            curr_term *= i \n            curr_sum += curr_term    \n        res *= curr_sum  \n    if n >= 2: \n        res *= (1 + n) \n    return res ", "language": "python"}
{"task_id": "MBPP/854", "completion": "  import heapq as hq\n  \n  hq.heapify(rawheap)\n  return rawheap", "language": "python"}
{"task_id": "MBPP/855", "completion": "     \n    parity = 0\n    while (x != 0): \n        x = x & (x - 1) \n        parity += 1\n    if (parity % 2 == 0): \n        return True\n    else: \n        return False", "language": "python"}
{"task_id": "MBPP/856", "completion": "     \n    noOfZeroes = [0] * n \n    count = 0 \n    noOfZeroes[n - 1] = 1 - arr[n - 1] \n    for i in range(n-2,-1,-1) : \n        noOfZeroes[i] = noOfZeroes[i + 1] \n        if (arr[i] == 0) : \n            noOfZeroes[i] = noOfZeroes[i] + 1\n    for i in range(0,n) : \n        if (arr[i] == 1) : \n            count = count + noOfZeroes[i] \n    return count ", "language": "python"}
{"task_id": "MBPP/857", "completion": "  \n  result = list(map(list,list1)) \n  return result ", "language": "python"}
{"task_id": "MBPP/858", "completion": "     \n    return (len(input_list))**2", "language": "python"}
{"task_id": "MBPP/859", "completion": "\tfrom itertools import combinations\n\t\n\tsubs = []\n\tfor i in range(0, len(my_list)+1):\n\t  temp = [list(x) for x in combinations(my_list, i)]\n\t  if len(temp)>0:\n\t    subs.extend(temp)\n\treturn subs", "language": "python"}
{"task_id": "MBPP/860", "completion": "\timport re \n\tregex = '[a-zA-z0-9]$'\n\t \n\tif(re.search(regex, string)): \n\t\treturn (\"Accept\") \n\telse: \n\t\treturn (\"Discard\") ", "language": "python"}
{"task_id": "MBPP/861", "completion": "  from collections import Counter \n  \n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \n  return result", "language": "python"}
{"task_id": "MBPP/862", "completion": "  from collections import Counter\n  import re\n  \n  words = re.findall('\\w+',text)\n  n_common_words= Counter(words).most_common(n)\n  return list(n_common_words)", "language": "python"}
{"task_id": "MBPP/863", "completion": "\t \n\tans = 0\n\tcount = 0\n\tarr.sort() \n\tv = [] \n\tv.append(arr[0]) \n\tfor i in range(1, n): \n\t\tif (arr[i] != arr[i - 1]): \n\t\t\tv.append(arr[i]) \n\tfor i in range(len(v)): \n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount = 1\n\t\tans = max(ans, count) \n\treturn ans ", "language": "python"}
{"task_id": "MBPP/864", "completion": "  \n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n  return result", "language": "python"}
{"task_id": "MBPP/865", "completion": "    \n    result = map(lambda x:n*x, nums) \n    return list(result)", "language": "python"}
{"task_id": "MBPP/866", "completion": "  \n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\n    return True\n  else:\n    return False", "language": "python"}
{"task_id": "MBPP/867", "completion": "      \n    odd = 0\n    for i in range(n): \n        if (arr[i] % 2): \n            odd += 1 \n    if (odd % 2): \n        return 1\n    return 2", "language": "python"}
{"task_id": "MBPP/868", "completion": "     \n    l = 0\n    x = a.strip() \n    for i in range(len(x)): \n        if x[i] == \" \": \n            l = 0\n        else: \n            l += 1\n    return l ", "language": "python"}
{"task_id": "MBPP/869", "completion": "   \n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\n   return result", "language": "python"}
{"task_id": "MBPP/870", "completion": "  \n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\n  return sum(sum_positivenum)", "language": "python"}
{"task_id": "MBPP/871", "completion": "     \n    size1 = len(string1) \n    size2 = len(string2) \n    temp = '' \n    if size1 != size2: \n        return False\n    temp = string1 + string1 \n    if (temp.count(string2)> 0): \n        return True\n    else: \n        return False", "language": "python"}
{"task_id": "MBPP/872", "completion": "     \n    return all(map(list1.__contains__,list2)) ", "language": "python"}
{"task_id": "MBPP/873", "completion": "  \n  if n == 1 or n == 2:\n    return 1\n  else:\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "language": "python"}
{"task_id": "MBPP/874", "completion": "    \n    N = len(str1)\n    M = len(str2)\n    if (N % M != 0):\n        return False\n    for i in range(N):\n        if (str1[i] != str2[i % M]):\n            return False         \n    return True", "language": "python"}
{"task_id": "MBPP/875", "completion": "  \n  temp = [abs(b - a) for a, b in test_list]\n  res = min(temp)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/876", "completion": "   \n   if x > y:\n       z = x\n   else:\n       z = y\n   while(True):\n       if((z % x == 0) and (z % y == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm", "language": "python"}
{"task_id": "MBPP/877", "completion": "     \n    str = ''.join(sorted(str)) \n    return (str) ", "language": "python"}
{"task_id": "MBPP/878", "completion": "  \n  res = all(ele in K for ele in test_tuple)\n  return (res) ", "language": "python"}
{"task_id": "MBPP/879", "completion": "  import re\n  \n  patterns = 'a.*?b$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')", "language": "python"}
{"task_id": "MBPP/880", "completion": "     \n    if ((b*b) - (4*a*c)) > 0 : \n        return (\"2 solutions\") \n    elif ((b*b) - (4*a*c)) == 0 : \n        return (\"1 solution\") \n    else : \n        return (\"No solutions\") ", "language": "python"}
{"task_id": "MBPP/881", "completion": "    \n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even+first_odd)", "language": "python"}
{"task_id": "MBPP/882", "completion": "  \n  perimeter=2*(b*h)\n  return perimeter", "language": "python"}
{"task_id": "MBPP/883", "completion": " \n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \n return result", "language": "python"}
{"task_id": "MBPP/884", "completion": "     \n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \n    new_num = n & num \n    if (num == new_num): \n        return True\n    return False", "language": "python"}
{"task_id": "MBPP/885", "completion": "              \n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False", "language": "python"}
{"task_id": "MBPP/886", "completion": "    \n    total = 0\n    for x in numbers:\n        total += x\n    return total/len(numbers) ", "language": "python"}
{"task_id": "MBPP/887", "completion": "     \n    if (n^1 == n-1) :\n        return True; \n    else :\n        return False; ", "language": "python"}
{"task_id": "MBPP/888", "completion": "  \n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/889", "completion": "    \n    for l in lists:\n        l.sort(reverse = True)\n    return lists ", "language": "python"}
{"task_id": "MBPP/890", "completion": "     \n    for i in range(0, n) : \n        if (arr1[i] != arr2[i]) : \n            return i \n    return n ", "language": "python"}
{"task_id": "MBPP/891", "completion": "     \n    while (A > 0 and B > 0): \n        A = A / 10; \n        B = B / 10; \n    if (A == 0 and B == 0): \n        return True; \n    return False; ", "language": "python"}
{"task_id": "MBPP/892", "completion": " import re\n \n return (re.sub(' +',' ',text))", "language": "python"}
{"task_id": "MBPP/893", "completion": "     \n    return [item[-1] for item in lst] ", "language": "python"}
{"task_id": "MBPP/894", "completion": "  \n  res = tuple(map(float, test_str.split(', ')))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/895", "completion": "    \n    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]", "language": "python"}
{"task_id": "MBPP/896", "completion": "  def last(n):\n     return n[-1]\n  \n  return sorted(tuples, key=last)", "language": "python"}
{"task_id": "MBPP/897", "completion": "     \n    s = sentence.split(\" \") \n    for i in s:  \n        if (i == word): \n            return True\n    return False", "language": "python"}
{"task_id": "MBPP/898", "completion": "    from itertools import groupby \n    \n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \n    return result", "language": "python"}
{"task_id": "MBPP/899", "completion": "     \n    g = 0 \n    for i in range(1,n): \n        if (arr[i] - arr[i - 1] > 0 and g == 1): \n            return False\n        if (arr[i] - arr[i] < 0): \n            g = 1\n    return True", "language": "python"}
{"task_id": "MBPP/900", "completion": "    import re\n    \n    text = re.compile(r\"^5\")\n    if text.match(string):\n        return True\n    else:\n        return False", "language": "python"}
{"task_id": "MBPP/901", "completion": "    \n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i", "language": "python"}
{"task_id": "MBPP/902", "completion": "   from collections import Counter\n   \n   add_dict = Counter(d1) + Counter(d2)\n   return add_dict", "language": "python"}
{"task_id": "MBPP/903", "completion": "      \n    cnt = 0;  \n    for i in range(1,n + 1) : \n        temp = i;  \n        while (temp) :  \n            if (temp % 2 == 0) : \n                cnt += 1;  \n            temp = temp // 2;  \n    return cnt;  ", "language": "python"}
{"task_id": "MBPP/904", "completion": "  \n  if x%2==0:\n     return True\n  else:\n    return False", "language": "python"}
{"task_id": "MBPP/905", "completion": "   def factorial(start,end): \n       res = 1 \n       for i in range(start,end + 1): \n           res *= i      \n       return res \n    \n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ", "language": "python"}
{"task_id": "MBPP/906", "completion": "        import re\n        \n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)", "language": "python"}
{"task_id": "MBPP/907", "completion": " \n List=range(-1,n*n+9,2)\n i=2\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\n return List[1:n+1]", "language": "python"}
{"task_id": "MBPP/908", "completion": "\t \n\tfor i in range(n): \n\t\tif arr[i] is i: \n\t\t\treturn i \n\treturn -1", "language": "python"}
{"task_id": "MBPP/909", "completion": "    \n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x", "language": "python"}
{"task_id": "MBPP/910", "completion": "    import datetime\n    \n    try:\n        m, d, y = map(int, (m, d, y))\n        datetime.date(y, m, d)\n        return True\n    except ValueError:\n        return False", "language": "python"}
{"task_id": "MBPP/911", "completion": "    \n    import heapq\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])", "language": "python"}
{"task_id": "MBPP/912", "completion": "\tdef binomial_coeff(n, k): \n\t\tC = [[0 for j in range(k + 1)] \n\t\t\t\tfor i in range(n + 1)] \n\t\tfor i in range(0, n + 1): \n\t\t\tfor j in range(0, min(i, k) + 1): \n\t\t\t\tif (j == 0 or j == i): \n\t\t\t\t\tC[i][j] = 1\n\t\t\t\telse: \n\t\t\t\t\tC[i][j] = (C[i - 1][j - 1] \n\t\t\t\t\t\t\t\t+ C[i - 1][j]) \n\t\treturn C[n][k] \n\t \n\treturn (((2 * m + 1) *\n\t\tbinomial_coeff(2 * n, m + n)) \n\t\t\t\t\t/ (m + n + 1))", "language": "python"}
{"task_id": "MBPP/913", "completion": "    import re\n    \n    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False", "language": "python"}
{"task_id": "MBPP/914", "completion": "      \n    for i in range (len( s) - 2) : \n        if (s[i] != s[i + 2]) : \n            return False\n    if (s[0] == s[1]): \n        return False\n    return True", "language": "python"}
{"task_id": "MBPP/915", "completion": "  \n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\n  return result ", "language": "python"}
{"task_id": "MBPP/916", "completion": "\t \n\tfor i in range( 0, arr_size-2): \n\t\tfor j in range(i + 1, arr_size-1): \n\t\t\tfor k in range(j + 1, arr_size): \n\t\t\t\tif A[i] + A[j] + A[k] == sum: \n\t\t\t\t\treturn  A[i],A[j],A[k] \n\t\t\t\t\treturn True\n\treturn False", "language": "python"}
{"task_id": "MBPP/917", "completion": "        import re\n        \n        patterns = '[A-Z]+[a-z]+$'\n        if re.search(patterns, text):\n                return 'Found a match!'\n        else:\n                return ('Not matched!')", "language": "python"}
{"task_id": "MBPP/918", "completion": "     \n    table = [[0 for x in range(m)] for x in range(n+1)] \n    for i in range(m): \n        table[0][i] = 1\n    for i in range(1, n+1): \n        for j in range(m): \n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\n            y = table[i][j-1] if j >= 1 else 0 \n            table[i][j] = x + y   \n    return table[n][m-1] ", "language": "python"}
{"task_id": "MBPP/919", "completion": "    \n    tot = 1\n    for x in items:\n        tot *= x\n    return tot", "language": "python"}
{"task_id": "MBPP/920", "completion": "  \n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\n  return (str(res)) ", "language": "python"}
{"task_id": "MBPP/921", "completion": "  \n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\n  return (res) ", "language": "python"}
{"task_id": "MBPP/922", "completion": "     \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return None     \n    x = arr[0]; y = arr[1]    \n    for i in range(0, arr_len): \n        for j in range(i + 1, arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y   ", "language": "python"}
{"task_id": "MBPP/923", "completion": "\t\n\tif (not m):\n\t\treturn n\n\tif (not n):\n\t\treturn m\n\tif (X[m - 1] == Y[n - 1]):\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))", "language": "python"}
{"task_id": "MBPP/924", "completion": "    \n    if x > y:\n        return x\n    return y", "language": "python"}
{"task_id": "MBPP/925", "completion": "    \n    temp = list(nums)\n    product = 1 \n    for x in temp:\n        product *= x\n    return product", "language": "python"}
{"task_id": "MBPP/926", "completion": "\tdef binomial_coeffi(n, k): \n\t\tif (k == 0 or k == n): \n\t\t\treturn 1\n\t\treturn (binomial_coeffi(n - 1, k - 1) \n\t\t\t+ binomial_coeffi(n - 1, k)) \n\t \n\tif (n == 0 and m == 0): \n\t\treturn 1\n\tif (n == 1 and m == 0): \n\t\treturn 0\n\tif (m == 0): \n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))", "language": "python"}
{"task_id": "MBPP/927", "completion": "\tclass Node: \n\t\tdef __init__(self, data): \n\t\t\tself.data = data \n\t\t\tself.left = None\n\t\t\tself.right = None\n\t \n\tif node is None: \n\t\treturn 0 ; \n\telse : \n\t\tleft_height = max_height(node.left) \n\t\tright_height = max_height(node.right) \n\t\tif (left_height > right_height): \n\t\t\treturn left_height+1\n\t\telse: \n\t\t\treturn right_height+1", "language": "python"}
{"task_id": "MBPP/928", "completion": "        import re\n        \n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n        return change_date_format(dt)", "language": "python"}
{"task_id": "MBPP/929", "completion": "    \n  count = tuplex.count(value)\n  return count", "language": "python"}
{"task_id": "MBPP/930", "completion": "        import re\n        \n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return ('Found a match!')\n        else:\n                return ('Not matched!')", "language": "python"}
{"task_id": "MBPP/931", "completion": " import math \n \n total = 0\n total = math.pow((number * (number + 1)) /2, 2)\n return total", "language": "python"}
{"task_id": "MBPP/932", "completion": "    \n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp", "language": "python"}
{"task_id": "MBPP/933", "completion": "  import re\n  \n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "language": "python"}
{"task_id": "MBPP/934", "completion": "\t \n\tif (m == 0 or n == 0) : \n\t\treturn 1\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)", "language": "python"}
{"task_id": "MBPP/935", "completion": " \n total = 0\n total = (number * (number + 1) * (2 * number + 1)) / 6\n return total", "language": "python"}
{"task_id": "MBPP/936", "completion": "  \n  temp = dict(test_list)\n  res = [(key, temp[key]) for key in ord_list]\n  return (res) ", "language": "python"}
{"task_id": "MBPP/937", "completion": "    from collections import Counter \n    \n    temp = Counter(str1) \n    max_char = max(temp, key = temp.get)\n    return max_char", "language": "python"}
{"task_id": "MBPP/938", "completion": "\timport sys \n\t\n\t \n\tdiff = sys.maxsize \n\tres_i = 0\n\tres_j = 0\n\tres_k = 0\n\ti = 0\n\tj = 0\n\tk = 0\n\twhile(i < p and j < q and k < r): \n\t\tminimum = min(A[i], min(B[j], C[k])) \n\t\tmaximum = max(A[i], max(B[j], C[k])); \n\t\tif maximum-minimum < diff: \n\t\t\tres_i = i \n\t\t\tres_j = j \n\t\t\tres_k = k \n\t\t\tdiff = maximum - minimum; \n\t\tif diff == 0: \n\t\t\tbreak\n\t\tif A[i] == minimum: \n\t\t\ti = i+1\n\t\telif B[j] == minimum: \n\t\t\tj = j+1\n\t\telse: \n\t\t\tk = k+1\n\treturn A[res_i],B[res_j],C[res_k]", "language": "python"}
{"task_id": "MBPP/939", "completion": " \n sorted_models = sorted(models, key = lambda x: x['color'])\n return sorted_models", "language": "python"}
{"task_id": "MBPP/940", "completion": "    \n    heapify(arr)  \n    end = len(arr) - 1\n    while end > 0:\n        arr[end], arr[0] = arr[0], arr[end]\n        shift_down(arr, 0, end - 1)\n        end -= 1\n    return arr\n\ndef heapify(arr):\n    start = len(arr) // 2\n    while start >= 0:\n        shift_down(arr, start, len(arr) - 1)\n        start -= 1\ndef shift_down(arr, start, end):\n    root = start\n    while root * 2 + 1 <= end:\n        child = root * 2 + 1\n        if child + 1 <= end and arr[child] < arr[child + 1]:\n            child += 1\n        if child <= end and arr[root] < arr[child]:\n            arr[root], arr[child] = arr[child], arr[root]\n            root = child\n        else:\n            return\n", "language": "python"}
{"task_id": "MBPP/941", "completion": "  \n  count_elim = 0\n  for n in num:\n    if isinstance(n, tuple):\n        break\n    count_elim += 1\n  return count_elim", "language": "python"}
{"task_id": "MBPP/942", "completion": "  \n  res = False\n  for ele in check_list:\n    if ele in test_tup:\n      res = True\n      break\n  return (res) ", "language": "python"}
{"task_id": "MBPP/943", "completion": "  from heapq import merge\n  \n  combine_lists=list(merge(num1, num2))\n  return combine_lists", "language": "python"}
{"task_id": "MBPP/944", "completion": " import re\n \n for m in re.finditer(\"\\d+\", text):\n    return m.start()", "language": "python"}
{"task_id": "MBPP/945", "completion": "  \n  s = set(t)\n  return (s) ", "language": "python"}
{"task_id": "MBPP/946", "completion": "  from collections import Counter \n  \n  most_common_elem=Counter(s).most_common(a)\n  return most_common_elem", "language": "python"}
{"task_id": "MBPP/947", "completion": "    \n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min", "language": "python"}
{"task_id": "MBPP/948", "completion": "  \n  item = tup1[index]\n  return item", "language": "python"}
{"task_id": "MBPP/949", "completion": "  def count_digs(tup):\n    return sum([len(str(ele)) for ele in tup ]) \n  \n  test_list.sort(key = count_digs)\n  return (str(test_list))", "language": "python"}
{"task_id": "MBPP/950", "completion": " \n if (year - 2000) % 12 == 0:\n     sign = 'Dragon'\n elif (year - 2000) % 12 == 1:\n     sign = 'Snake'\n elif (year - 2000) % 12 == 2:\n     sign = 'Horse'\n elif (year - 2000) % 12 == 3:\n     sign = 'sheep'\n elif (year - 2000) % 12 == 4:\n     sign = 'Monkey'\n elif (year - 2000) % 12 == 5:\n     sign = 'Rooster'\n elif (year - 2000) % 12 == 6:\n     sign = 'Dog'\n elif (year - 2000) % 12 == 7:\n     sign = 'Pig'\n elif (year - 2000) % 12 == 8:\n     sign = 'Rat'\n elif (year - 2000) % 12 == 9:\n     sign = 'Ox'\n elif (year - 2000) % 12 == 10:\n     sign = 'Tiger'\n else:\n     sign = 'Hare'\n return sign", "language": "python"}
{"task_id": "MBPP/951", "completion": "  \n  res = [(max(x[0], y[0]), max(x[1], y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return (res) ", "language": "python"}
{"task_id": "MBPP/952", "completion": "\t \n\tif (r > n- r): \n\t\tr = n - r \n\tC = [0 for i in range(r + 1)] \n\tC[0] = 1 \n\tfor i in range(1, n + 1): \n\t\tfor j in range(min(i, r), 0, -1): \n\t\t\tC[j] = (C[j] + C[j-1]) % p \n\treturn C[r] ", "language": "python"}
{"task_id": "MBPP/953", "completion": "     \n    res = 0\n    ar.sort() \n    for i in range(0, n) : \n        count = 1\n        for i in range(n - 1): \n            if ar[i] == ar[i + 1]: \n                count+=1\n            else: \n                break \n        res = max(res, count)  \n    return res ", "language": "python"}
{"task_id": "MBPP/954", "completion": "  \n if(actual_cost > sale_amount):\n    amount = actual_cost - sale_amount\n    return amount\n else:\n    return None", "language": "python"}
{"task_id": "MBPP/955", "completion": "    \n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n", "language": "python"}
{"task_id": "MBPP/956", "completion": "  import re\n  \n  return (re.findall('[A-Z][^A-Z]*', text))", "language": "python"}
{"task_id": "MBPP/957", "completion": "     import math\n     \n     return math.log2(n&-n)+1", "language": "python"}
{"task_id": "MBPP/958", "completion": "        \n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num", "language": "python"}
{"task_id": "MBPP/959", "completion": "     \n    return sum(lst) / len(lst) ", "language": "python"}
{"task_id": "MBPP/960", "completion": "    \n    if (n == 0):\n        return 0;\n    if (n == 1):\n        return 1; \n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "language": "python"}
{"task_id": "MBPP/961", "completion": "        \n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n        for i in range(len(s)):\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n            else:\n                int_val += rom_val[s[i]]\n        return int_val", "language": "python"}
{"task_id": "MBPP/962", "completion": "    def sum_Natural(n): \n        sum = (n * (n + 1)) \n        return int(sum) \n     \n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ", "language": "python"}
{"task_id": "MBPP/963", "completion": "    \n    discriminant = (y**2) - (4*x*z)\n    if discriminant > 0:\n        return (\"Two solutions\",discriminant)\n    elif discriminant == 0:\n        return (\"one solution\",discriminant)\n    elif discriminant < 0:\n        return (\"no real solution\",discriminant)", "language": "python"}
{"task_id": "MBPP/964", "completion": "     \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2==0: \n            return True  \n        else:\n          return False", "language": "python"}
{"task_id": "MBPP/965", "completion": "        \n        import re\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "language": "python"}
{"task_id": "MBPP/966", "completion": "  #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n   tuple1 = [t for t in tuple1 if t]\n   return tuple1", "language": "python"}
{"task_id": "MBPP/967", "completion": "   \n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \n    return ('accepted') \n  else: \n    return (\"not accepted\") ", "language": "python"}
{"task_id": "MBPP/968", "completion": "    \n    x = min(B - 1,N)\n    return (A*x) // B", "language": "python"}
{"task_id": "MBPP/969", "completion": "  \n  res = []\n  for sub in test_list:\n    if res and res[-1][0] == sub[0]:\n      res[-1].extend(sub[1:])\n    else:\n      res.append([ele for ele in sub])\n  res = list(map(tuple, res))\n  return (res) ", "language": "python"}
{"task_id": "MBPP/970", "completion": "    \n    if x < y:\n        return x\n    return y", "language": "python"}
{"task_id": "MBPP/971", "completion": "\t \n\tdp = [-1] * (n + 10) \n\tdp[0] = 0\n\tfor i in range(0, n) : \n\t\tif (dp[i] != -1) : \n\t\t\tif(i + a <= n ): \n\t\t\t\tdp[i + a] = max(dp[i] + 1, \n\t\t\t\t\t\t\tdp[i + a]) \n\t\t\tif(i + b <= n ): \n\t\t\t\tdp[i + b] = max(dp[i] + 1, \n\t\t\t\t\t\t\tdp[i + b]) \n\t\t\tif(i + c <= n ): \n\t\t\t\tdp[i + c] = max(dp[i] + 1, \n\t\t\t\t\t\t\tdp[i + c]) \n\treturn dp[n]", "language": "python"}
{"task_id": "MBPP/972", "completion": "  \n  res = test_tup1 + test_tup2\n  return (res) ", "language": "python"}
{"task_id": "MBPP/973", "completion": "    \n    tmp = s[d : ] + s[0 : d]\n    return tmp  ", "language": "python"}
{"task_id": "MBPP/974", "completion": "\t \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\tfor i in range(len(A[n])): \n\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tmemo[j] = A[i][j] + min(memo[j], \n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \n\treturn memo[0]", "language": "python"}

