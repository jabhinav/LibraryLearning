{"task_id": "MBPP/366", "prompt": "\n\ndef adjacent_num_product(list_nums):\n    \"\"\"\n    Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n    >>> adjacent_num_product([1,2,3,4,5,6])\n    30\n    >>> adjacent_num_product([1,2,3,4,5])\n    20\n    >>> adjacent_num_product([2,3])\n    6\n    \"\"\"\n", "canonical_solution": "    \n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "entry_point": "adjacent_num_product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6]) == 30\n    assert candidate([1,2,3,4,5]) == 20\n    assert candidate([2,3]) == 6\n\n", "language": "python", "description": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": "MBPP/367", "prompt": "\n\ndef is_tree_balanced(root):\n\t\"\"\"\n\tWrite a function to check if a binary tree is balanced or not.\n\t>>> is_tree_balanced(root)\n\tFalse\n\t>>> is_tree_balanced(root1)\n\tTrue\n\t>>> is_tree_balanced(root2)\n\tFalse\n\t\"\"\"\n", "canonical_solution": "\tclass Node: \n\t\tdef __init__(self, data): \n\t\t\tself.data = data \n\t\t\tself.left = None\n\t\t\tself.right = None\n\tdef get_height(root): \n\t\tif root is None: \n\t\t\treturn 0\n\t\treturn max(get_height(root.left), get_height(root.right)) + 1\n\t \n\tif root is None: \n\t\treturn True\n\tlh = get_height(root.left) \n\trh = get_height(root.right) \n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \n\troot.left) is True and is_tree_balanced( root.right) is True: \n\t\treturn True\n\treturn False", "entry_point": "is_tree_balanced", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(root) == False\n    assert candidate(root1) == True\n    assert candidate(root2) == False \n\n", "language": "python", "description": "Write a function to check if a binary tree is balanced or not."}
{"task_id": "MBPP/368", "prompt": "\n\ndef repeat_tuples(test_tup, N):\n  \"\"\"\n  Write a function to repeat the given tuple n times.\n  >>> repeat_tuples((1, 3), 4)\n  ((1, 3), (1, 3), (1, 3), (1, 3))\n  >>> repeat_tuples((1, 2), 3)\n  ((1, 2), (1, 2), (1, 2))\n  >>> repeat_tuples((3, 4), 5)\n  ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n  \"\"\"\n", "canonical_solution": "  \n  res = ((test_tup, ) * N)\n  return (res) ", "entry_point": "repeat_tuples", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n    assert candidate((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\n    assert candidate((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n\n", "language": "python", "description": "Write a function to repeat the given tuple n times."}
{"task_id": "MBPP/369", "prompt": "\n\ndef lateralsurface_cuboid(l,w,h):\n  \"\"\"\n  Write a function to find the lateral surface area of cuboid\n  >>> lateralsurface_cuboid(8,5,6)\n  156\n  >>> lateralsurface_cuboid(7,9,10)\n  320\n  >>> lateralsurface_cuboid(10,20,30)\n  1800\n  \"\"\"\n", "canonical_solution": "  \n  LSA = 2*h*(l+w)\n  return LSA", "entry_point": "lateralsurface_cuboid", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8,5,6)==156\n    assert candidate(7,9,10)==320\n    assert candidate(10,20,30)==1800\n\n", "language": "python", "description": "Write a function to find the lateral surface area of cuboid"}
{"task_id": "MBPP/370", "prompt": "\n\ndef float_sort(price):\n  \"\"\"\n  Write a function to sort a tuple by its float element.\n  >>> float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])\n  [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\n  >>> float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])\n  [('item3', '20'), ('item1', '15'), ('item2', '10')]\n  >>> float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])\n  [('item3', '14'), ('item2', '10'), ('item1', '5')]\n  \"\"\"\n", "canonical_solution": "  \n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\n  return float_sort", "entry_point": "float_sort", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n    assert candidate([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \n    assert candidate([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] \n\n", "language": "python", "description": "Write a function to sort a tuple by its float element."}
{"task_id": "MBPP/371", "prompt": "\n\ndef smallest_missing(A, left_element, right_element):\n    \"\"\"\n    Write a function to find the smallest missing element in a sorted array.\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)\n    7\n    >>> smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6)\n    3\n    >>> smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)\n    0\n    \"\"\"\n", "canonical_solution": "    \n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)", "entry_point": "smallest_missing", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert candidate([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\n    assert candidate([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0\n\n", "language": "python", "description": "Write a function to find the smallest missing element in a sorted array."}
{"task_id": "MBPP/372", "prompt": "\n\ndef heap_assending(nums):\n  \"\"\"\n  Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n  >>> heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n  [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n  >>> heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])\n  [14, 22, 25, 25, 35, 58, 65, 75, 85]\n  >>> heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \"\"\"\n", "canonical_solution": "  import heapq as hq\n  \n  hq.heapify(nums)\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\n  return s_result", "entry_point": "heap_assending", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n", "language": "python", "description": "Write a function to sort a given list of elements in ascending order using heap queue algorithm."}
{"task_id": "MBPP/373", "prompt": "\n\ndef volume_cuboid(l,w,h):\n  \"\"\"\n  Write a function to find the volume of a cuboid.\n  >>> volume_cuboid(1,2,3)\n  6\n  >>> volume_cuboid(5,7,9)\n  315\n  >>> volume_cuboid(10,15,21)\n  3150\n  \"\"\"\n", "canonical_solution": "  \n  volume=l*w*h\n  return volume", "entry_point": "volume_cuboid", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,2,3)==6\n    assert candidate(5,7,9)==315\n    assert candidate(10,15,21)==3150\n\n", "language": "python", "description": "Write a function to find the volume of a cuboid."}
{"task_id": "MBPP/374", "prompt": "\n\ndef permute_string(str):\n    \"\"\"\n    Write a function to print all permutations of a given string including duplicates.\n    >>> permute_string('ab')\n    ['ab', 'ba']\n    >>> permute_string('abc')\n    ['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n    >>> permute_string('abcd')\n    ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\n    \"\"\"\n", "canonical_solution": "    \n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list", "entry_point": "permute_string", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('ab')==['ab', 'ba']\n    assert candidate('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n    assert candidate('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\n\n", "language": "python", "description": "Write a function to print all permutations of a given string including duplicates."}
{"task_id": "MBPP/375", "prompt": "\n\ndef round_num(n,m):\n    \"\"\"\n    Write a function to round the given number to the nearest multiple of a specific number.\n    >>> round_num(4722,10)\n    4720\n    >>> round_num(1111,5)\n    1110\n    >>> round_num(219,2)\n    218\n    \"\"\"\n", "canonical_solution": "    \n    a = (n //m) * m\n    b = a + m\n    return (b if n - a > b - n else a)", "entry_point": "round_num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4722,10)==4720\n    assert candidate(1111,5)==1110\n    assert candidate(219,2)==218\n\n", "language": "python", "description": "Write a function to round the given number to the nearest multiple of a specific number."}
{"task_id": "MBPP/376", "prompt": "\n\ndef remove_replica(test_tup):\n  \"\"\"\n  Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n  >>> remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))\n  (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n  >>> remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))\n  (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n  >>> remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7))\n  (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\n  \"\"\"\n", "canonical_solution": "  \n  temp = set()\n  res = tuple(ele if ele not in temp and not temp.add(ele) \n\t\t\t\telse 'MSP' for ele in test_tup)\n  return (res)", "entry_point": "remove_replica", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    assert candidate((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n    assert candidate((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\n\n", "language": "python", "description": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value."}
{"task_id": "MBPP/377", "prompt": "\n\ndef remove_Char(s,c) :\n    \"\"\"\n    Write a python function to remove all occurrences of a character in a given string.\n    >>> remove_Char(\"aba\",'a')\n    \"b\"\n    >>> remove_Char(\"toggle\",'g')\n    \"tole\"\n    >>> remove_Char(\"aabbc\",'b')\n    \"aac\"\n    \"\"\"\n", "canonical_solution": "      \n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n        s.remove(c) \n        counts -= 1 \n    s = '' . join(s)   \n    return (s) ", "entry_point": "remove_Char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"aba\",'a') == \"b\"\n    assert candidate(\"toggle\",'g') == \"tole\"\n    assert candidate(\"aabbc\",'b') == \"aac\"\n\n", "language": "python", "description": "Write a python function to remove all occurrences of a character in a given string."}
{"task_id": "MBPP/378", "prompt": "\n\ndef move_first(test_list):\n  \"\"\"\n  Write a python function to shift last element to first position in the given list.\n  >>> move_first([1,2,3,4])\n  [4,1,2,3]\n  >>> move_first([0,1,2,3])\n  [3,0,1,2]\n  >>> move_first([9,8,7,1])\n  [1,9,8,7]\n  \"\"\"\n", "canonical_solution": "  \n  test_list = test_list[-1:] + test_list[:-1]  \n  return test_list", "entry_point": "move_first", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4]) == [4,1,2,3]\n    assert candidate([0,1,2,3]) == [3,0,1,2]\n    assert candidate([9,8,7,1]) == [1,9,8,7]\n\n", "language": "python", "description": "Write a python function to shift last element to first position in the given list."}
{"task_id": "MBPP/379", "prompt": "\n\ndef surfacearea_cuboid(l,w,h):\n  \"\"\"\n  Write a function to find the surface area of a cuboid.\n  >>> surfacearea_cuboid(1,2,3)\n  22\n  >>> surfacearea_cuboid(5,7,9)\n  286\n  >>> surfacearea_cuboid(10,15,21)\n  1350\n  \"\"\"\n", "canonical_solution": "  \n  SA = 2*(l*w + l * h + w * h)\n  return SA", "entry_point": "surfacearea_cuboid", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,2,3)==22\n    assert candidate(5,7,9)==286\n    assert candidate(10,15,21)==1350\n\n", "language": "python", "description": "Write a function to find the surface area of a cuboid."}
{"task_id": "MBPP/380", "prompt": "\n\ndef multi_list(rownum,colnum):\n  \"\"\"\n  Write a function to generate a two-dimensional array.\n  >>> multi_list(3,4)\n  [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n  >>> multi_list(5,7)\n  [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n  >>> multi_list(10,15)\n  [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n  \"\"\"\n", "canonical_solution": "  \n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n  for row in range(rownum):\n    for col in range(colnum):\n        multi_list[row][col]= row*col\n  return multi_list\n", "entry_point": "multi_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n    assert candidate(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n    assert candidate(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n\n", "language": "python", "description": "Write a function to generate a two-dimensional array."}
{"task_id": "MBPP/381", "prompt": "\n\ndef index_on_inner_list(list_data, index_no):\n    \"\"\"\n    Write a function to sort a list of lists by a given index of the inner list.\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)\n    [('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)\n    [('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)\n    [('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\n    \"\"\"\n", "canonical_solution": "    from operator import itemgetter\n    \n    result = sorted(list_data, key=itemgetter(index_no))\n    return result", "entry_point": "index_on_inner_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\n\n", "language": "python", "description": "Write a function to sort a list of lists by a given index of the inner list."}
{"task_id": "MBPP/382", "prompt": "\n\ndef find_rotation_count(A):\n    \"\"\"\n    Write a function to find the number of rotations in a circularly sorted array.\n    >>> find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n    3\n    >>> find_rotation_count([8, 9, 10,2, 5, 6])\n    3\n    >>> find_rotation_count([2, 5, 6, 8, 9, 10])\n    0\n    \"\"\"\n", "canonical_solution": "    \n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "entry_point": "find_rotation_count", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n    assert candidate([8, 9, 10,2, 5, 6]) == 3\n    assert candidate([2, 5, 6, 8, 9, 10]) == 0\n\n", "language": "python", "description": "Write a function to find the number of rotations in a circularly sorted array."}
{"task_id": "MBPP/383", "prompt": "\n\ndef even_bit_toggle_number(n) :\n    \"\"\"\n    Write a python function to toggle all odd bits of a given number.\n    >>> even_bit_toggle_number(10)\n    15\n    >>> even_bit_toggle_number(20)\n    1\n    >>> even_bit_toggle_number(30)\n    11\n    \"\"\"\n", "canonical_solution": "     \n    res = 0; count = 0; temp = n    \n    while(temp > 0 ) : \n        if (count % 2 == 0) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res ", "entry_point": "even_bit_toggle_number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 15\n    assert candidate(20) == 1\n    assert candidate(30) == 11\n\n", "language": "python", "description": "Write a python function to toggle all odd bits of a given number."}
{"task_id": "MBPP/384", "prompt": "\n\ndef frequency_Of_Smallest(n,arr):\n    \"\"\"\n    Write a python function to find the frequency of the smallest value in a given array.\n    >>> frequency_Of_Smallest(5,[1,2,3,4,3])\n    1\n    >>> frequency_Of_Smallest(7,[3,1,2,5,6,2,3])\n    1\n    >>> frequency_Of_Smallest(7,[3,3,6,3,7,4,9])\n    3\n    \"\"\"\n", "canonical_solution": "     \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ", "entry_point": "frequency_Of_Smallest", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5,[1,2,3,4,3]) == 1\n    assert candidate(7,[3,1,2,5,6,2,3]) == 1\n    assert candidate(7,[3,3,6,3,7,4,9]) == 3\n\n", "language": "python", "description": "Write a python function to find the frequency of the smallest value in a given array."}
{"task_id": "MBPP/385", "prompt": "\n\ndef get_perrin(n):\n  \"\"\"\n  Write a function to find the n'th perrin number using recursion.\n  >>> get_perrin(9)\n  12\n  >>> get_perrin(4)\n  2\n  >>> get_perrin(6)\n  5\n  \"\"\"\n", "canonical_solution": "  \n  if (n == 0):\n    return 3\n  if (n == 1):\n    return 0\n  if (n == 2):\n    return 2 \n  return get_perrin(n - 2) + get_perrin(n - 3)", "entry_point": "get_perrin", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(9) == 12\n    assert candidate(4) == 2\n    assert candidate(6) == 5\n\n", "language": "python", "description": "Write a function to find the n'th perrin number using recursion."}
{"task_id": "MBPP/386", "prompt": "\n\ndef swap_count(s):\n\t\"\"\"\n\tWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\t>>> swap_count(\"[]][][\")\n\t2\n\t>>> swap_count(\"[[][]]\")\n\t0\n\t>>> swap_count(\"[[][]]][\")\n\t1\n\t\"\"\"\n", "canonical_solution": "\t\n\tchars = s\n\tcount_left = 0\n\tcount_right = 0\n\tswap = 0\n\timbalance = 0; \n\tfor i in range(len(chars)):\n\t\tif chars[i] == '[':\n\t\t\tcount_left += 1\n\t\t\tif imbalance > 0:\n\t\t\t\tswap += imbalance\n\t\t\t\timbalance -= 1\n\t\telif chars[i] == ']':\n\t\t\tcount_right += 1\n\t\t\timbalance = (count_right - count_left) \n\treturn swap", "entry_point": "swap_count", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"[]][][\") == 2\n    assert candidate(\"[[][]]\") == 0\n    assert candidate(\"[[][]]][\") == 1\n\n", "language": "python", "description": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string."}
{"task_id": "MBPP/387", "prompt": "\n\ndef even_or_odd(N):\n    \"\"\"\n    Write a python function to check whether the hexadecimal number is even or odd.\n    >>> even_or_odd(\"AB3454D\")\n    \"Odd\"\n    >>> even_or_odd(\"ABC\")\n    \"Even\"\n    >>> even_or_odd(\"AAD\")\n    \"Odd\"\n    \"\"\"\n", "canonical_solution": "     \n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        N[l-1] =='C'or N[l-1] =='E'): \n        return (\"Even\") \n    else: \n        return (\"Odd\") ", "entry_point": "even_or_odd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"AB3454D\") ==\"Odd\"\n    assert candidate(\"ABC\") == \"Even\"\n    assert candidate(\"AAD\") == \"Odd\"\n\n", "language": "python", "description": "Write a python function to check whether the hexadecimal number is even or odd."}
{"task_id": "MBPP/388", "prompt": "\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    >>> highest_Power_of_2(10)\n    8\n    >>> highest_Power_of_2(19)\n    16\n    >>> highest_Power_of_2(32)\n    32\n    \"\"\"\n", "canonical_solution": "     \n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break; \n    return res; ", "entry_point": "highest_Power_of_2", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n\n", "language": "python", "description": "Write a python function to find the highest power of 2 that is less than or equal to n."}
{"task_id": "MBPP/389", "prompt": "\n\ndef find_lucas(n):\n\t\"\"\"\n\tWrite a function to find the n'th lucas number.\n\t>>> find_lucas(9)\n\t76\n\t>>> find_lucas(4)\n\t7\n\t>>> find_lucas(3)\n\t4\n\t\"\"\"\n", "canonical_solution": "\t \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "entry_point": "find_lucas", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(9) == 76\n    assert candidate(4) == 7\n    assert candidate(3) == 4\n\n", "language": "python", "description": "Write a function to find the n'th lucas number."}
{"task_id": "MBPP/390", "prompt": "\n\ndef add_string(list,string):\n \"\"\"\n Write a function to insert a given string at the beginning of all items in a list.\n >>> add_string([1,2,3,4],'temp{0}')\n ['temp1', 'temp2', 'temp3', 'temp4']\n >>> add_string(['a','b','c','d'], 'python{0}')\n [ 'pythona', 'pythonb', 'pythonc', 'pythond']\n >>> add_string([5,6,7,8],'string{0}')\n ['string5', 'string6', 'string7', 'string8']\n \"\"\"\n", "canonical_solution": " \n add_string=[string.format(i) for i in  list]\n return add_string", "entry_point": "add_string", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert candidate(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    assert candidate([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n\n", "language": "python", "description": "Write a function to insert a given string at the beginning of all items in a list."}
{"task_id": "MBPP/391", "prompt": "\n\ndef convert_list_dictionary(l1, l2, l3):\n     \"\"\"\n     Write a function to convert more than one list to nested dictionary.\n     >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n     [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n     >>> convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])\n     [{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n     >>> convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])\n     [{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n     \"\"\"\n", "canonical_solution": "     \n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "entry_point": "convert_list_dictionary", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    assert candidate([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n    assert candidate([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n\n", "language": "python", "description": "Write a function to convert more than one list to nested dictionary."}
{"task_id": "MBPP/392", "prompt": "\n\ndef get_max_sum (n):\n\t\"\"\"\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\t>>> get_max_sum(60)\n\t106\n\t>>> get_max_sum(10)\n\t12\n\t>>> get_max_sum(2)\n\t2\n\t\"\"\"\n", "canonical_solution": "\t\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]", "entry_point": "get_max_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(60) == 106\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n\n", "language": "python", "description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)."}
{"task_id": "MBPP/393", "prompt": "\n\ndef max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length using lambda function.\n    >>> max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (3, [13, 15, 17])\n    >>> max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])\n    (5,[1,2,3,4,5])\n    >>> max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])\n    (4,[6,7,8,9])\n    \"\"\"\n", "canonical_solution": "    \n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)", "entry_point": "max_length_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n    assert candidate([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])\n\n", "language": "python", "description": "Write a function to find the list with maximum length using lambda function."}
{"task_id": "MBPP/394", "prompt": "\n\ndef check_distinct(test_tup):\n  \"\"\"\n  Write a function to check if given tuple is distinct or not.\n  >>> check_distinct((1, 4, 5, 6, 1, 4))\n  False\n  >>> check_distinct((1, 4, 5, 6))\n  True\n  >>> check_distinct((2, 3, 4, 5, 6))\n  True\n  \"\"\"\n", "canonical_solution": "  \n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res) ", "entry_point": "check_distinct", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 4, 5, 6, 1, 4)) == False\n    assert candidate((1, 4, 5, 6)) == True\n    assert candidate((2, 3, 4, 5, 6)) == True\n\n", "language": "python", "description": "Write a function to check if given tuple is distinct or not."}
{"task_id": "MBPP/395", "prompt": "\n\ndef first_non_repeating_character(str1):\n  \"\"\"\n  Write a python function to find the first non-repeated character in a given string.\n  >>> first_non_repeating_character(\"abcabc\")\n  None\n  >>> first_non_repeating_character(\"abc\")\n  \"a\"\n  >>> first_non_repeating_character(\"ababc\")\n  \"c\"\n  \"\"\"\n", "canonical_solution": "  \n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "entry_point": "first_non_repeating_character", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"abcabc\") == None\n    assert candidate(\"abc\") == \"a\"\n    assert candidate(\"ababc\") == \"c\"\n\n", "language": "python", "description": "Write a python function to find the first non-repeated character in a given string."}
{"task_id": "MBPP/396", "prompt": "\n\ndef check_char(string):\n\t\"\"\"\n\tWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\t>>> check_char(\"abba\")\n\t\"Valid\"\n\t>>> check_char(\"a\")\n\t\"Valid\"\n\t>>> check_char(\"abcd\")\n\t\"Invalid\"\n\t\"\"\"\n", "canonical_solution": "\timport re  \n\tregex = r'^[a-z]$|^([a-z]).*\\1$'\n\t \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ", "entry_point": "check_char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"abba\") == \"Valid\"\n    assert candidate(\"a\") == \"Valid\"\n    assert candidate(\"abcd\") == \"Invalid\"\n\n", "language": "python", "description": "Write a function to check whether the given string starts and ends with the same character or not using regex."}
{"task_id": "MBPP/397", "prompt": "\n\ndef median_numbers(a,b,c):\n \"\"\"\n Write a function to find the median of three specific numbers.\n >>> median_numbers(25,55,65)\n 55.0\n >>> median_numbers(20,10,30)\n 20.0\n >>> median_numbers(15,45,75)\n 45.0\n \"\"\"\n", "canonical_solution": " \n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "entry_point": "median_numbers", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(25,55,65)==55.0\n    assert candidate(20,10,30)==20.0\n    assert candidate(15,45,75)==45.0\n\n", "language": "python", "description": "Write a function to find the median of three specific numbers."}
{"task_id": "MBPP/398", "prompt": "\n\ndef sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    >>> sum_of_digits([10,2,56])\n    14\n    >>> sum_of_digits([[10,20,4,5,'b',70,'a']])\n    19\n    >>> sum_of_digits([10,20,-4,5,-70])\n    19\n    \"\"\"\n", "canonical_solution": "    \n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "entry_point": "sum_of_digits", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10,2,56])==14\n    assert candidate([[10,20,4,5,'b',70,'a']])==19\n    assert candidate([10,20,-4,5,-70])==19\n\n", "language": "python", "description": "Write a function to compute the sum of digits of each number of a given list."}
{"task_id": "MBPP/399", "prompt": "\n\ndef bitwise_xor(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perform the mathematical bitwise xor operation across the given tuples.\n  >>> bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))\n  (15, 6, 5, 10)\n  >>> bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4))\n  (13, 6, 3, 14)\n  >>> bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6))\n  (11, 2, 13, 13)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "entry_point": "bitwise_xor", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n\n", "language": "python", "description": "Write a function to perform the mathematical bitwise xor operation across the given tuples."}
{"task_id": "MBPP/400", "prompt": "\n\ndef extract_freq(test_list):\n  \"\"\"\n  Write a function to extract the frequency of unique tuples in the given list order irrespective.\n  >>> extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] )\n  3\n  >>> extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] )\n  4\n  >>> extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] )\n  4\n  \"\"\"\n", "canonical_solution": "  \n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)", "entry_point": "extract_freq", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4\n\n", "language": "python", "description": "Write a function to extract the frequency of unique tuples in the given list order irrespective."}
{"task_id": "MBPP/401", "prompt": "\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n  >>> add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n  ((7, 10), (7, 14), (3, 10), (8, 13))\n  >>> add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n  ((9, 12), (9, 16), (5, 12), (10, 15))\n  >>> add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n  ((11, 14), (11, 18), (7, 14), (12, 17))\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "entry_point": "add_nested_tuples", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\n", "language": "python", "description": "Write a function to perform index wise addition of tuple elements in the given two nested tuples."}
{"task_id": "MBPP/402", "prompt": "\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Write a function to compute the value of ncr%p.\n    >>> ncr_modp(10,2,13)\n    6\n    >>> ncr_modp(15,12,43)\n    25\n    >>> ncr_modp(17,9,18)\n    10\n    \"\"\"\n", "canonical_solution": "     \n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p   \n    return C[r] ", "entry_point": "ncr_modp", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,2,13)==6\n    assert candidate(15,12,43)==25\n    assert candidate(17,9,18)==10\n\n", "language": "python", "description": "Write a function to compute the value of ncr%p."}
{"task_id": "MBPP/403", "prompt": "\n\ndef is_valid_URL(str):\n\t\"\"\"\n\tWrite a function to check if a url is valid or not using regex.\n\t>>> is_valid_URL(\"https://www.google.com\")\n\tTrue\n\t>>> is_valid_URL(\"https:/www.gmail.com\")\n\tFalse\n\t>>> is_valid_URL(\"https:// www.redit.com\")\n\tFalse\n\t\"\"\"\n", "canonical_solution": "\timport re\n\t\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False", "entry_point": "is_valid_URL", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"https://www.google.com\") == True\n    assert candidate(\"https:/www.gmail.com\") == False\n    assert candidate(\"https:// www.redit.com\") == False\n\n", "language": "python", "description": "Write a function to check if a url is valid or not using regex."}
{"task_id": "MBPP/404", "prompt": "\n\ndef minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    >>> minimum(1,2)\n    1\n    >>> minimum(-5,-4)\n    -5\n    >>> minimum(0,0)\n    0\n    \"\"\"\n", "canonical_solution": "       \n    if a <= b: \n        return a \n    else: \n        return b ", "entry_point": "minimum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(-5,-4) == -5\n    assert candidate(0,0) == 0\n\n", "language": "python", "description": "Write a python function to find the minimum of two numbers."}
{"task_id": "MBPP/405", "prompt": "\n\ndef check_tuplex(tuplex,tuple1):\n  \"\"\"\n  Write a function to check whether an element exists within a tuple.\n  >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')\n  True\n  >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')\n  False\n  >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)\n  True\n  \"\"\"\n", "canonical_solution": "   \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "entry_point": "check_tuplex", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n\n", "language": "python", "description": "Write a function to check whether an element exists within a tuple."}
{"task_id": "MBPP/406", "prompt": "\n\ndef find_Parity(x):\n    \"\"\"\n    Write a python function to find the parity of a given number.\n    >>> find_Parity(12)\n    \"Even Parity\"\n    >>> find_Parity(7)\n    \"Odd Parity\"\n    >>> find_Parity(10)\n    \"Even Parity\"\n    \"\"\"\n", "canonical_solution": "     \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return (\"Odd Parity\"); \n    return (\"Even Parity\"); ", "entry_point": "find_Parity", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12) == \"Even Parity\"\n    assert candidate(7) == \"Odd Parity\"\n    assert candidate(10) == \"Even Parity\"\n\n", "language": "python", "description": "Write a python function to find the parity of a given number."}
{"task_id": "MBPP/407", "prompt": "\n\ndef rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    >>> rearrange_bigger(12)\n    21\n    >>> rearrange_bigger(10)\n    False\n    >>> rearrange_bigger(102)\n    120\n    \"\"\"\n", "canonical_solution": "    \n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False", "entry_point": "rearrange_bigger", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12)==21\n    assert candidate(10)==False\n    assert candidate(102)==120\n\n", "language": "python", "description": "Write a function to create the next bigger number by rearranging the digits of a given number."}
{"task_id": "MBPP/408", "prompt": "\n\ndef k_smallest_pairs(nums1, nums2, k):\n   \"\"\"\n   Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n   >>> k_smallest_pairs([1,3,7],[2,4,6],2)\n   [[1, 2], [1, 4]]\n   >>> k_smallest_pairs([1,3,7],[2,4,6],1)\n   [[1, 2]]\n   >>> k_smallest_pairs([1,3,7],[2,4,6],7)\n   [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n   \"\"\"\n", "canonical_solution": "   import heapq\n   \n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs", "entry_point": "k_smallest_pairs", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n    assert candidate([1,3,7],[2,4,6],1)==[[1, 2]]\n    assert candidate([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\n", "language": "python", "description": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array."}
{"task_id": "MBPP/409", "prompt": "\n\ndef min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n    8\n    >>> min_product_tuple([(10,20), (15,2), (5,10)] )\n    30\n    >>> min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )\n    100\n    \"\"\"\n", "canonical_solution": "    \n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min", "entry_point": "min_product_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert candidate([(10,20), (15,2), (5,10)] )==30\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==100\n\n", "language": "python", "description": "Write a function to find the minimum product from the pairs of tuples within a given list."}
{"task_id": "MBPP/410", "prompt": "\n\ndef min_val(listval):\n     \"\"\"\n     Write a function to find the minimum value in a given heterogeneous list.\n     >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n     2\n     >>> min_val(['Python', 15, 20, 25])\n     15\n     >>> min_val(['Python', 30, 20, 40, 50, 'version'])\n     20\n     \"\"\"\n", "canonical_solution": "     \n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "entry_point": "min_val", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==2\n    assert candidate(['Python', 15, 20, 25])==15\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==20\n\n", "language": "python", "description": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": "MBPP/411", "prompt": "\n\ndef snake_to_camel(word):\n  \"\"\"\n  Write a function to convert the given snake case string to camel case string by using regex.\n  >>> snake_to_camel('android_tv')\n  'AndroidTv'\n  >>> snake_to_camel('google_pixel')\n  'GooglePixel'\n  >>> snake_to_camel('apple_watch')\n  'AppleWatch'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "entry_point": "snake_to_camel", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('android_tv') == 'AndroidTv'\n    assert candidate('google_pixel') == 'GooglePixel'\n    assert candidate('apple_watch') == 'AppleWatch'\n\n", "language": "python", "description": "Write a function to convert the given snake case string to camel case string by using regex."}
{"task_id": "MBPP/412", "prompt": "\n\ndef remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    >>> remove_odd([1,2,3])\n    [2]\n    >>> remove_odd([2,4,6])\n    [2,4,6]\n    >>> remove_odd([10,20,3])\n    [10,20]\n    \"\"\"\n", "canonical_solution": "    \n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l", "entry_point": "remove_odd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3]) == [2]\n    assert candidate([2,4,6]) == [2,4,6]\n    assert candidate([10,20,3]) == [10,20]\n\n", "language": "python", "description": "Write a python function to remove odd numbers from a given list."}
{"task_id": "MBPP/413", "prompt": "\n\ndef extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)\n    ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)\n    [99, 96, 94, 98]\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)\n    [98, 97, 91, 94]\n    \"\"\"\n", "canonical_solution": "    \n    result = [x[n] for x in list1]\n    return result", "entry_point": "extract_nth_element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n\n", "language": "python", "description": "Write a function to extract the nth element from a given list of tuples."}
{"task_id": "MBPP/414", "prompt": "\n\ndef overlapping(list1,list2):\n    \"\"\"\n    Write a python function to check whether the value exists in a sequence or not.\n    >>> overlapping([1,2,3,4,5],[6,7,8,9])\n    False\n    >>> overlapping([1,2,3],[4,5,6])\n    False\n    >>> overlapping([1,4,5],[1,4,5])\n    True\n    \"\"\"\n", "canonical_solution": "      \n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n        d+=1\n    for i in range(0,c): \n        for j in range(0,d): \n            if(list1[i]==list2[j]): \n                return 1\n    return 0", "entry_point": "overlapping", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5],[6,7,8,9]) == False\n    assert candidate([1,2,3],[4,5,6]) == False\n    assert candidate([1,4,5],[1,4,5]) == True\n\n", "language": "python", "description": "Write a python function to check whether the value exists in a sequence or not."}
{"task_id": "MBPP/415", "prompt": "\n\ndef max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    >>> max_Product([1,2,3,4,7,0,8,4])\n    (7,8)\n    >>> max_Product([0,-1,-2,-4,5,0,-6])\n    (-4,-6)\n    >>> max_Product([1,2,3])\n    (2,3)\n    \"\"\"\n", "canonical_solution": "     \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ", "entry_point": "max_Product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,7,0,8,4]) == (7,8)\n    assert candidate([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n    assert candidate([1,2,3]) == (2,3)\n\n", "language": "python", "description": "Write a python function to find a pair with highest product from a given array of integers."}
{"task_id": "MBPP/416", "prompt": "\n\ndef breakSum(n):\n\t\"\"\"\n\tWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\t>>> breakSum(12)\n\t13\n\t>>> breakSum(24)\n\t27\n\t>>> breakSum(23)\n\t23\n\t\"\"\"\n", "canonical_solution": "\tMAX = 1000000\n\t \n\tdp = [0]*(n+1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \n\treturn dp[n]", "entry_point": "breakSum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12) == 13\n    assert candidate(24) == 27\n    assert candidate(23) == 23\n\n", "language": "python", "description": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number."}
{"task_id": "MBPP/417", "prompt": "\n\ndef group_tuples(Input):\n\t\"\"\"\n\tWrite a function to find common first element in given list of tuple.\n\t>>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n\t[('x', 'y', 'z'), ('w', 't')]\n\t>>> group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')])\n\t[('a', 'b', 'c'), ('d', 'e')]\n\t>>> group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')])\n\t[('f', 'g', 'g'), ('h', 'i')]\n\t\"\"\"\n", "canonical_solution": "\t \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ", "entry_point": "group_tuples", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert candidate([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    assert candidate([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n\n", "language": "python", "description": "Write a function to find common first element in given list of tuple."}
{"task_id": "MBPP/418", "prompt": "\n\ndef Find_Max(lst):\n    \"\"\"\n    Write a python function to find the sublist having maximum length.\n    >>> Find_Max([['A'],['A','B'],['A','B','C']])\n    ['A','B','C']\n    >>> Find_Max([[1],[1,2],[1,2,3]])\n    [1,2,3]\n    >>> Find_Max([[1,1],[1,2,3],[1,5,6,1]])\n    [1,5,6,1]\n    \"\"\"\n", "canonical_solution": "     \n    maxList = max((x) for x in lst) \n    return maxList", "entry_point": "Find_Max", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert candidate([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert candidate([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n\n", "language": "python", "description": "Write a python function to find the sublist having maximum length."}
{"task_id": "MBPP/419", "prompt": "\n\ndef round_and_sum(list1):\n  \"\"\"\n  Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n  >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n  243\n  >>> round_and_sum([5,2,9,24.3,29])\n  345\n  >>> round_and_sum([25.0,56.7,89.2])\n  513\n  \"\"\"\n", "canonical_solution": "  \n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "entry_point": "round_and_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n    assert candidate([5,2,9,24.3,29])==345\n    assert candidate([25.0,56.7,89.2])==513\n\n", "language": "python", "description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list."}
{"task_id": "MBPP/420", "prompt": "\n\ndef cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    >>> cube_Sum(2)\n    72\n    >>> cube_Sum(3)\n    288\n    >>> cube_Sum(4)\n    800\n    \"\"\"\n", "canonical_solution": "     \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum", "entry_point": "cube_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 72\n    assert candidate(3) == 288\n    assert candidate(4) == 800\n\n", "language": "python", "description": "Write a python function to find the cube sum of first n even natural numbers."}
{"task_id": "MBPP/421", "prompt": "\n\ndef concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n    'ID-is-4-UTS'\n    >>> concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") )\n    'QWE-is-4-RTY'\n    >>> concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") )\n    'ZEN-is-4-OP'\n    \"\"\"\n", "canonical_solution": "    \n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ", "entry_point": "concatenate_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n    assert candidate((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\n    assert candidate((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n\n", "language": "python", "description": "Write a function to concatenate each element of tuple by the delimiter."}
{"task_id": "MBPP/422", "prompt": "\n\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    >>> find_Average_Of_Cube(2)\n    4.5\n    >>> find_Average_Of_Cube(3)\n    12\n    >>> find_Average_Of_Cube(1)\n    1\n    \"\"\"\n", "canonical_solution": "      \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ", "entry_point": "find_Average_Of_Cube", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4.5\n    assert candidate(3) == 12\n    assert candidate(1) == 1\n\n", "language": "python", "description": "Write a python function to find the average of cubes of first n natural numbers."}
{"task_id": "MBPP/423", "prompt": "\n\ndef get_maxgold(gold, m, n):\n    \"\"\"\n    Write a function to solve gold mine problem.\n    >>> get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)\n    16\n    >>> get_maxgold([[10,20],[30,40]],2,2)\n    70\n    >>> get_maxgold([[4,9],[3,7]],2,2)\n    13\n    \"\"\"\n", "canonical_solution": "     \n    goldTable = [[0 for i in range(n)] \n                        for j in range(m)]   \n    for col in range(n-1, -1, -1): \n        for row in range(m):  \n            if (col == n-1): \n                right = 0\n            else: \n                right = goldTable[row][col+1] \n            if (row == 0 or col == n-1): \n                right_up = 0\n            else: \n                right_up = goldTable[row-1][col+1] \n            if (row == m-1 or col == n-1): \n                right_down = 0\n            else: \n                right_down = goldTable[row+1][col+1] \n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \n    res = goldTable[0][0] \n    for i in range(1, m): \n        res = max(res, goldTable[i][0])  \n    return res ", "entry_point": "get_maxgold", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n    assert candidate([[10,20],[30,40]],2,2)==70\n    assert candidate([[4,9],[3,7]],2,2)==13\n\n", "language": "python", "description": "Write a function to solve gold mine problem."}
{"task_id": "MBPP/424", "prompt": "\n\ndef extract_rear(test_tuple):\n  \"\"\"\n  Write a function to extract only the rear index element of each string in the given tuple.\n  >>> extract_rear(('Mers', 'for', 'Vers') )\n  ['s', 'r', 's']\n  >>> extract_rear(('Avenge', 'for', 'People') )\n  ['e', 'r', 'e']\n  >>> extract_rear(('Gotta', 'get', 'go') )\n  ['a', 't', 'o']\n  \"\"\"\n", "canonical_solution": "  \n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ", "entry_point": "extract_rear", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    assert candidate(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n\n", "language": "python", "description": "Write a function to extract only the rear index element of each string in the given tuple."}
{"task_id": "MBPP/425", "prompt": "\n\ndef count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)\n    3\n    >>> count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')\n    3\n    >>> count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')\n    1\n    \"\"\"\n", "canonical_solution": "     \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "entry_point": "count_element_in_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n\n", "language": "python", "description": "Write a function to count the number of sublists containing a particular element."}
{"task_id": "MBPP/426", "prompt": "\n\ndef filter_oddnumbers(nums):\n \"\"\"\n Write a function to filter odd numbers using lambda function.\n >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n [1,3,5,7,9]\n >>> filter_oddnumbers([10,20,45,67,84,93])\n [45,67,93]\n >>> filter_oddnumbers([5,7,9,8,6,4,3])\n [5,7,9,3]\n \"\"\"\n", "canonical_solution": " \n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums", "entry_point": "filter_oddnumbers", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    assert candidate([10,20,45,67,84,93])==[45,67,93]\n    assert candidate([5,7,9,8,6,4,3])==[5,7,9,3]\n\n", "language": "python", "description": "Write a function to filter odd numbers using lambda function."}
{"task_id": "MBPP/427", "prompt": "\n\ndef change_date_format(dt):\n        \"\"\"\n        Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n        >>> change_date_format(\"2020-11-13\")\n        '13-11-2020'\n        >>> change_date_format(\"2021-04-26\")\n        '26-04-2021'\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "entry_point": "change_date_format", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"2026-01-02\") == '02-01-2026'\n    assert candidate(\"2020-11-13\") == '13-11-2020'\n    assert candidate(\"2021-04-26\") == '26-04-2021'\n\n", "language": "python", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex."}
{"task_id": "MBPP/428", "prompt": "\n\ndef shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    >>> shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n    [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    >>> shell_sort([24, 22, 39, 34, 87, 73, 68])\n    [22, 24, 34, 39, 68, 73, 87]\n    >>> shell_sort([32, 30, 16, 96, 82, 83, 74])\n    [16, 30, 32, 74, 82, 83, 96]\n    \"\"\"\n", "canonical_solution": "    \n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "entry_point": "shell_sort", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n\n", "language": "python", "description": "Write a function to sort the given array by using shell sort."}
{"task_id": "MBPP/429", "prompt": "\n\ndef and_tuples(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to extract the elementwise and tuples from the given two tuples.\n  >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n  (0, 0, 2, 1)\n  >>> and_tuples((1, 2, 3, 4), (5, 6, 7, 8))\n  (1, 2, 3, 0)\n  >>> and_tuples((8, 9, 11, 12), (7, 13, 14, 17))\n  (0, 9, 10, 0)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "entry_point": "and_tuples", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n\n", "language": "python", "description": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"task_id": "MBPP/430", "prompt": "\n\ndef parabola_directrix(a, b, c):\n  \"\"\"\n  Write a function to find the directrix of a parabola.\n  >>> parabola_directrix(5,3,2)\n  -198\n  >>> parabola_directrix(9,8,4)\n  -2336\n  >>> parabola_directrix(2,4,6)\n  -130\n  \"\"\"\n", "canonical_solution": "   \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix", "entry_point": "parabola_directrix", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5,3,2)==-198\n    assert candidate(9,8,4)==-2336\n    assert candidate(2,4,6)==-130\n\n", "language": "python", "description": "Write a function to find the directrix of a parabola."}
{"task_id": "MBPP/431", "prompt": "\n\ndef common_element(list1, list2):\n     \"\"\"\n     Write a function that takes two lists and returns true if they have at least one common element.\n     >>> common_element([1,2,3,4,5], [5,6,7,8,9])\n     True\n     >>> common_element([1,2,3,4,5], [6,7,8,9])\n     None\n     >>> common_element(['a','b','c'], ['d','b','e'])\n     True\n     \"\"\"\n", "canonical_solution": "     \n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result", "entry_point": "common_element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5], [5,6,7,8,9])==True\n    assert candidate([1,2,3,4,5], [6,7,8,9])==None\n    assert candidate(['a','b','c'], ['d','b','e'])==True\n\n", "language": "python", "description": "Write a function that takes two lists and returns true if they have at least one common element."}
{"task_id": "MBPP/432", "prompt": "\n\ndef median_trapezium(base1,base2,height):\n \"\"\"\n Write a function to find the median of a trapezium.\n >>> median_trapezium(15,25,35)\n 20\n >>> median_trapezium(10,20,30)\n 15\n >>> median_trapezium(6,9,4)\n 7.5\n \"\"\"\n", "canonical_solution": " \n median = 0.5 * (base1+ base2)\n return median", "entry_point": "median_trapezium", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15,25,35)==20\n    assert candidate(10,20,30)==15\n    assert candidate(6,9,4)==7.5\n\n", "language": "python", "description": "Write a function to find the median of a trapezium."}
{"task_id": "MBPP/433", "prompt": "\n\ndef check_greater(arr, number):\n  \"\"\"\n  Write a function to check whether the entered number is greater than the elements of the given array.\n  >>> check_greater([1, 2, 3, 4, 5], 4)\n  'No, entered number is less than those in the array'\n  >>> check_greater([2, 3, 4, 5, 6], 8)\n  'Yes, the entered number is greater than those in the array'\n  >>> check_greater([9, 7, 4, 8, 6, 1], 11)\n  'Yes, the entered number is greater than those in the array'\n  \"\"\"\n", "canonical_solution": "  \n  arr.sort()\n  if number > arr[-1]:\n    return ('Yes, the entered number is greater than those in the array')\n  else:\n    return ('No, entered number is less than those in the array')", "entry_point": "check_greater", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n    assert candidate([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\n    assert candidate([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'\n\n", "language": "python", "description": "Write a function to check whether the entered number is greater than the elements of the given array."}
{"task_id": "MBPP/434", "prompt": "\n\ndef text_match_one(text):\n        \"\"\"\n        Write a function that matches a string that has an a followed by one or more b's.\n        >>> text_match_one(\"ac\")\n        ('Not matched!')\n        >>> text_match_one(\"dc\")\n        ('Not matched!')\n        >>> text_match_one(\"abba\")\n        ('Found a match!')\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n", "entry_point": "text_match_one", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"ac\")==('Not matched!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abba\")==('Found a match!')\n\n", "language": "python", "description": "Write a function that matches a string that has an a followed by one or more b's."}
{"task_id": "MBPP/435", "prompt": "\n\ndef last_Digit(n) :\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    >>> last_Digit(123)\n    3\n    >>> last_Digit(25)\n    5\n    >>> last_Digit(30)\n    0\n    \"\"\"\n", "canonical_solution": "    \n    return (n % 10) ", "entry_point": "last_Digit", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(123) == 3\n    assert candidate(25) == 5\n    assert candidate(30) == 0\n\n", "language": "python", "description": "Write a python function to find the last digit of a given number."}
{"task_id": "MBPP/436", "prompt": "\n\ndef neg_nos(list1):\n  \"\"\"\n  Write a python function to print negative numbers in a list.\n  >>> neg_nos([-1,4,5,-6])\n  -1,-6\n  >>> neg_nos([-1,-2,3,4])\n  -1,-2\n  >>> neg_nos([-7,-6,8,9])\n  -7,-6\n  \"\"\"\n", "canonical_solution": "  \n  for num in list1: \n    if num < 0: \n       return num ", "entry_point": "neg_nos", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1,4,5,-6]) == -1,-6\n    assert candidate([-1,-2,3,4]) == -1,-2\n    assert candidate([-7,-6,8,9]) == -7,-6\n\n", "language": "python", "description": "Write a python function to print negative numbers in a list."}
{"task_id": "MBPP/437", "prompt": "\n\ndef remove_odd(str1):\n \"\"\"\n Write a function to remove odd characters in a string.\n >>> remove_odd(\"python\")\n (\"yhn\")\n >>> remove_odd(\"program\")\n (\"rga\")\n >>> remove_odd(\"language\")\n (\"agae\")\n \"\"\"\n", "canonical_solution": " \n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2", "entry_point": "remove_odd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"python\")==(\"yhn\")\n    assert candidate(\"program\")==(\"rga\")\n    assert candidate(\"language\")==(\"agae\")\n\n", "language": "python", "description": "Write a function to remove odd characters in a string."}
{"task_id": "MBPP/438", "prompt": "\n\ndef count_bidirectional(test_list):\n  \"\"\"\n  Write a function to count bidirectional tuple pairs.\n  >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] )\n  '3'\n  >>> count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] )\n  '2'\n  >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] )\n  '4'\n  \"\"\"\n", "canonical_solution": "  \n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return (str(res)) ", "entry_point": "count_bidirectional", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'\n\n", "language": "python", "description": "Write a function to count bidirectional tuple pairs."}
{"task_id": "MBPP/439", "prompt": "\n\ndef multiple_to_single(L):\n  \"\"\"\n  Write a function to convert a list of multiple integers into a single integer.\n  >>> multiple_to_single([11, 33, 50])\n  113350\n  >>> multiple_to_single([-1,2,3,4,5,6])\n  -123456\n  >>> multiple_to_single([10,15,20,25])\n  10152025\n  \"\"\"\n", "canonical_solution": "  \n  x = int(\"\".join(map(str, L)))\n  return x", "entry_point": "multiple_to_single", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([11, 33, 50])==113350\n    assert candidate([-1,2,3,4,5,6])==-123456\n    assert candidate([10,15,20,25])==10152025\n\n", "language": "python", "description": "Write a function to convert a list of multiple integers into a single integer."}
{"task_id": "MBPP/440", "prompt": "\n\ndef find_adverb_position(text):\n \"\"\"\n Write a function to find all adverbs and their positions in a given sentence.\n >>> find_adverb_position(\"clearly!! we can see the sky\")\n (0, 7, 'clearly')\n >>> find_adverb_position(\"seriously!! there are many roses\")\n (0, 9, 'seriously')\n >>> find_adverb_position(\"unfortunately!! sita is going to home\")\n (0, 13, 'unfortunately')\n \"\"\"\n", "canonical_solution": " import re\n \n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))", "entry_point": "find_adverb_position", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    assert candidate(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n    assert candidate(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n\n", "language": "python", "description": "Write a function to find all adverbs and their positions in a given sentence."}
{"task_id": "MBPP/441", "prompt": "\n\ndef surfacearea_cube(l):\n  \"\"\"\n  Write a function to find the surface area of a cube.\n  >>> surfacearea_cube(5)\n  150\n  >>> surfacearea_cube(3)\n  54\n  >>> surfacearea_cube(10)\n  600\n  \"\"\"\n", "canonical_solution": "  \n  surfacearea= 6*l*l\n  return surfacearea", "entry_point": "surfacearea_cube", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5)==150\n    assert candidate(3)==54\n    assert candidate(10)==600\n\n", "language": "python", "description": "Write a function to find the surface area of a cube."}
{"task_id": "MBPP/442", "prompt": "\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    >>> positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.54\n    >>> positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    0.69\n    >>> positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    0.56\n    \"\"\"\n", "canonical_solution": "    from array import array\n    \n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "entry_point": "positive_count", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\n\n", "language": "python", "description": "Write a function to find the ration of positive numbers in an array of integers."}
{"task_id": "MBPP/443", "prompt": "\n\ndef largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    >>> largest_neg([1,2,3,-4,-6])\n    -6\n    >>> largest_neg([1,2,3,-8,-9])\n    -9\n    >>> largest_neg([1,2,3,4,-1])\n    -1\n    \"\"\"\n", "canonical_solution": "     \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max", "entry_point": "largest_neg", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,-4,-6]) == -6\n    assert candidate([1,2,3,-8,-9]) == -9\n    assert candidate([1,2,3,4,-1]) == -1\n\n", "language": "python", "description": "Write a python function to find the largest negative number from the given list."}
{"task_id": "MBPP/444", "prompt": "\n\ndef trim_tuple(test_list, K):\n  \"\"\"\n  Write a function to trim each tuple by k in the given tuple list.\n  >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)\n  '[(2,), (9,), (2,), (2,)]'\n  >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1)\n  '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n  >>> trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1)\n  '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n  \"\"\"\n", "canonical_solution": "  \n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ", "entry_point": "trim_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n    assert candidate([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n\n", "language": "python", "description": "Write a function to trim each tuple by k in the given tuple list."}
{"task_id": "MBPP/445", "prompt": "\n\ndef index_multiplication(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n  >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n  ((6, 21), (12, 45), (2, 9), (7, 30))\n  >>> index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) )\n  ((14, 32), (20, 60), (6, 20), (16, 44))\n  >>> index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) )\n  ((24, 45), (30, 77), (12, 33), (27, 60))\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "entry_point": "index_multiplication", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n\n", "language": "python", "description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples."}
{"task_id": "MBPP/446", "prompt": "\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] )\n    3\n    >>> count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7])\n    6\n    >>> count_Occurrence((1,2,3,4,5,6),[1,2])\n    2\n    \"\"\"\n", "canonical_solution": "    from collections import Counter \n     \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ", "entry_point": "count_Occurrence", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n    assert candidate((1,2,3,4,5,6),[1,2]) == 2\n\n", "language": "python", "description": "Write a python function to count the occurence of all elements of list in a tuple."}
{"task_id": "MBPP/447", "prompt": "\n\ndef cube_nums(nums):\n \"\"\"\n Write a function to find cubes of individual elements in a list using lambda function.\n >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n >>> cube_nums([10,20,30])\n ([1000, 8000, 27000])\n >>> cube_nums([12,15])\n ([1728, 3375])\n \"\"\"\n", "canonical_solution": " \n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums", "entry_point": "cube_nums", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert candidate([10,20,30])==([1000, 8000, 27000])\n    assert candidate([12,15])==([1728, 3375])\n\n", "language": "python", "description": "Write a function to find cubes of individual elements in a list using lambda function."}
{"task_id": "MBPP/448", "prompt": "\n\ndef cal_sum(n):\n\t\"\"\"\n\tWrite a function to calculate the sum of perrin numbers.\n\t>>> cal_sum(9)\n\t49\n\t>>> cal_sum(10)\n\t66\n\t>>> cal_sum(11)\n\t88\n\t\"\"\"\n", "canonical_solution": "\t \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum", "entry_point": "cal_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(9) == 49\n    assert candidate(10) == 66\n    assert candidate(11) == 88\n\n", "language": "python", "description": "Write a function to calculate the sum of perrin numbers."}
{"task_id": "MBPP/449", "prompt": "\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    \"\"\"\n    Write a python function to check whether the triangle is valid or not if 3 points are given.\n    >>> check_Triangle(1,5,2,5,4,6)\n    'Yes'\n    >>> check_Triangle(1,1,1,4,1,5)\n    'No'\n    >>> check_Triangle(1,1,1,1,1,1)\n    'No'\n    \"\"\"\n", "canonical_solution": "     \n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \n    if a == 0: \n        return ('No') \n    else: \n        return ('Yes') ", "entry_point": "check_Triangle", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,5,2,5,4,6) == 'Yes'\n    assert candidate(1,1,1,4,1,5) == 'No'\n    assert candidate(1,1,1,1,1,1) == 'No'\n\n", "language": "python", "description": "Write a python function to check whether the triangle is valid or not if 3 points are given."}
{"task_id": "MBPP/450", "prompt": "\n\ndef extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a give list of string values.\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)\n    ['practice', 'solution']\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)\n    ['Python']\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)\n    ['exercises']\n    \"\"\"\n", "canonical_solution": "    \n    result = [e for e in str if len(e) == l] \n    return result", "entry_point": "extract_string", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n\n", "language": "python", "description": "Write a function to extract specified size of strings from a give list of string values."}
{"task_id": "MBPP/451", "prompt": "\n\ndef remove_whitespaces(text1):\n  \"\"\"\n  Write a function to remove all whitespaces from the given string using regex.\n  >>> remove_whitespaces(' Google    Flutter ')\n  'GoogleFlutter'\n  >>> remove_whitespaces(' Google    Dart ')\n  'GoogleDart'\n  >>> remove_whitespaces(' iOS    Swift ')\n  'iOSSwift'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  return (re.sub(r'\\s+', '',text1))", "entry_point": "remove_whitespaces", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(' Google    Flutter ') == 'GoogleFlutter'\n    assert candidate(' Google    Dart ') == 'GoogleDart'\n    assert candidate(' iOS    Swift ') == 'iOSSwift'\n\n", "language": "python", "description": "Write a function to remove all whitespaces from the given string using regex."}
{"task_id": "MBPP/452", "prompt": "\n\ndef loss_amount(actual_cost,sale_amount):\n  \"\"\"\n  Write a function that gives loss amount if the given amount has loss else return none.\n  >>> loss_amount(1500,1200)\n  None\n  >>> loss_amount(100,200)\n  100\n  >>> loss_amount(2000,5000)\n  3000\n  \"\"\"\n", "canonical_solution": "   \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return None", "entry_point": "loss_amount", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1500,1200)==None\n    assert candidate(100,200)==100\n    assert candidate(2000,5000)==3000\n\n", "language": "python", "description": "Write a function that gives loss amount if the given amount has loss else return none."}
{"task_id": "MBPP/453", "prompt": "\n\ndef sumofFactors(n) :\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    >>> sumofFactors(18)\n    26\n    >>> sumofFactors(30)\n    48\n    >>> sumofFactors(6)\n    8\n    \"\"\"\n", "canonical_solution": "    import math \n     \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res ", "entry_point": "sumofFactors", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(18) == 26\n    assert candidate(30) == 48\n    assert candidate(6) == 8\n\n", "language": "python", "description": "Write a python function to find the sum of even factors of a number."}
{"task_id": "MBPP/454", "prompt": "\n\ndef text_match_wordz(text):\n        \"\"\"\n        Write a function that matches a word containing 'z'.\n        >>> text_match_wordz(\"pythonz.\")\n        ('Found a match!')\n        >>> text_match_wordz(\"xyz.\")\n        ('Found a match!')\n        >>> text_match_wordz(\"  lang  .\")\n        ('Not matched!')\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "entry_point": "text_match_wordz", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"pythonz.\")==('Found a match!')\n    assert candidate(\"xyz.\")==('Found a match!')\n    assert candidate(\"  lang  .\")==('Not matched!')\n\n", "language": "python", "description": "Write a function that matches a word containing 'z'."}
{"task_id": "MBPP/455", "prompt": "\n\ndef check_monthnumb_number(monthnum2):\n  \"\"\"\n  Write a function to check whether the given month number contains 31 days or not.\n  >>> check_monthnumb_number(5)\n  True\n  >>> check_monthnumb_number(2)\n  False\n  >>> check_monthnumb_number(6)\n  False\n  \"\"\"\n", "canonical_solution": "  \n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False", "entry_point": "check_monthnumb_number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5)==True\n    assert candidate(2)==False\n    assert candidate(6)==False\n\n", "language": "python", "description": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": "MBPP/456", "prompt": "\n\ndef reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse strings in a given list of string values.\n    >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n    ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    >>> reverse_string_list(['john','amal','joel','george'])\n    ['nhoj','lama','leoj','egroeg']\n    >>> reverse_string_list(['jack','john','mary'])\n    ['kcaj','nhoj','yram']\n    \"\"\"\n", "canonical_solution": "    \n    result = [x[::-1] for x in stringlist]\n    return result", "entry_point": "reverse_string_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert candidate(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n    assert candidate(['jack','john','mary'])==['kcaj','nhoj','yram']\n\n", "language": "python", "description": "Write a function to reverse strings in a given list of string values."}
{"task_id": "MBPP/457", "prompt": "\n\ndef Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    >>> Find_Min([[1],[1,2],[1,2,3]])\n    [1]\n    >>> Find_Min([[1,1],[1,1,1],[1,2,7,8]])\n    [1,1]\n    >>> Find_Min([['x'],['x','y'],['x','y','z']])\n    ['x']\n    \"\"\"\n", "canonical_solution": "     \n    minList = min((x) for x in lst) \n    return minList", "entry_point": "Find_Min", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1],[1,2],[1,2,3]]) == [1]\n    assert candidate([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    assert candidate([['x'],['x','y'],['x','y','z']]) == ['x']\n\n", "language": "python", "description": "Write a python function to find the sublist having minimum length."}
{"task_id": "MBPP/458", "prompt": "\n\ndef rectangle_area(l,b):\n  \"\"\"\n  Write a function to find the area of a rectangle.\n  >>> rectangle_area(10,20)\n  200\n  >>> rectangle_area(10,5)\n  50\n  >>> rectangle_area(4,2)\n  8\n  \"\"\"\n", "canonical_solution": "  \n  area=l*b\n  return area", "entry_point": "rectangle_area", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(10,5)==50\n    assert candidate(4,2)==8\n\n", "language": "python", "description": "Write a function to find the area of a rectangle."}
{"task_id": "MBPP/459", "prompt": "\n\ndef remove_uppercase(str1):\n  \"\"\"\n  Write a function to remove uppercase substrings from a given string by using regex.\n  >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n  'cstyoravoitshos'\n  >>> remove_uppercase('wAtchTheinTernEtrAdIo')\n  'wtchheinerntrdo'\n  >>> remove_uppercase('VoicESeaRchAndreComMendaTionS')\n  'oiceachndreomendaion'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\n  result =  remove_upper(str1)\n  return (result)", "entry_point": "remove_uppercase", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert candidate('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert candidate('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n\n", "language": "python", "description": "Write a function to remove uppercase substrings from a given string by using regex."}
{"task_id": "MBPP/460", "prompt": "\n\ndef Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    >>> Extract([[1,2,3],[4, 5]])\n    [1,4]\n    >>> Extract([[9,8,1],[1,2]])\n    [9,1]\n    \"\"\"\n", "canonical_solution": "     \n    return [item[0] for item in lst] ", "entry_point": "Extract", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert candidate([[1,2,3],[4, 5]]) == [1,4]\n    assert candidate([[9,8,1],[1,2]]) == [9,1]\n\n", "language": "python", "description": "Write a python function to get the first element of each sublist."}
{"task_id": "MBPP/461", "prompt": "\n\ndef upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    >>> upper_ctr('PYthon')\n    1\n    >>> upper_ctr('BigData')\n    1\n    >>> upper_ctr('program')\n    0\n    \"\"\"\n", "canonical_solution": "    \n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr", "entry_point": "upper_ctr", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('PYthon') == 1\n    assert candidate('BigData') == 1\n    assert candidate('program') == 0\n\n", "language": "python", "description": "Write a python function to count the upper case characters in a given string."}
{"task_id": "MBPP/462", "prompt": "\n\ndef combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    >>> combinations_list(['orange', 'red', 'green', 'blue'])\n    [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    >>> combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])\n    [[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    >>> combinations_list(['red', 'green', 'black', 'orange'])\n    [[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n    \"\"\"\n", "canonical_solution": "    \n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "entry_point": "combinations_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert candidate(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n\n", "language": "python", "description": "Write a function to find all possible combinations of the elements of a given list."}
{"task_id": "MBPP/463", "prompt": "\n\ndef max_subarray_product(arr):\n\t\"\"\"\n\tWrite a function to find the maximum product subarray of the given array.\n\t>>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n\t112\n\t>>> max_subarray_product([6, -3, -10, 0, 2])\n\t180\n\t>>> max_subarray_product([-2, -40, 0, -2, -3])\n\t80\n\t\"\"\"\n", "canonical_solution": "\t\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far", "entry_point": "max_subarray_product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert candidate([6, -3, -10, 0, 2]) == 180 \n    assert candidate([-2, -40, 0, -2, -3]) == 80\n\n", "language": "python", "description": "Write a function to find the maximum product subarray of the given array."}
{"task_id": "MBPP/464", "prompt": "\n\ndef check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)\n    False\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)\n    True\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)\n    False\n    \"\"\"\n", "canonical_solution": "    \n    result = all(x == n for x in dict.values()) \n    return result", "entry_point": "check_value", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\n\n", "language": "python", "description": "Write a function to check if all values are same in a dictionary."}
{"task_id": "MBPP/465", "prompt": "\n\ndef drop_empty(dict1):\n  \"\"\"\n  Write a function to drop empty items from a given dictionary.\n  >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n  {'c1': 'Red', 'c2': 'Green'}\n  >>> drop_empty({'c1': 'Red', 'c2': None, 'c3':None})\n  {'c1': 'Red'}\n  >>> drop_empty({'c1': None, 'c2': 'Green', 'c3':None})\n  { 'c2': 'Green'}\n  \"\"\"\n", "canonical_solution": "  \n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "entry_point": "drop_empty", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    assert candidate({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n    assert candidate({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n\n", "language": "python", "description": "Write a function to drop empty items from a given dictionary."}
{"task_id": "MBPP/466", "prompt": "\n\ndef find_peak(arr, n):\n\t\"\"\"\n\tWrite a function to find the peak element in the given array.\n\t>>> find_peak([1, 3, 20, 4, 1, 0], 6)\n\t2\n\t>>> find_peak([2, 3, 4, 5, 6], 5)\n\t4\n\t>>> find_peak([8, 9, 11, 12, 14, 15], 6)\n\t5\n\t\"\"\"\n", "canonical_solution": "\tdef find_peak_util(arr, low, high, n): \n\t\tmid = low + (high - low)/2\n\t\tmid = int(mid) \n\t\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n\t\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \n\t\t\treturn mid \n\t\telif (mid > 0 and arr[mid - 1] > arr[mid]): \n\t\t\treturn find_peak_util(arr, low, (mid - 1), n) \n\t\telse: \n\t\t\treturn find_peak_util(arr, (mid + 1), high, n) \n\t \n\treturn find_peak_util(arr, 0, n - 1, n) ", "entry_point": "find_peak", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 20, 4, 1, 0], 6) == 2\n    assert candidate([2, 3, 4, 5, 6], 5) == 4\n    assert candidate([8, 9, 11, 12, 14, 15], 6) == 5 \n\n", "language": "python", "description": "Write a function to find the peak element in the given array."}
{"task_id": "MBPP/467", "prompt": "\n\ndef decimal_to_Octal(deciNum):\n    \"\"\"\n    Write a python function to convert decimal number to octal number.\n    >>> decimal_to_Octal(10)\n    12\n    >>> decimal_to_Octal(2)\n    2\n    >>> decimal_to_Octal(33)\n    41\n    \"\"\"\n", "canonical_solution": "    \n    octalNum = 0\n    countval = 1;\n    dNo = deciNum;\n    while (deciNum!= 0):\n        remainder= deciNum % 8;\n        octalNum+= remainder*countval;\n        countval= countval*10;\n        deciNum //= 8; \n    return (octalNum)", "entry_point": "decimal_to_Octal", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n    assert candidate(33) == 41\n\n", "language": "python", "description": "Write a python function to convert decimal number to octal number."}
{"task_id": "MBPP/468", "prompt": "\n\ndef max_product(arr, n ):\n\t\"\"\"\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t>>> max_product([3, 100, 4, 5, 150, 6], 6)\n\t45000\n\t>>> max_product([4, 42, 55, 68, 80], 5)\n\t50265600\n\t>>> max_product([10, 22, 9, 33, 21, 50, 41, 60], 8)\n\t21780000\n\t\"\"\"\n", "canonical_solution": "\t \n\tmpis =[0] * (n) \n\tfor i in range(n): \n\t\tmpis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \n\treturn max(mpis)", "entry_point": "max_product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 100, 4, 5, 150, 6], 6) == 45000 \n    assert candidate([4, 42, 55, 68, 80], 5) == 50265600\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 \n\n", "language": "python", "description": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array."}
{"task_id": "MBPP/469", "prompt": "\n\ndef max_profit(price, k):\n    \"\"\"\n    Write a function to find the maximum profit earned from a maximum of k stock transactions\n    >>> max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n    10\n    >>> max_profit([2, 4, 7, 5, 4, 3, 5], 2)\n    7\n    >>> max_profit([10, 6, 8, 4, 2], 2)\n    2\n    \"\"\"\n", "canonical_solution": "    \n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n                max_so_far = 0\n                for x in range(j):\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\n                    if max_so_far < curr_price:\n                        max_so_far = curr_price\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\n    return final_profit[k][n-1]", "entry_point": "max_profit", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n    assert candidate([2, 4, 7, 5, 4, 3, 5], 2) == 7\n    assert candidate([10, 6, 8, 4, 2], 2) == 2\n\n", "language": "python", "description": "Write a function to find the maximum profit earned from a maximum of k stock transactions"}
{"task_id": "MBPP/470", "prompt": "\n\ndef add_pairwise(test_tup):\n  \"\"\"\n  Write a function to find the pairwise addition of the elements of the given tuples.\n  >>> add_pairwise((1, 5, 7, 8, 10))\n  (6, 12, 15, 18)\n  >>> add_pairwise((2, 6, 8, 9, 11))\n  (8, 14, 17, 20)\n  >>> add_pairwise((3, 7, 9, 10, 12))\n  (10, 16, 19, 22)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "entry_point": "add_pairwise", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n\n", "language": "python", "description": "Write a function to find the pairwise addition of the elements of the given tuples."}
{"task_id": "MBPP/471", "prompt": "\n\ndef find_remainder(arr, lens, n):\n    \"\"\"\n    Write a python function to find remainder of array multiplication divided by n.\n    >>> find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11)\n    9\n    >>> find_remainder([1,1,1],3,1)\n    0\n    >>> find_remainder([1,2,1],3,2)\n    0\n    \"\"\"\n", "canonical_solution": "     \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ", "entry_point": "find_remainder", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n    assert candidate([1,1,1],3,1) == 0\n    assert candidate([1,2,1],3,2) == 0\n\n", "language": "python", "description": "Write a python function to find remainder of array multiplication divided by n."}
{"task_id": "MBPP/472", "prompt": "\n\ndef check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    >>> check_Consecutive([1,2,3,4,5])\n    True\n    >>> check_Consecutive([1,2,3,5,6])\n    False\n    >>> check_Consecutive([1,2,1])\n    False\n    \"\"\"\n", "canonical_solution": "     \n    return sorted(l) == list(range(min(l),max(l)+1)) ", "entry_point": "check_Consecutive", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5]) == True\n    assert candidate([1,2,3,5,6]) == False\n    assert candidate([1,2,1]) == False\n\n", "language": "python", "description": "Write a python function to check whether the given list contains consecutive numbers or not."}
{"task_id": "MBPP/473", "prompt": "\n\ndef tuple_intersection(test_list1, test_list2):\n  \"\"\"\n  Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n  >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)])\n  {(4, 5), (3, 4), (5, 6)}\n  >>> tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)])\n  {(4, 7), (1, 4)}\n  >>> tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)])\n  {(1, 3), (2, 3)}\n  \"\"\"\n", "canonical_solution": "  \n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)", "entry_point": "tuple_intersection", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    assert candidate([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n    assert candidate([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n\n", "language": "python", "description": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order."}
{"task_id": "MBPP/474", "prompt": "\n\ndef replace_char(str1,ch,newch):\n \"\"\"\n Write a function to replace characters in a string.\n >>> replace_char(\"polygon\",'y','l')\n (\"pollgon\")\n >>> replace_char(\"character\",'c','a')\n (\"aharaater\")\n >>> replace_char(\"python\",'l','a')\n (\"python\")\n \"\"\"\n", "canonical_solution": " \n str2 = str1.replace(ch, newch)\n return str2", "entry_point": "replace_char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"polygon\",'y','l')==(\"pollgon\")\n    assert candidate(\"character\",'c','a')==(\"aharaater\")\n    assert candidate(\"python\",'l','a')==(\"python\")\n\n", "language": "python", "description": "Write a function to replace characters in a string."}
{"task_id": "MBPP/475", "prompt": "\n\ndef sort_counter(dict1):\n \"\"\"\n Write a function to sort counter by value.\n >>> sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})\n [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n >>> sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})\n [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n >>> sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})\n [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n \"\"\"\n", "canonical_solution": " from collections import Counter\n \n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter", "entry_point": "sort_counter", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert candidate({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert candidate({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n\n", "language": "python", "description": "Write a function to sort counter by value."}
{"task_id": "MBPP/476", "prompt": "\n\ndef big_sum(nums):\n      \"\"\"\n      Write a python function to find the sum of the largest and smallest value in a given array.\n      >>> big_sum([1,2,3])\n      4\n      >>> big_sum([-1,2,3,4])\n      3\n      >>> big_sum([2,3,6])\n      8\n      \"\"\"\n", "canonical_solution": "      \n      sum= max(nums)+min(nums)\n      return sum", "entry_point": "big_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3]) == 4\n    assert candidate([-1,2,3,4]) == 3\n    assert candidate([2,3,6]) == 8\n\n", "language": "python", "description": "Write a python function to find the sum of the largest and smallest value in a given array."}
{"task_id": "MBPP/477", "prompt": "\n\ndef is_lower(string):\n  \"\"\"\n  Write a python function to convert the given string to lower case.\n  >>> is_lower(\"InValid\")\n  \"invalid\"\n  >>> is_lower(\"TruE\")\n  \"true\"\n  >>> is_lower(\"SenTenCE\")\n  \"sentence\"\n  \"\"\"\n", "canonical_solution": "  \n  return (string.lower())", "entry_point": "is_lower", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"InValid\") == \"invalid\"\n    assert candidate(\"TruE\") == \"true\"\n    assert candidate(\"SenTenCE\") == \"sentence\"\n\n", "language": "python", "description": "Write a python function to convert the given string to lower case."}
{"task_id": "MBPP/478", "prompt": "\n\ndef remove_lowercase(str1):\n \"\"\"\n Write a function to remove lowercase substrings from a given string.\n >>> remove_lowercase(\"PYTHon\")\n ('PYTH')\n >>> remove_lowercase(\"FInD\")\n ('FID')\n >>> remove_lowercase(\"STRinG\")\n ('STRG')\n \"\"\"\n", "canonical_solution": " import re\n \n remove_lower = lambda text: re.sub('[a-z]', '', text)\n result =  remove_lower(str1)\n return result", "entry_point": "remove_lowercase", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"PYTHon\")==('PYTH')\n    assert candidate(\"FInD\")==('FID')\n    assert candidate(\"STRinG\")==('STRG')\n\n", "language": "python", "description": "Write a function to remove lowercase substrings from a given string."}
{"task_id": "MBPP/479", "prompt": "\n\ndef first_Digit(n) :\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    >>> first_Digit(123)\n    1\n    >>> first_Digit(456)\n    4\n    >>> first_Digit(12)\n    1\n    \"\"\"\n", "canonical_solution": "      \n    while n >= 10:  \n        n = n / 10; \n    return int(n) ", "entry_point": "first_Digit", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(123) == 1\n    assert candidate(456) == 4\n    assert candidate(12) == 1\n\n", "language": "python", "description": "Write a python function to find the first digit of a given number."}
{"task_id": "MBPP/480", "prompt": "\n\ndef get_max_occuring_char(str1):\n  \"\"\"\n  Write a python function to find the maximum occurring character in a given string.\n  >>> get_max_occuring_char(\"data\")\n  \"a\"\n  >>> get_max_occuring_char(\"create\")\n  \"e\"\n  >>> get_max_occuring_char(\"brilliant girl\")\n  \"i\"\n  \"\"\"\n", "canonical_solution": "  \n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1;\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "entry_point": "get_max_occuring_char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"data\") == \"a\"\n    assert candidate(\"create\") == \"e\"\n    assert candidate(\"brilliant girl\") == \"i\"\n\n", "language": "python", "description": "Write a python function to find the maximum occurring character in a given string."}
{"task_id": "MBPP/481", "prompt": "\n\ndef is_subset_sum(set, n, sum):\n\t\"\"\"\n\tWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\t>>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9)\n\tTrue\n\t>>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30)\n\tFalse\n\t>>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15)\n\tTrue\n\t\"\"\"\n", "canonical_solution": "\t\n\tif (sum == 0):\n\t\treturn True\n\tif (n == 0):\n\t\treturn False\n\tif (set[n - 1] > sum):\n\t\treturn is_subset_sum(set, n - 1, sum)\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])", "entry_point": "is_subset_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 9) == True\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 30) == False\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 15) == True\n\n", "language": "python", "description": "Write a function to determine if there is a subset of the given set with sum equal to the given sum."}
{"task_id": "MBPP/482", "prompt": "\n\ndef match(text):\n\t\t\"\"\"\n\t\tWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\t\t>>> match(\"Geeks\")\n\t\t'Yes'\n\t\t>>> match(\"geeksforGeeks\")\n\t\t'Yes'\n\t\t>>> match(\"geeks\")\n\t\t'No'\n\t\t\"\"\"\n", "canonical_solution": "\t\timport re \n\t\t \n\t\tpattern = '[A-Z]+[a-z]+$'\n\t\tif re.search(pattern, text): \n\t\t\t\treturn('Yes') \n\t\telse: \n\t\t\t\treturn('No') ", "entry_point": "match", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"Geeks\") == 'Yes'\n    assert candidate(\"geeksforGeeks\") == 'Yes'\n    assert candidate(\"geeks\") == 'No'\n\n", "language": "python", "description": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex."}
{"task_id": "MBPP/483", "prompt": "\n\ndef first_Factorial_Divisible_Number(x):\n    \"\"\"\n    Write a python function to find the first natural number whose factorial is divisible by x.\n    >>> first_Factorial_Divisible_Number(10)\n    5\n    >>> first_Factorial_Divisible_Number(15)\n    5\n    >>> first_Factorial_Divisible_Number(5)\n    4\n    \"\"\"\n", "canonical_solution": "     \n    i = 1;\n    fact = 1; \n    for i in range(1,x): \n        fact = fact * i \n        if (fact % x == 0): \n            break\n    return i ", "entry_point": "first_Factorial_Divisible_Number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 5\n    assert candidate(15) == 5\n    assert candidate(5) == 4\n\n", "language": "python", "description": "Write a python function to find the first natural number whose factorial is divisible by x."}
{"task_id": "MBPP/484", "prompt": "\n\ndef remove_matching_tuple(test_list1, test_list2):\n  \"\"\"\n  Write a function to remove the matching tuples from the given two tuples.\n  >>> remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])\n  [('you', '?')]\n  >>> remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')])\n  [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n  >>> remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')])\n  [('Its', 'been'), ('day', 'without')]\n  \"\"\"\n", "canonical_solution": "  \n  res = [sub for sub in test_list1 if sub not in test_list2]\n  return (res) ", "entry_point": "remove_matching_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n    assert candidate([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n    assert candidate([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]\n\n", "language": "python", "description": "Write a function to remove the matching tuples from the given two tuples."}
{"task_id": "MBPP/485", "prompt": "\n\ndef largest_palindrome(A, n) :\n\t\"\"\"\n\tWrite a function to find the largest palindromic number in the given array.\n\t>>> largest_palindrome([1, 232, 54545, 999991], 4)\n\t54545\n\t>>> largest_palindrome([1, 2, 3, 4, 5, 50], 6)\n\t5\n\t>>> largest_palindrome([1, 3, 7, 9, 45], 5)\n\t9\n\t\"\"\"\n", "canonical_solution": "\tdef is_palindrome(n) : \n\t\tdivisor = 1\n\t\twhile (n / divisor >= 10) : \n\t\t\tdivisor *= 10\n\t\twhile (n != 0) : \n\t\t\tleading = n // divisor \n\t\t\ttrailing = n % 10\n\t\t\tif (leading != trailing) : \n\t\t\t\treturn False\n\t\t\tn = (n % divisor) // 10\n\t\t\tdivisor = divisor // 100\n\t\treturn True\n\t \n\tA.sort() \n\tfor i in range(n - 1, -1, -1) : \n\t\tif (is_palindrome(A[i])) : \n\t\t\treturn A[i] \n\treturn -1", "entry_point": "largest_palindrome", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 232, 54545, 999991], 4) == 54545\n    assert candidate([1, 2, 3, 4, 5, 50], 6) == 5\n    assert candidate([1, 3, 7, 9, 45], 5)  == 9\n\n", "language": "python", "description": "Write a function to find the largest palindromic number in the given array."}
{"task_id": "MBPP/486", "prompt": "\n\ndef binomial_probability(n, k, p):\n\t\"\"\"\n\tWrite a function to compute binomial probability for the given number.\n\t>>> binomial_probability(10, 5, 1.0/3)\n\t0.13656454808718185\n\t>>> binomial_probability(11, 6, 2.0/4)\n\t0.2255859375\n\t>>> binomial_probability(12, 7, 3.0/5)\n\t0.227030335488\n\t\"\"\"\n", "canonical_solution": "\tdef nCr(n, r): \n\t\tif (r > n / 2): \n\t\t\tr = n - r \n\t\tanswer = 1 \n\t\tfor i in range(1, r + 1): \n\t\t\tanswer *= (n - r + i) \n\t\t\tanswer /= i \n\t\treturn answer \n\t \n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ", "entry_point": "binomial_probability", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10, 5, 1.0/3) == 0.13656454808718185\n    assert candidate(11, 6, 2.0/4) == 0.2255859375\n    assert candidate(12, 7, 3.0/5) == 0.227030335488\n\n", "language": "python", "description": "Write a function to compute binomial probability for the given number."}
{"task_id": "MBPP/487", "prompt": "\n\ndef sort_tuple(tup):\n\t\"\"\"\n\tWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\t>>> sort_tuple([(1, 3), (3, 2), (2, 1)] )\n\t[(2, 1), (3, 2), (1, 3)]\n\t>>> sort_tuple([(2, 4), (3, 3), (1, 1)] )\n\t[(1, 1), (3, 3), (2, 4)]\n\t>>> sort_tuple([(3, 9), (6, 7), (4, 3)] )\n\t[(4, 3), (6, 7), (3, 9)]\n\t\"\"\"\n", "canonical_solution": "\t \n\tlst = len(tup) \n\tfor i in range(0, lst): \n\t\tfor j in range(0, lst-i-1): \n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \n\t\t\t\ttemp = tup[j] \n\t\t\t\ttup[j]= tup[j + 1] \n\t\t\t\ttup[j + 1]= temp \n\treturn tup", "entry_point": "sort_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n    assert candidate([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\n    assert candidate([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]\n\n", "language": "python", "description": "Write a function to sort a list of tuples in increasing order by the last element in each tuple."}
