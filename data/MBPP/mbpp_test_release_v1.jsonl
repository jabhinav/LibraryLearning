{"task_id": "MBPP/488", "prompt": "\n\ndef area_pentagon(a):\n  \"\"\"\n  Write a function to find the area of a pentagon.\n  >>> area_pentagon(5)\n  43.01193501472417\n  >>> area_pentagon(10)\n  172.0477400588967\n  >>> area_pentagon(15)\n  387.10741513251753\n  \"\"\"\n", "canonical_solution": "  import math\n  \n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  return area", "entry_point": "area_pentagon", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5)==43.01193501472417\n    assert candidate(10)==172.0477400588967\n    assert candidate(15)==387.10741513251753\n\n", "language": "python", "description": "Write a function to find the area of a pentagon."}
{"task_id": "MBPP/489", "prompt": "\n\ndef frequency_Of_Largest(n,arr):\n    \"\"\"\n    Write a python function to find the frequency of the largest value in a given array.\n    >>> frequency_Of_Largest(5,[1,2,3,4,4])\n    2\n    >>> frequency_Of_Largest(3,[5,6,5])\n    1\n    >>> frequency_Of_Largest(4,[2,7,7,7])\n    3\n    \"\"\"\n", "canonical_solution": "     \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ", "entry_point": "frequency_Of_Largest", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5,[1,2,3,4,4]) == 2\n    assert candidate(3,[5,6,5]) == 1\n    assert candidate(4,[2,7,7,7]) == 3\n\n", "language": "python", "description": "Write a python function to find the frequency of the largest value in a given array."}
{"task_id": "MBPP/490", "prompt": "\n\ndef extract_symmetric(test_list):\n  \"\"\"\n  Write a function to extract all the pairs which are symmetric in the given tuple list.\n  >>> extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] )\n  {(8, 9), (6, 7)}\n  >>> extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] )\n  {(9, 10), (7, 8)}\n  >>> extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] )\n  {(8, 9), (10, 11)}\n  \"\"\"\n", "canonical_solution": "  \n  temp = set(test_list) & {(b, a) for a, b in test_list}\n  res = {(a, b) for a, b in temp if a < b}\n  return (res) ", "entry_point": "extract_symmetric", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n    assert candidate([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\n    assert candidate([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}\n\n", "language": "python", "description": "Write a function to extract all the pairs which are symmetric in the given tuple list."}
{"task_id": "MBPP/491", "prompt": "\n\ndef sum_gp(a,n,r):\n \"\"\"\n Write a function to find the sum of geometric progression series.\n >>> sum_gp(1,5,2)\n 31\n >>> sum_gp(1,5,4)\n 341\n >>> sum_gp(2,6,3)\n 728\n \"\"\"\n", "canonical_solution": " import math\n \n total = (a * (1 - math.pow(r, n ))) / (1- r)\n return total", "entry_point": "sum_gp", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,5,2)==31\n    assert candidate(1,5,4)==341\n    assert candidate(2,6,3)==728\n\n", "language": "python", "description": "Write a function to find the sum of geometric progression series."}
{"task_id": "MBPP/492", "prompt": "\n\ndef binary_search(item_list,item):\n\t\"\"\"\n\tWrite a function to search an element in the given array by using binary search.\n\t>>> binary_search([1,2,3,5,8], 6)\n\tFalse\n\t>>> binary_search([7, 8, 9, 10, 13], 10)\n\tTrue\n\t>>> binary_search([11, 13, 14, 19, 22, 36], 23)\n\tFalse\n\t\"\"\"\n", "canonical_solution": "\t\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t\tfound = True\n\t\telse:\n\t\t\tif item < item_list[mid]:\n\t\t\t\tlast = mid - 1\n\t\t\telse:\n\t\t\t\tfirst = mid + 1\t\n\treturn found", "entry_point": "binary_search", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,5,8], 6) == False\n    assert candidate([7, 8, 9, 10, 13], 10) == True\n    assert candidate([11, 13, 14, 19, 22, 36], 23) == False\n\n", "language": "python", "description": "Write a function to search an element in the given array by using binary search."}
{"task_id": "MBPP/493", "prompt": "\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    \"\"\"\n    Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    >>> calculate_polygons(1,1, 4, 4, 3)\n    [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n    >>> calculate_polygons(5,4,7,9,8)\n    [[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\n    >>> calculate_polygons(9,6,4,3,2)\n    [[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]\n    \"\"\"\n", "canonical_solution": "    import math\n    \n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl   \n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            p2x = startx\n            p2y = starty + (3 * p)\n            p3x = startx + b\n            p3y = starty + h\n            p4x = startx + w\n            p4y = starty + (3 * p)\n            p5x = startx + w\n            p5y = starty + p\n            p6x = startx + b\n            p6y = starty\n            poly = [\n                (p1x, p1y),\n                (p2x, p2y),\n                (p3x, p3y),\n                (p4x, p4y),\n                (p5x, p5y),\n                (p6x, p6y),\n                (p1x, p1y)]\n            polygons.append(poly)\n            counter += 1\n            startx += w\n        starty += yoffset\n        row += 1\n    return polygons", "entry_point": "calculate_polygons", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n    assert candidate(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\n    assert candidate(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]\n\n", "language": "python", "description": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates."}
{"task_id": "MBPP/494", "prompt": "\n\ndef binary_to_integer(test_tup):\n  \"\"\"\n  Write a function to convert the given binary tuple to integer.\n  >>> binary_to_integer((1, 1, 0, 1, 0, 0, 1))\n  '105'\n  >>> binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1))\n  '101'\n  >>> binary_to_integer((1, 1, 0, 1, 0, 1))\n  '53'\n  \"\"\"\n", "canonical_solution": "  \n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\n  return (str(res)) ", "entry_point": "binary_to_integer", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 1, 0, 1, 0, 0, 1)) == '105'\n    assert candidate((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\n    assert candidate((1, 1, 0, 1, 0, 1)) == '53'\n\n", "language": "python", "description": "Write a function to convert the given binary tuple to integer."}
{"task_id": "MBPP/495", "prompt": "\n\ndef remove_lowercase(str1):\n  \"\"\"\n  Write a function to remove lowercase substrings from a given string by using regex.\n  >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n  'KDALOOOHLAJSI'\n  >>> remove_lowercase('ProducTnamEstreAmIngMediAplAYer')\n  'PTEAIMAAY'\n  >>> remove_lowercase('maNufacTuredbYSheZenTechNolOGIes')\n  'NTYSZTNOGI'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  remove_lower = lambda text: re.sub('[a-z]', '', text)\n  result =  remove_lower(str1)\n  return (result)", "entry_point": "remove_lowercase", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    assert candidate('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\n    assert candidate('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'\n\n", "language": "python", "description": "Write a function to remove lowercase substrings from a given string by using regex."}
{"task_id": "MBPP/496", "prompt": "\n\ndef heap_queue_smallest(nums,n):\n  \"\"\"\n  Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n  >>> heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)\n  [14, 22, 25]\n  >>> heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)\n  [14, 22]\n  >>> heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)\n  [14, 22, 22, 25, 35]\n  \"\"\"\n", "canonical_solution": "  import heapq as hq\n  \n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums", "entry_point": "heap_queue_smallest", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]\n\n", "language": "python", "description": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm."}
{"task_id": "MBPP/497", "prompt": "\n\ndef surfacearea_cone(r,h):\n  \"\"\"\n  Write a function to find the surface area of a cone.\n  >>> surfacearea_cone(5,12)\n  282.7433388230814\n  >>> surfacearea_cone(10,15)\n  880.5179353159282\n  >>> surfacearea_cone(19,17)\n  2655.923961165254\n  \"\"\"\n", "canonical_solution": "  import math\n  \n  l = math.sqrt(r * r + h * h)\n  SA = math.pi * r * (r + l)\n  return SA", "entry_point": "surfacearea_cone", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5,12)==282.7433388230814\n    assert candidate(10,15)==880.5179353159282\n    assert candidate(19,17)==2655.923961165254\n\n", "language": "python", "description": "Write a function to find the surface area of a cone."}
{"task_id": "MBPP/498", "prompt": "\n\ndef gcd(x, y):\n    \"\"\"\n    Write a python function to find gcd of two positive integers.\n    >>> gcd(12, 17)\n    1\n    >>> gcd(4,6)\n    2\n    >>> gcd(2,9)\n    1\n    \"\"\"\n", "canonical_solution": "    \n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break  \n    return gcd", "entry_point": "gcd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12, 17) == 1\n    assert candidate(4,6) == 2\n    assert candidate(2,9) == 1\n\n", "language": "python", "description": "Write a python function to find gcd of two positive integers."}
{"task_id": "MBPP/499", "prompt": "\n\ndef diameter_circle(r):\n  \"\"\"\n  Write a function to find the diameter of a circle.\n  >>> diameter_circle(10)\n  20\n  >>> diameter_circle(40)\n  80\n  >>> diameter_circle(15)\n  30\n  \"\"\"\n", "canonical_solution": "  \n  diameter=2*r\n  return diameter", "entry_point": "diameter_circle", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10)==20\n    assert candidate(40)==80\n    assert candidate(15)==30\n\n", "language": "python", "description": "Write a function to find the diameter of a circle."}
{"task_id": "MBPP/500", "prompt": "\n\ndef concatenate_elements(list):\n  \"\"\"\n  Write a function to concatenate all elements of the given list into a string.\n  >>> concatenate_elements(['hello','there','have','a','rocky','day'] )\n  '  hello there have a rocky day'\n  >>> concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] )\n  '  Hi there How are you'\n  >>> concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] )\n  '  Part of the journey is end'\n  \"\"\"\n", "canonical_solution": "  \n  ans = ' '\n  for i in list:\n    ans = ans+ ' '+i\n  return (ans) ", "entry_point": "concatenate_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n    assert candidate([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\n    assert candidate([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'\n\n", "language": "python", "description": "Write a function to concatenate all elements of the given list into a string."}
{"task_id": "MBPP/501", "prompt": "\n\ndef num_comm_div(x,y):\n  \"\"\"\n  Write a python function to find common divisor between two numbers in a given pair.\n  >>> num_comm_div(2,4)\n  2\n  >>> num_comm_div(2,8)\n  2\n  >>> num_comm_div(12,24)\n  6\n  \"\"\"\n", "canonical_solution": "  def ngcd(x,y):\n      i=1\n      while(i<=x and i<=y):\n          if(x%i==0 and y%i == 0):\n              gcd=i;\n          i+=1\n      return gcd;\n  \n  n = ngcd(x,y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while(i <= z):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result", "entry_point": "num_comm_div", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2,4) == 2\n    assert candidate(2,8) == 2\n    assert candidate(12,24) == 6\n\n", "language": "python", "description": "Write a python function to find common divisor between two numbers in a given pair."}
{"task_id": "MBPP/502", "prompt": "\n\ndef find(n,m):\n  \"\"\"\n  Write a python function to find remainder of two numbers.\n  >>> find(3,3)\n  0\n  >>> find(10,3)\n  1\n  >>> find(16,5)\n  1\n  \"\"\"\n", "canonical_solution": "  \n  r = n%m\n  return (r)", "entry_point": "find", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3,3) == 0\n    assert candidate(10,3) == 1\n    assert candidate(16,5) == 1\n\n", "language": "python", "description": "Write a python function to find remainder of two numbers."}
{"task_id": "MBPP/503", "prompt": "\n\ndef add_consecutive_nums(nums):\n    \"\"\"\n    Write a function to add consecutive numbers of a given list.\n    >>> add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])\n    [2, 4, 7, 8, 9, 11, 13]\n    >>> add_consecutive_nums([4, 5, 8, 9, 6, 10])\n    [9, 13, 17, 15, 16]\n    >>> add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [3, 5, 7, 9, 11, 13, 15, 17, 19]\n    \"\"\"\n", "canonical_solution": "    \n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "entry_point": "add_consecutive_nums", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n    assert candidate([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]\n\n", "language": "python", "description": "Write a function to add consecutive numbers of a given list."}
{"task_id": "MBPP/504", "prompt": "\n\ndef sum_Of_Series(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n natural numbers.\n    >>> sum_Of_Series(5)\n    225\n    >>> sum_Of_Series(2)\n    9\n    >>> sum_Of_Series(3)\n    36\n    \"\"\"\n", "canonical_solution": "     \n    sum = 0\n    for i in range(1,n + 1): \n        sum += i * i*i       \n    return sum", "entry_point": "sum_Of_Series", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 225\n    assert candidate(2) == 9\n    assert candidate(3) == 36\n\n", "language": "python", "description": "Write a python function to find the cube sum of first n natural numbers."}
{"task_id": "MBPP/505", "prompt": "\n\ndef re_order(A):\n    \"\"\"\n    Write a function to move all zeroes to the end of the given array.\n    >>> re_order([6, 0, 8, 2, 3, 0, 4, 0, 1])\n    [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    >>> re_order([4, 0, 2, 7, 0, 9, 0, 12, 0])\n    [4, 2, 7, 9, 12, 0, 0, 0, 0]\n    >>> re_order([3, 11, 0, 74, 14, 0, 1, 0, 2])\n    [3, 11, 74, 14, 1, 2, 0, 0, 0]\n    \"\"\"\n", "canonical_solution": "    \n    k = 0\n    for i in A:\n        if i:\n            A[k] = i\n            k = k + 1\n    for i in range(k, len(A)):\n        A[i] = 0\n    return A", "entry_point": "re_order", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    assert candidate([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\n    assert candidate([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]\n\n", "language": "python", "description": "Write a function to move all zeroes to the end of the given array."}
{"task_id": "MBPP/506", "prompt": "\n\ndef permutation_coefficient(n, k):\n\t\"\"\"\n\tWrite a function to calculate the permutation coefficient of given p(n, k).\n\t>>> permutation_coefficient(10, 2)\n\t90\n\t>>> permutation_coefficient(10, 3)\n\t720\n\t>>> permutation_coefficient(10, 1)\n\t10\n\t\"\"\"\n", "canonical_solution": "\t \n\tP = [[0 for i in range(k + 1)] \n\t\t\tfor j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\telse: \n\t\t\t\tP[i][j] = P[i - 1][j] + ( \n\t\t\t\t\t\tj * P[i - 1][j - 1]) \n\t\t\tif (j < k): \n\t\t\t\tP[i][j + 1] = 0\n\treturn P[n][k] ", "entry_point": "permutation_coefficient", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10, 2) == 90\n    assert candidate(10, 3) == 720\n    assert candidate(10, 1) == 10\n\n", "language": "python", "description": "Write a function to calculate the permutation coefficient of given p(n, k)."}
{"task_id": "MBPP/507", "prompt": "\n\ndef remove_words(list1, removewords):\n    \"\"\"\n    Write a function to remove specific words from a given list.\n    >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])\n    ['red', 'green', 'blue', 'black']\n    >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])\n    ['red', 'green', 'blue', 'white']\n    >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])\n    ['red', 'green', 'black', 'orange']\n    \"\"\"\n", "canonical_solution": "    \n    for word in list(list1):\n        if word in removewords:\n            list1.remove(word)\n    return list1  ", "entry_point": "remove_words", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']\n\n", "language": "python", "description": "Write a function to remove specific words from a given list."}
{"task_id": "MBPP/508", "prompt": "\n\ndef same_order(l1, l2):\n    \"\"\"\n    Write a function to check if the common elements between two given lists are in the same order or not.\n    >>> same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])\n    True\n    >>> same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])\n    False\n    >>> same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])\n    True\n    \"\"\"\n", "canonical_solution": "    \n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    l2 = [e for e in l2 if e in common_elements]\n    return l1 == l2", "entry_point": "same_order", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n    assert candidate([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\n    assert candidate([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\n", "language": "python", "description": "Write a function to check if the common elements between two given lists are in the same order or not."}
{"task_id": "MBPP/509", "prompt": "\n\ndef average_Odd(n) :\n    \"\"\"\n    Write a python function to find the average of odd numbers till a given odd number.\n    >>> average_Odd(9)\n    5\n    >>> average_Odd(5)\n    3\n    >>> average_Odd(11)\n    6\n    \"\"\"\n", "canonical_solution": "     \n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    while (n>=1) : \n        count=count+1\n        sm = sm + n \n        n = n-2\n    return sm//count ", "entry_point": "average_Odd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(9) == 5\n    assert candidate(5) == 3\n    assert candidate(11) == 6\n\n", "language": "python", "description": "Write a python function to find the average of odd numbers till a given odd number."}
{"task_id": "MBPP/510", "prompt": "\n\ndef no_of_subsequences(arr, k):\n\t\"\"\"\n\tWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\t>>> no_of_subsequences([1,2,3,4], 10)\n\t11\n\t>>> no_of_subsequences([4,8,7,2], 50)\n\t9\n\t>>> no_of_subsequences([5,6,7,8], 15)\n\t4\n\t\"\"\"\n", "canonical_solution": "\t \n\tn = len(arr) \n\tdp = [[0 for i in range(n + 1)] \n\t\t\tfor j in range(k + 1)] \n\tfor i in range(1, k + 1): \n\t\tfor j in range(1, n + 1): \n\t\t\tdp[i][j] = dp[i][j - 1] \n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n\treturn dp[k][n]", "entry_point": "no_of_subsequences", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4], 10) == 11\n    assert candidate([4,8,7,2], 50) == 9\n    assert candidate([5,6,7,8], 15) == 4\n\n", "language": "python", "description": "Write a function to find the number of subsequences having product smaller than k for the given non negative array."}
{"task_id": "MBPP/511", "prompt": "\n\ndef find_Min_Sum(num):\n    \"\"\"\n    Write a python function to find minimum sum of factors of a given number.\n    >>> find_Min_Sum(12)\n    7\n    >>> find_Min_Sum(105)\n    15\n    >>> find_Min_Sum(2)\n    2\n    \"\"\"\n", "canonical_solution": "     \n    sum = 0\n    i = 2\n    while(i * i <= num): \n        while(num % i == 0): \n            sum += i \n            num /= i \n        i += 1\n    sum += num \n    return sum", "entry_point": "find_Min_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12) == 7\n    assert candidate(105) == 15\n    assert candidate(2) == 2\n\n", "language": "python", "description": "Write a python function to find minimum sum of factors of a given number."}
{"task_id": "MBPP/512", "prompt": "\n\ndef count_element_freq(test_tuple):\n  \"\"\"\n  Write a function to count the element frequency in the mixed nested tuple.\n  >>> count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) )\n  {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n  >>> count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) )\n  {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n  >>> count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) )\n  {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n  \"\"\"\n", "canonical_solution": "  def flatten(test_tuple): \n  \tfor tup in test_tuple: \n  \t\tif isinstance(tup, tuple): \n  \t\t\tyield from flatten(tup) \n  \t\telse: \n  \t\t\tyield tup \n  \n  res = {}\n  for ele in flatten(test_tuple):\n    if ele not in res:\n      res[ele] = 0\n    res[ele] += 1\n  return (res) ", "entry_point": "count_element_freq", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n    assert candidate((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n    assert candidate((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n\n", "language": "python", "description": "Write a function to count the element frequency in the mixed nested tuple."}
{"task_id": "MBPP/513", "prompt": "\n\ndef add_str(test_tup, K):\n  \"\"\"\n  Write a function to convert tuple into list by adding the given string after every element.\n  >>> add_str((5, 6, 7, 4, 9) , \"FDF\")\n  [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\n  >>> add_str((7, 8, 9, 10) , \"PF\")\n  [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\n  >>> add_str((11, 14, 12, 1, 4) , \"JH\")\n  [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']\n  \"\"\"\n", "canonical_solution": "  \n  res = [ele for sub in test_tup for ele in (sub, K)]\n  return (res) ", "entry_point": "add_str", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\n    assert candidate((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\n    assert candidate((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']\n\n", "language": "python", "description": "Write a function to convert tuple into list by adding the given string after every element."}
{"task_id": "MBPP/514", "prompt": "\n\ndef sum_elements(test_tup):\n  \"\"\"\n  Write a function to find the summation of tuple elements in the given tuple list.\n  >>> sum_elements((7, 8, 9, 1, 10, 7))\n  42\n  >>> sum_elements((1, 2, 3, 4, 5, 6))\n  21\n  >>> sum_elements((11, 12 ,13 ,45, 14))\n  95\n  \"\"\"\n", "canonical_solution": "  \n  res = sum(list(test_tup))\n  return (res) ", "entry_point": "sum_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((7, 8, 9, 1, 10, 7)) == 42\n    assert candidate((1, 2, 3, 4, 5, 6)) == 21\n    assert candidate((11, 12 ,13 ,45, 14)) == 95\n\n", "language": "python", "description": "Write a function to find the summation of tuple elements in the given tuple list."}
{"task_id": "MBPP/515", "prompt": "\n\ndef modular_sum(arr, n, m):\n\t\"\"\"\n\tWrite a function to check if there is a subset with sum divisible by m.\n\t>>> modular_sum([3, 1, 7, 5], 4, 6)\n\tTrue\n\t>>> modular_sum([1, 7], 2, 5)\n\tFalse\n\t>>> modular_sum([1, 6], 2, 5)\n\tFalse\n\t\"\"\"\n", "canonical_solution": "\t \n\tif (n > m): \n\t\treturn True\n\tDP = [False for i in range(m)] \n\tfor i in range(n): \n\t\tif (DP[0]): \n\t\t\treturn True\n\t\ttemp = [False for i in range(m)] \n\t\tfor j in range(m): \n\t\t\tif (DP[j] == True): \n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\n\t\tfor j in range(m): \n\t\t\tif (temp[j]): \n\t\t\t\tDP[j] = True\n\t\tDP[arr[i] % m] = True\n\treturn DP[0]", "entry_point": "modular_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 7, 5], 4, 6) == True\n    assert candidate([1, 7], 2, 5) == False\n    assert candidate([1, 6], 2, 5) == False\n\n", "language": "python", "description": "Write a function to check if there is a subset with sum divisible by m."}
{"task_id": "MBPP/516", "prompt": "\n\ndef radix_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using radix sort.\n    >>> radix_sort([15, 79, 25, 68, 37])\n    [15, 25, 37, 68, 79]\n    >>> radix_sort([9, 11, 8, 7, 3, 2])\n    [2, 3, 7, 8, 9, 11]\n    >>> radix_sort([36, 12, 24, 26, 29])\n    [12, 24, 26, 29, 36]\n    \"\"\"\n", "canonical_solution": "    \n    RADIX = 10\n    placement = 1\n    max_digit = max(nums)\n\n    while placement < max_digit:\n      buckets = [list() for _ in range( RADIX )]\n      for i in nums:\n        tmp = int((i / placement) % RADIX)\n        buckets[tmp].append(i)\n      a = 0\n      for b in range( RADIX ):\n        buck = buckets[b]\n        for i in buck:\n          nums[a] = i\n          a += 1\n      placement *= RADIX\n    return nums", "entry_point": "radix_sort", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\n    assert candidate([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\n    assert candidate([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]\n\n", "language": "python", "description": "Write a function to sort a list of elements using radix sort."}
{"task_id": "MBPP/517", "prompt": "\n\ndef largest_pos(list1):\n    \"\"\"\n    Write a python function to find the largest postive number from the given list.\n    >>> largest_pos([1,2,3,4,-1])\n    4\n    >>> largest_pos([0,1,2,-5,-1,6])\n    6\n    >>> largest_pos([0,0,1,0])\n    1\n    \"\"\"\n", "canonical_solution": "     \n    max = list1[0] \n    for x in list1: \n        if x > max : \n             max = x  \n    return max", "entry_point": "largest_pos", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,-1]) == 4\n    assert candidate([0,1,2,-5,-1,6]) == 6\n    assert candidate([0,0,1,0]) == 1\n\n", "language": "python", "description": "Write a python function to find the largest postive number from the given list."}
{"task_id": "MBPP/518", "prompt": "\n\ndef sqrt_root(num):\n \"\"\"\n Write a function to find the square root of a perfect number.\n >>> sqrt_root(4)\n 2\n >>> sqrt_root(16)\n 4\n >>> sqrt_root(400)\n 20\n \"\"\"\n", "canonical_solution": " import math\n \n sqrt_root = math.pow(num, 0.5)\n return sqrt_root ", "entry_point": "sqrt_root", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4)==2\n    assert candidate(16)==4\n    assert candidate(400)==20\n\n", "language": "python", "description": "Write a function to find the square root of a perfect number."}
{"task_id": "MBPP/519", "prompt": "\n\ndef volume_tetrahedron(num):\n\t\"\"\"\n\tWrite a function to calculate volume of a tetrahedron.\n\t>>> volume_tetrahedron(10)\n\t117.85\n\t>>> volume_tetrahedron(15)\n\t397.75\n\t>>> volume_tetrahedron(20)\n\t942.81\n\t\"\"\"\n", "canonical_solution": "\timport math\n\t\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\n\treturn round(volume, 2)", "entry_point": "volume_tetrahedron", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10)==117.85\n    assert candidate(15)==397.75\n    assert candidate(20)==942.81\n\n", "language": "python", "description": "Write a function to calculate volume of a tetrahedron."}
{"task_id": "MBPP/520", "prompt": "\n\ndef get_lcm(l):\n  \"\"\"\n  Write a function to find the lcm of the given array elements.\n  >>> get_lcm([2, 7, 3, 9, 4])\n  252\n  >>> get_lcm([1, 2, 8, 3])\n  24\n  >>> get_lcm([3, 8, 4, 10, 5])\n  120\n  \"\"\"\n", "canonical_solution": "  def find_lcm(num1, num2): \n  \tif(num1>num2): \n  \t\tnum = num1 \n  \t\tden = num2 \n  \telse: \n  \t\tnum = num2 \n  \t\tden = num1 \n  \trem = num % den \n  \twhile (rem != 0): \n  \t\tnum = den \n  \t\tden = rem \n  \t\trem = num % den \n  \tgcd = den \n  \tlcm = int(int(num1 * num2)/int(gcd)) \n  \treturn lcm \n  \n  num1 = l[0]\n  num2 = l[1]\n  lcm = find_lcm(num1, num2)\n  for i in range(2, len(l)):\n    lcm = find_lcm(lcm, l[i])\n  return lcm ", "entry_point": "get_lcm", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([2, 7, 3, 9, 4]) == 252\n    assert candidate([1, 2, 8, 3]) == 24\n    assert candidate([3, 8, 4, 10, 5]) == 120\n\n", "language": "python", "description": "Write a function to find the lcm of the given array elements."}
{"task_id": "MBPP/521", "prompt": "\n\ndef check_isosceles(x,y,z):\n  \"\"\"\n  Write a function to print check if the triangle is scalene or not.\n  >>> check_isosceles(6,8,12)\n  True\n  >>> check_isosceles(6,6,12)\n  False\n  >>> check_isosceles(6,15,20)\n  True\n  \"\"\"\n", "canonical_solution": "  \n  if x!=y & y!=z & z!=x:\n\t   return True\n  else:\n     return False", "entry_point": "check_isosceles", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6,8,12)==True\n    assert candidate(6,6,12)==False\n    assert candidate(6,15,20)==True\n\n", "language": "python", "description": "Write a function to print check if the triangle is scalene or not."}
{"task_id": "MBPP/522", "prompt": "\n\ndef lbs(arr):\n\t\"\"\"\n\tWrite a function to find the longest bitonic subsequence for the given array.\n\t>>> lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15])\n\t7\n\t>>> lbs([1, 11, 2, 10, 4, 5, 2, 1])\n\t6\n\t>>> lbs([80, 60, 30, 40, 20, 10])\n\t5\n\t\"\"\"\n", "canonical_solution": "\t \n\tn = len(arr) \n\tlis = [1 for i in range(n+1)] \n\tfor i in range(1 , n): \n\t\tfor j in range(0 , i): \n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \n\t\t\t\tlis[i] = lis[j] + 1\n\tlds = [1 for i in range(n+1)] \n\tfor i in reversed(range(n-1)): \n\t\tfor j in reversed(range(i-1 ,n)): \n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \n\t\t\t\tlds[i] = lds[j] + 1\n\tmaximum = lis[0] + lds[0] - 1\n\tfor i in range(1 , n): \n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \n\treturn maximum", "entry_point": "lbs", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\n    assert candidate([1, 11, 2, 10, 4, 5, 2, 1]) == 6\n    assert candidate([80, 60, 30, 40, 20, 10]) == 5\n\n", "language": "python", "description": "Write a function to find the longest bitonic subsequence for the given array."}
{"task_id": "MBPP/523", "prompt": "\n\ndef check_string(str1):\n    \"\"\"\n    Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n    >>> check_string('python')\n    ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\n    >>> check_string('123python')\n    ['String must have 1 upper case character.']\n    >>> check_string('123Python')\n    ['Valid string.']\n    \"\"\"\n", "canonical_solution": "    \n    messg = [\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\n    result = [x for x in [i(str1) for i in messg] if x != True]\n    if not result:\n        result.append('Valid string.')\n    return result  ", "entry_point": "check_string", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\n    assert candidate('123python')==['String must have 1 upper case character.']\n    assert candidate('123Python')==['Valid string.']\n\n", "language": "python", "description": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function."}
{"task_id": "MBPP/524", "prompt": "\n\ndef max_sum_increasing_subsequence(arr, n):\n\t\"\"\"\n\tWrite a function to find the sum of maximum increasing subsequence of the given array.\n\t>>> max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7)\n\t106\n\t>>> max_sum_increasing_subsequence([3, 4, 5, 10], 4)\n\t22\n\t>>> max_sum_increasing_subsequence([10, 5, 4, 3], 4)\n\t10\n\t\"\"\"\n", "canonical_solution": "\t \n\tmax = 0\n\tmsis = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tmsis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \n\t\t\t\tmsis[i] = msis[j] + arr[i] \n\tfor i in range(n): \n\t\tif max < msis[i]: \n\t\t\tmax = msis[i] \n\treturn max", "entry_point": "max_sum_increasing_subsequence", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7) == 106\n    assert candidate([3, 4, 5, 10], 4) == 22\n    assert candidate([10, 5, 4, 3], 4) == 10\n\n", "language": "python", "description": "Write a function to find the sum of maximum increasing subsequence of the given array."}
{"task_id": "MBPP/525", "prompt": "\n\ndef parallel_lines(line1, line2):\n  \"\"\"\n  Write a python function to check whether two given lines are parallel or not.\n  >>> parallel_lines([2,3,4], [2,3,8])\n  True\n  >>> parallel_lines([2,3,4], [4,-3,8])\n  False\n  >>> parallel_lines([3,3],[5,5])\n  True\n  \"\"\"\n", "canonical_solution": "  \n  return line1[0]/line1[1] == line2[0]/line2[1]", "entry_point": "parallel_lines", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([2,3,4], [2,3,8]) == True\n    assert candidate([2,3,4], [4,-3,8]) == False\n    assert candidate([3,3],[5,5]) == True\n\n", "language": "python", "description": "Write a python function to check whether two given lines are parallel or not."}
{"task_id": "MBPP/526", "prompt": "\n\ndef capitalize_first_last_letters(str1):\n     \"\"\"\n     Write a python function to capitalize first and last letters of each word of a given string.\n     >>> capitalize_first_last_letters(\"python\")\n     \"PythoN\"\n     >>> capitalize_first_last_letters(\"bigdata\")\n     \"BigdatA\"\n     >>> capitalize_first_last_letters(\"Hadoop\")\n     \"HadooP\"\n     \"\"\"\n", "canonical_solution": "     \n     str1 = result = str1.title()\n     result =  \"\"\n     for word in str1.split():\n        result += word[:-1] + word[-1].upper() + \" \"\n     return result[:-1]  ", "entry_point": "capitalize_first_last_letters", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"python\") == \"PythoN\"\n    assert candidate(\"bigdata\") == \"BigdatA\"\n    assert candidate(\"Hadoop\") == \"HadooP\"\n\n", "language": "python", "description": "Write a python function to capitalize first and last letters of each word of a given string."}
{"task_id": "MBPP/527", "prompt": "\n\ndef get_pairs_count(arr, n, sum):\n    \"\"\"\n    Write a function to find all pairs in an integer array whose sum is equal to a given number.\n    >>> get_pairs_count([1, 5, 7, -1, 5], 5, 6)\n    3\n    >>> get_pairs_count([1, 5, 7, -1], 4, 6)\n    2\n    >>> get_pairs_count([1, 1, 1, 1], 4, 2)\n    6\n    \"\"\"\n", "canonical_solution": "    \n    count = 0 \n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count", "entry_point": "get_pairs_count", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 5, 7, -1, 5], 5, 6) == 3\n    assert candidate([1, 5, 7, -1], 4, 6) == 2\n    assert candidate([1, 1, 1, 1], 4, 2) == 6\n\n", "language": "python", "description": "Write a function to find all pairs in an integer array whose sum is equal to a given number."}
{"task_id": "MBPP/528", "prompt": "\n\ndef min_length(list1):\n   \"\"\"\n   Write a function to find the list of lists with minimum length.\n   >>> min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n   (1, [0])\n   >>> min_length([[1], [5, 7], [10, 12, 14,15]])\n   (1, [1])\n   >>> min_length([[5], [15,20,25]])\n   (1, [5])\n   \"\"\"\n", "canonical_solution": "   \n   min_length = min(len(x) for x in  list1 )  \n   min_list = min((x) for x in   list1)\n   return(min_length, min_list)     ", "entry_point": "min_length", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    assert candidate([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\n    assert candidate([[5], [15,20,25]])==(1, [5])\n\n", "language": "python", "description": "Write a function to find the list of lists with minimum length."}
{"task_id": "MBPP/529", "prompt": "\n\ndef jacobsthal_lucas(n):\n\t\"\"\"\n\tWrite a function to find the nth jacobsthal-lucas number.\n\t>>> jacobsthal_lucas(5)\n\t31\n\t>>> jacobsthal_lucas(2)\n\t5\n\t>>> jacobsthal_lucas(4)\n\t17\n\t\"\"\"\n", "canonical_solution": "\t \n\tdp=[0] * (n + 1) \n\tdp[0] = 2\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \n\treturn dp[n]", "entry_point": "jacobsthal_lucas", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 31\n    assert candidate(2) == 5\n    assert candidate(4) == 17\n\n", "language": "python", "description": "Write a function to find the nth jacobsthal-lucas number."}
{"task_id": "MBPP/530", "prompt": "\n\ndef negative_count(nums):\n    \"\"\"\n    Write a function to find the ration of negative numbers in an array of integers.\n    >>> negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.31\n    >>> negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    0.31\n    >>> negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    0.44\n    \"\"\"\n", "canonical_solution": "    from array import array\n    \n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x < 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "entry_point": "negative_count", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44\n\n", "language": "python", "description": "Write a function to find the ration of negative numbers in an array of integers."}
{"task_id": "MBPP/531", "prompt": "\n\ndef min_coins(coins, m, V):\n    \"\"\"\n    Write a function to find minimum number of coins that make a given value.\n    >>> min_coins([9, 6, 5, 1] ,4,11)\n    2\n    >>> min_coins([4,5,6,7,8,9],6,9)\n    1\n    >>> min_coins([1, 2, 3],3,4)\n    2\n    \"\"\"\n", "canonical_solution": "    import sys \n     \n    if (V == 0): \n        return 0\n    res = sys.maxsize \n    for i in range(0, m): \n        if (coins[i] <= V): \n            sub_res = min_coins(coins, m, V-coins[i]) \n            if (sub_res != sys.maxsize and sub_res + 1 < res): \n                res = sub_res + 1  \n    return res ", "entry_point": "min_coins", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([9, 6, 5, 1] ,4,11)==2\n    assert candidate([4,5,6,7,8,9],6,9)==1\n    assert candidate([1, 2, 3],3,4)==2\n\n", "language": "python", "description": "Write a function to find minimum number of coins that make a given value."}
{"task_id": "MBPP/532", "prompt": "\n\ndef check_permutation(str1, str2):\n  \"\"\"\n  Write a function to check if the two given strings are permutations of each other.\n  >>> check_permutation(\"abc\", \"cba\")\n  True\n  >>> check_permutation(\"test\", \"ttew\")\n  False\n  >>> check_permutation(\"xxyz\", \"yxzx\")\n  True\n  \"\"\"\n", "canonical_solution": "  \n  n1=len(str1)\n  n2=len(str2)\n  if(n1!=n2):\n    return False\n  a=sorted(str1)\n  str1=\" \".join(a)\n  b=sorted(str2)\n  str2=\" \".join(b)\n  for i in range(0, n1, 1):\n    if(str1[i] != str2[i]):\n      return False\n  return True", "entry_point": "check_permutation", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"abc\", \"cba\") == True\n    assert candidate(\"test\", \"ttew\") == False\n    assert candidate(\"xxyz\", \"yxzx\") == True\n\n", "language": "python", "description": "Write a function to check if the two given strings are permutations of each other."}
{"task_id": "MBPP/533", "prompt": "\n\ndef remove_datatype(test_tuple, data_type):\n  \"\"\"\n  Write a function to remove particular data type elements from the given tuple.\n  >>> remove_datatype((4, 5, 4, 7.7, 1.2), int)\n  [7.7, 1.2]\n  >>> remove_datatype((7, 8, 9, \"SR\"), str)\n  [7, 8, 9]\n  >>> remove_datatype((7, 1.1, 2, 2.2), float)\n  [7, 2]\n  \"\"\"\n", "canonical_solution": "  \n  res = []\n  for ele in test_tuple:\n    if not isinstance(ele, data_type):\n      res.append(ele)\n  return (res) ", "entry_point": "remove_datatype", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\n    assert candidate((7, 8, 9, \"SR\"), str) == [7, 8, 9]\n    assert candidate((7, 1.1, 2, 2.2), float) == [7, 2]\n\n", "language": "python", "description": "Write a function to remove particular data type elements from the given tuple."}
{"task_id": "MBPP/534", "prompt": "\n\ndef search_literal(pattern,text):\n \"\"\"\n Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n >>> search_literal('python','python programming language')\n (0,6)\n >>> search_literal('programming','python programming language')\n (7,18)\n >>> search_literal('language','python programming language')\n (19,27)\n \"\"\"\n", "canonical_solution": " import re\n \n match = re.search(pattern, text)\n s = match.start()\n e = match.end()\n return (s, e)", "entry_point": "search_literal", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('python','python programming language')==(0,6)\n    assert candidate('programming','python programming language')==(7,18)\n    assert candidate('language','python programming language')==(19,27)\n\n", "language": "python", "description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs."}
{"task_id": "MBPP/535", "prompt": "\n\ndef topbottom_surfacearea(r):\n  \"\"\"\n  Write a function to find the top or bottom surface area of a cylinder.\n  >>> topbottom_surfacearea(10)\n  314.15000000000003\n  >>> topbottom_surfacearea(5)\n  78.53750000000001\n  >>> topbottom_surfacearea(4)\n  50.264\n  \"\"\"\n", "canonical_solution": "  \n  toporbottomarea=3.1415*r*r\n  return toporbottomarea", "entry_point": "topbottom_surfacearea", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10)==314.15000000000003\n    assert candidate(5)==78.53750000000001\n    assert candidate(4)==50.264\n\n", "language": "python", "description": "Write a function to find the top or bottom surface area of a cylinder."}
{"task_id": "MBPP/536", "prompt": "\n\ndef nth_items(list,n):\n \"\"\"\n Write a function to select the nth items of a list.\n >>> nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)\n [1, 3, 5, 7, 9]\n >>> nth_items([10,15,19,17,16,18],3)\n [10,17]\n >>> nth_items([14,16,19,15,17],4)\n [14,17]\n \"\"\"\n", "canonical_solution": " \n return list[::n]", "entry_point": "nth_items", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \n    assert candidate([10,15,19,17,16,18],3)==[10,17] \n    assert candidate([14,16,19,15,17],4)==[14,17]\n\n", "language": "python", "description": "Write a function to select the nth items of a list."}
{"task_id": "MBPP/537", "prompt": "\n\ndef first_repeated_word(str1):\n  \"\"\"\n  Write a python function to find the first repeated word in a given string.\n  >>> first_repeated_word(\"ab ca bc ab\")\n  \"ab\"\n  >>> first_repeated_word(\"ab ca bc\")\n  'None'\n  >>> first_repeated_word(\"ab ca bc ca ab bc\")\n  \"ca\"\n  \"\"\"\n", "canonical_solution": "  \n  temp = set()\n  for word in str1.split():\n    if word in temp:\n      return word;\n    else:\n      temp.add(word)\n  return 'None'", "entry_point": "first_repeated_word", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"ab ca bc ab\") == \"ab\"\n    assert candidate(\"ab ca bc\") == 'None'\n    assert candidate(\"ab ca bc ca ab bc\") == \"ca\"\n\n", "language": "python", "description": "Write a python function to find the first repeated word in a given string."}
{"task_id": "MBPP/538", "prompt": "\n\ndef string_list_to_tuple(str1):\n    \"\"\"\n    Write a python function to convert a given string list to a tuple.\n    >>> string_list_to_tuple((\"python 3.0\"))\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    >>> string_list_to_tuple((\"bigdata\"))\n    ('b', 'i', 'g', 'd', 'a', 't', 'a')\n    >>> string_list_to_tuple((\"language\"))\n    ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')\n    \"\"\"\n", "canonical_solution": "    \n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "entry_point": "string_list_to_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert candidate((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\n    assert candidate((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')\n\n", "language": "python", "description": "Write a python function to convert a given string list to a tuple."}
{"task_id": "MBPP/539", "prompt": "\n\ndef basesnum_coresspondingnum(bases_num,index):\n  \"\"\"\n  Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n  >>> basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n  >>> basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])\n  [1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\n  >>> basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])\n  [64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]\n  \"\"\"\n", "canonical_solution": "  \n  result = list(map(pow, bases_num, index))\n  return result", "entry_point": "basesnum_coresspondingnum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n    assert candidate([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\n    assert candidate([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]\n\n", "language": "python", "description": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function."}
{"task_id": "MBPP/540", "prompt": "\n\ndef find_Diff(arr,n):\n    \"\"\"\n    Write a python function to find the difference between highest and least frequencies in a given array.\n    >>> find_Diff([1,1,2,2,7,8,4,5,1,4],10)\n    2\n    >>> find_Diff([1,7,9,2,3,3,1,3,3],9)\n    3\n    >>> find_Diff([1,2,1,2],4)\n    0\n    \"\"\"\n", "canonical_solution": "     \n    arr.sort()  \n    count = 0; max_count = 0; min_count = n \n    for i in range(0,(n-1)): \n        if arr[i] == arr[i + 1]: \n            count += 1\n            continue\n        else: \n            max_count = max(max_count,count) \n            min_count = min(min_count,count) \n            count = 0\n    return max_count - min_count ", "entry_point": "find_Diff", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,1,2,2,7,8,4,5,1,4],10) == 2\n    assert candidate([1,7,9,2,3,3,1,3,3],9) == 3\n    assert candidate([1,2,1,2],4) == 0\n\n", "language": "python", "description": "Write a python function to find the difference between highest and least frequencies in a given array."}
{"task_id": "MBPP/541", "prompt": "\n\ndef check_abundant(n):\n\t\"\"\"\n\tWrite a function to find if the given number is abundant or not.\n\t>>> check_abundant(12)\n\tTrue\n\t>>> check_abundant(15)\n\tFalse\n\t>>> check_abundant(18)\n\tTrue\n\t\"\"\"\n", "canonical_solution": "\timport math \n\tdef get_sum(n): \n\t\tsum = 0\n\t\ti = 1\n\t\twhile i <= (math.sqrt(n)): \n\t\t\tif n%i == 0: \n\t\t\t\tif n/i == i : \n\t\t\t\t\tsum = sum + i \n\t\t\t\telse: \n\t\t\t\t\tsum = sum + i \n\t\t\t\t\tsum = sum + (n / i ) \n\t\t\ti = i + 1\n\t\tsum = sum - n \n\t\treturn sum\n\t \n\tif (get_sum(n) > n): \n\t\treturn True\n\telse: \n\t\treturn False", "entry_point": "check_abundant", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12) == True\n    assert candidate(15) == False\n    assert candidate(18) == True\n\n", "language": "python", "description": "Write a function to find if the given number is abundant or not."}
{"task_id": "MBPP/542", "prompt": "\n\ndef fill_spaces(text):\n  \"\"\"\n  Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n  >>> fill_spaces('Boult Curve Wireless Neckband')\n  'Boult:Curve:Wireless:Neckband'\n  >>> fill_spaces('Stereo Sound Sweatproof')\n  'Stereo:Sound:Sweatproof'\n  >>> fill_spaces('Probass Curve Audio')\n  'Probass:Curve:Audio'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  return (re.sub(\"[ ,.]\", \":\", text))", "entry_point": "fill_spaces", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\n    assert candidate('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\n    assert candidate('Probass Curve Audio') == 'Probass:Curve:Audio'\n\n", "language": "python", "description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex."}
{"task_id": "MBPP/543", "prompt": "\n\ndef count_digits(num1,num2):\n    \"\"\"\n    Write a function to add two numbers and print number of digits of sum.\n    >>> count_digits(9875,10)\n    (4)\n    >>> count_digits(98759853034,100)\n    (11)\n    >>> count_digits(1234567,500)\n    (7)\n    \"\"\"\n", "canonical_solution": "    \n    number=num1+num2\n    count = 0\n    while(number > 0):\n        number = number // 10\n        count = count + 1\n    return count", "entry_point": "count_digits", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(9875,10)==(4)\n    assert candidate(98759853034,100)==(11)\n    assert candidate(1234567,500)==(7)\n\n", "language": "python", "description": "Write a function to add two numbers and print number of digits of sum."}
{"task_id": "MBPP/544", "prompt": "\n\ndef flatten_tuple(test_list):\n  \"\"\"\n  Write a function to flatten the tuple list to a string.\n  >>> flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')])\n  '1 4 6 5 8 2 9 1 10'\n  >>> flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')])\n  '2 3 4 6 9 3 2 2 11'\n  >>> flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')])\n  '14 21 9 24 19 12 29 23 17'\n  \"\"\"\n", "canonical_solution": "  \n  res = ' '.join([idx for tup in test_list for idx in tup])\n  return (res) ", "entry_point": "flatten_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\n    assert candidate([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\n    assert candidate([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'\n\n", "language": "python", "description": "Write a function to flatten the tuple list to a string."}
{"task_id": "MBPP/545", "prompt": "\n\ndef toggle_F_and_L_bits(n) :\n    \"\"\"\n    Write a python function to toggle only first and last bits of a given number.\n    >>> toggle_F_and_L_bits(10)\n    3\n    >>> toggle_F_and_L_bits(15)\n    6\n    >>> toggle_F_and_L_bits(20)\n    5\n    \"\"\"\n", "canonical_solution": "    def take_L_and_F_set_bits(n) : \n        n = n | n >> 1\n        n = n | n >> 2\n        n = n | n >> 4\n        n = n | n >> 8\n        n = n | n >> 16 \n        return ((n + 1) >> 1) + 1      \n      \n    if (n == 1) : \n        return 0 \n    return n ^ take_L_and_F_set_bits(n) ", "entry_point": "toggle_F_and_L_bits", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 3\n    assert candidate(15) == 6\n    assert candidate(20) == 5\n\n", "language": "python", "description": "Write a python function to toggle only first and last bits of a given number."}
{"task_id": "MBPP/546", "prompt": "\n\ndef last_occurence_char(string,char):\n \"\"\"\n Write a function to find the last occurrence of a character in a string.\n >>> last_occurence_char(\"hello world\",'l')\n 10\n >>> last_occurence_char(\"language\",'g')\n 7\n >>> last_occurence_char(\"little\",'y')\n None\n \"\"\"\n", "canonical_solution": " \n flag = -1\n for i in range(len(string)):\n     if(string[i] == char):\n         flag = i\n if(flag == -1):\n    return None\n else:\n    return flag + 1", "entry_point": "last_occurence_char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"hello world\",'l')==10\n    assert candidate(\"language\",'g')==7\n    assert candidate(\"little\",'y')==None\n\n", "language": "python", "description": "Write a function to find the last occurrence of a character in a string."}
{"task_id": "MBPP/547", "prompt": "\n\ndef Total_Hamming_Distance(n):\n    \"\"\"\n    Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n    >>> Total_Hamming_Distance(4)\n    7\n    >>> Total_Hamming_Distance(2)\n    3\n    >>> Total_Hamming_Distance(5)\n    8\n    \"\"\"\n", "canonical_solution": "       \n    i = 1\n    sum = 0\n    while (n // i > 0):  \n        sum = sum + n // i  \n        i = i * 2     \n    return sum", "entry_point": "Total_Hamming_Distance", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4) == 7\n    assert candidate(2) == 3\n    assert candidate(5) == 8\n\n", "language": "python", "description": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n."}
{"task_id": "MBPP/548", "prompt": "\n\ndef longest_increasing_subsequence(arr):\n\t\"\"\"\n\tWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\t>>> longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60])\n\t5\n\t>>> longest_increasing_subsequence([3, 10, 2, 1, 20])\n\t3\n\t>>> longest_increasing_subsequence([50, 3, 10, 7, 40, 80])\n\t4\n\t\"\"\"\n", "canonical_solution": "\t \n\tn = len(arr) \n\tlongest_increasing_subsequence = [1]*n \n\tfor i in range (1 , n): \n\t\tfor j in range(0 , i): \n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\n\tmaximum = 0\n\tfor i in range(n): \n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \n\treturn maximum", "entry_point": "longest_increasing_subsequence", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60]) == 5\n    assert candidate([3, 10, 2, 1, 20]) == 3\n    assert candidate([50, 3, 10, 7, 40, 80]) == 4 \n\n", "language": "python", "description": "Write a function to find the length of the longest increasing subsequence of the given sequence."}
{"task_id": "MBPP/549", "prompt": "\n\ndef odd_Num_Sum(n) :\n    \"\"\"\n    Write a python function to find the sum of fifth power of first n odd natural numbers.\n    >>> odd_Num_Sum(1)\n    1\n    >>> odd_Num_Sum(2)\n    244\n    >>> odd_Num_Sum(3)\n    3369\n    \"\"\"\n", "canonical_solution": "     \n    j = 0\n    sm = 0\n    for i in range(1,n+1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j*j)     \n    return sm ", "entry_point": "odd_Num_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(2) == 244\n    assert candidate(3) == 3369\n\n", "language": "python", "description": "Write a python function to find the sum of fifth power of first n odd natural numbers."}
{"task_id": "MBPP/550", "prompt": "\n\ndef find_Max(arr,low,high):\n    \"\"\"\n    Write a python function to find the maximum element in a sorted and rotated array.\n    >>> find_Max([2,3,5,6,9],0,4)\n    9\n    >>> find_Max([3,4,5,2,1],0,4)\n    5\n    >>> find_Max([1,2,3],0,2)\n    3\n    \"\"\"\n", "canonical_solution": "     \n    if (high < low): \n        return arr[0] \n    if (high == low): \n        return arr[low] \n    mid = low + (high - low) // 2 \n    if (mid < high and arr[mid + 1] < arr[mid]): \n        return arr[mid] \n    if (mid > low and arr[mid] < arr[mid - 1]): \n        return arr[mid - 1]  \n    if (arr[low] > arr[mid]): \n        return find_Max(arr,low,mid - 1) \n    else: \n        return find_Max(arr,mid + 1,high) ", "entry_point": "find_Max", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([2,3,5,6,9],0,4) == 9\n    assert candidate([3,4,5,2,1],0,4) == 5\n    assert candidate([1,2,3],0,2) == 3\n\n", "language": "python", "description": "Write a python function to find the maximum element in a sorted and rotated array."}
{"task_id": "MBPP/551", "prompt": "\n\ndef extract_column(list1, n):\n   \"\"\"\n   Write a function to extract a specified column from a given nested list.\n   >>> extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)\n   [1, 2, 1]\n   >>> extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)\n   [3, -5, 1]\n   >>> extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)\n   [1, 5, 1, 13, 5, 9]\n   \"\"\"\n", "canonical_solution": "   \n   result = [i.pop(n) for i in list1]\n   return result ", "entry_point": "extract_column", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]\n\n", "language": "python", "description": "Write a function to extract a specified column from a given nested list."}
{"task_id": "MBPP/552", "prompt": "\n\ndef Seq_Linear(seq_nums):\n  \"\"\"\n  Write a python function to check whether a given sequence is linear or not.\n  >>> Seq_Linear([0,2,4,6,8,10])\n  \"Linear Sequence\"\n  >>> Seq_Linear([1,2,3])\n  \"Linear Sequence\"\n  >>> Seq_Linear([1,5,2])\n  \"Non Linear Sequence\"\n  \"\"\"\n", "canonical_solution": "  \n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\n  if len(set(seq_nums)) == 1: \n    return \"Linear Sequence\"\n  else:\n    return \"Non Linear Sequence\"", "entry_point": "Seq_Linear", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([0,2,4,6,8,10]) == \"Linear Sequence\"\n    assert candidate([1,2,3]) == \"Linear Sequence\"\n    assert candidate([1,5,2]) == \"Non Linear Sequence\"\n\n", "language": "python", "description": "Write a python function to check whether a given sequence is linear or not."}
{"task_id": "MBPP/553", "prompt": "\n\ndef tuple_to_float(test_tup):\n  \"\"\"\n  Write a function to convert the given tuple to a floating-point number.\n  >>> tuple_to_float((4, 56))\n  4.56\n  >>> tuple_to_float((7, 256))\n  7.256\n  >>> tuple_to_float((8, 123))\n  8.123\n  \"\"\"\n", "canonical_solution": "  \n  res = float('.'.join(str(ele) for ele in test_tup))\n  return (res) ", "entry_point": "tuple_to_float", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((4, 56)) == 4.56\n    assert candidate((7, 256)) == 7.256\n    assert candidate((8, 123)) == 8.123\n\n", "language": "python", "description": "Write a function to convert the given tuple to a floating-point number."}
{"task_id": "MBPP/554", "prompt": "\n\ndef Split(list):\n    \"\"\"\n    Write a python function to find odd numbers from a mixed list.\n    >>> Split([1,2,3,4,5,6])\n    [1,3,5]\n    >>> Split([10,11,12,13])\n    [11,13]\n    >>> Split([7,8,9,1])\n    [7,9,1]\n    \"\"\"\n", "canonical_solution": "     \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li", "entry_point": "Split", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6]) == [1,3,5]\n    assert candidate([10,11,12,13]) == [11,13]\n    assert candidate([7,8,9,1]) == [7,9,1]\n\n", "language": "python", "description": "Write a python function to find odd numbers from a mixed list."}
{"task_id": "MBPP/555", "prompt": "\n\ndef difference(n) :\n    \"\"\"\n    Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n    >>> difference(3)\n    30\n    >>> difference(5)\n    210\n    >>> difference(2)\n    6\n    \"\"\"\n", "canonical_solution": "      \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  ", "entry_point": "difference", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3) == 30\n    assert candidate(5) == 210\n    assert candidate(2) == 6\n\n", "language": "python", "description": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers."}
{"task_id": "MBPP/556", "prompt": "\n\ndef find_Odd_Pair(A,N) :\n    \"\"\"\n    Write a python function to count the pairs with xor as an odd number.\n    >>> find_Odd_Pair([5,4,7,2,1],5)\n    6\n    >>> find_Odd_Pair([7,2,8,1,0,5,11],7)\n    12\n    >>> find_Odd_Pair([1,2,3],3)\n    2\n    \"\"\"\n", "canonical_solution": "     \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  ", "entry_point": "find_Odd_Pair", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5,4,7,2,1],5) == 6\n    assert candidate([7,2,8,1,0,5,11],7) == 12\n    assert candidate([1,2,3],3) == 2\n\n", "language": "python", "description": "Write a python function to count the pairs with xor as an odd number."}
{"task_id": "MBPP/557", "prompt": "\n\ndef toggle_string(string):\n \"\"\"\n Write a function to toggle characters case in a string.\n >>> toggle_string(\"Python\")\n (\"pYTHON\")\n >>> toggle_string(\"Pangram\")\n (\"pANGRAM\")\n >>> toggle_string(\"LIttLE\")\n (\"liTTle\")\n \"\"\"\n", "canonical_solution": " \n string1 = string.swapcase()\n return string1", "entry_point": "toggle_string", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"Python\")==(\"pYTHON\")\n    assert candidate(\"Pangram\")==(\"pANGRAM\")\n    assert candidate(\"LIttLE\")==(\"liTTle\")\n\n", "language": "python", "description": "Write a function to toggle characters case in a string."}
{"task_id": "MBPP/558", "prompt": "\n\ndef digit_distance_nums(n1, n2):\n         \"\"\"\n         Write a python function to find the digit distance between two integers.\n         >>> digit_distance_nums(1,2)\n         1\n         >>> digit_distance_nums(23,56)\n         6\n         >>> digit_distance_nums(123,256)\n         7\n         \"\"\"\n", "canonical_solution": "         \n         return sum(map(int,str(abs(n1-n2))))", "entry_point": "digit_distance_nums", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(23,56) == 6\n    assert candidate(123,256) == 7\n\n", "language": "python", "description": "Write a python function to find the digit distance between two integers."}
{"task_id": "MBPP/559", "prompt": "\n\ndef max_sub_array_sum(a, size):\n  \"\"\"\n  Write a function to find the largest sum of contiguous subarray in the given array.\n  >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n  7\n  >>> max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8)\n  8\n  >>> max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8)\n  10\n  \"\"\"\n", "canonical_solution": "  \n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far", "entry_point": "max_sub_array_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    assert candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n    assert candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n\n", "language": "python", "description": "Write a function to find the largest sum of contiguous subarray in the given array."}
{"task_id": "MBPP/560", "prompt": "\n\ndef union_elements(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to find the union of elements of the given tuples.\n  >>> union_elements((3, 4, 5, 6),(5, 7, 4, 10) )\n  (3, 4, 5, 6, 7, 10)\n  >>> union_elements((1, 2, 3, 4),(3, 4, 5, 6) )\n  (1, 2, 3, 4, 5, 6)\n  >>> union_elements((11, 12, 13, 14),(13, 15, 16, 17) )\n  (11, 12, 13, 14, 15, 16, 17)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) ", "entry_point": "union_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n    assert candidate((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\n    assert candidate((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)\n\n", "language": "python", "description": "Write a function to find the union of elements of the given tuples."}
{"task_id": "MBPP/561", "prompt": "\n\ndef assign_elements(test_list):\n  \"\"\"\n  Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n  >>> assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] )\n  {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\n  >>> assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] )\n  {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\n  >>> assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] )\n  {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}\n  \"\"\"\n", "canonical_solution": "  \n  res = dict()\n  for key, val in test_list:\n    res.setdefault(val, [])\n    res.setdefault(key, []).append(val)\n  return (res) ", "entry_point": "assign_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\n    assert candidate([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\n    assert candidate([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}\n\n", "language": "python", "description": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple."}
{"task_id": "MBPP/562", "prompt": "\n\ndef Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the maximum length of sublist.\n    >>> Find_Max_Length([[1],[1,4],[5,6,7,8]])\n    4\n    >>> Find_Max_Length([[0,1],[2,2,],[3,2,1]])\n    3\n    >>> Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]])\n    5\n    \"\"\"\n", "canonical_solution": "      \n    maxLength = max(len(x) for x in lst )\n    return maxLength ", "entry_point": "Find_Max_Length", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1],[1,4],[5,6,7,8]]) == 4\n    assert candidate([[0,1],[2,2,],[3,2,1]]) == 3\n    assert candidate([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n\n", "language": "python", "description": "Write a python function to find the maximum length of sublist."}
{"task_id": "MBPP/563", "prompt": "\n\ndef extract_values(text):\n \"\"\"\n Write a function to extract values between quotation marks of a string.\n >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n ['Python', 'PHP', 'Java']\n >>> extract_values('\"python\",\"program\",\"language\"')\n ['python','program','language']\n >>> extract_values('\"red\",\"blue\",\"green\",\"yellow\"')\n ['red','blue','green','yellow']\n \"\"\"\n", "canonical_solution": " import re\n \n return (re.findall(r'\"(.*?)\"', text))", "entry_point": "extract_values", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n    assert candidate('\"python\",\"program\",\"language\"')==['python','program','language']\n    assert candidate('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']\n\n", "language": "python", "description": "Write a function to extract values between quotation marks of a string."}
{"task_id": "MBPP/564", "prompt": "\n\ndef count_Pairs(arr,n):\n    \"\"\"\n    Write a python function to count unequal element pairs from the given array.\n    >>> count_Pairs([1,2,1],3)\n    2\n    >>> count_Pairs([1,1,1,1],4)\n    0\n    >>> count_Pairs([1,2,3,4,5],5)\n    10\n    \"\"\"\n", "canonical_solution": "     \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; ", "entry_point": "count_Pairs", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,1],3) == 2\n    assert candidate([1,1,1,1],4) == 0\n    assert candidate([1,2,3,4,5],5) == 10\n\n", "language": "python", "description": "Write a python function to count unequal element pairs from the given array."}
{"task_id": "MBPP/565", "prompt": "\n\ndef split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    >>> split('python')\n    ['p','y','t','h','o','n']\n    >>> split('Name')\n    ['N','a','m','e']\n    >>> split('program')\n    ['p','r','o','g','r','a','m']\n    \"\"\"\n", "canonical_solution": "     \n    return [char for char in word] ", "entry_point": "split", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('python') == ['p','y','t','h','o','n']\n    assert candidate('Name') == ['N','a','m','e']\n    assert candidate('program') == ['p','r','o','g','r','a','m']\n\n", "language": "python", "description": "Write a python function to split a string into characters."}
{"task_id": "MBPP/566", "prompt": "\n\ndef sum_digits(n):\n  \"\"\"\n  Write a function to get the sum of a non-negative integer.\n  >>> sum_digits(345)\n  12\n  >>> sum_digits(12)\n  3\n  >>> sum_digits(97)\n  16\n  \"\"\"\n", "canonical_solution": "  \n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))", "entry_point": "sum_digits", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(345)==12\n    assert candidate(12)==3\n    assert candidate(97)==16\n\n", "language": "python", "description": "Write a function to get the sum of a non-negative integer."}
{"task_id": "MBPP/567", "prompt": "\n\ndef issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    >>> issort_list([1,2,4,6,8,10,12,14,16,17])\n    True\n    >>> issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])\n    False\n    >>> issort_list([1, 2, 4, 6, 8, 10,15,14,20])\n    False\n    \"\"\"\n", "canonical_solution": "    \n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result", "entry_point": "issort_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,4,6,8,10,12,14,16,17])==True\n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\n    assert candidate([1, 2, 4, 6, 8, 10,15,14,20])==False\n\n", "language": "python", "description": "Write a function to check whether a specified list is sorted or not."}
{"task_id": "MBPP/568", "prompt": "\n\ndef empty_list(length):\n \"\"\"\n Write a function to create a list of empty dictionaries.\n >>> empty_list(5)\n [{},{},{},{},{}]\n >>> empty_list(6)\n [{},{},{},{},{},{}]\n >>> empty_list(7)\n [{},{},{},{},{},{},{}]\n \"\"\"\n", "canonical_solution": " \n empty_list = [{} for _ in range(length)]\n return empty_list", "entry_point": "empty_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5)==[{},{},{},{},{}]\n    assert candidate(6)==[{},{},{},{},{},{}]\n    assert candidate(7)==[{},{},{},{},{},{},{}]\n\n", "language": "python", "description": "Write a function to create a list of empty dictionaries."}
{"task_id": "MBPP/569", "prompt": "\n\ndef sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n    [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    >>> sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])\n    [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    >>> sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])\n    [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n    \"\"\"\n", "canonical_solution": "    \n    result = list(map(sorted,list1)) \n    return result", "entry_point": "sort_sublists", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert candidate([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n\n", "language": "python", "description": "Write a function to sort each sublist of strings in a given list of lists."}
{"task_id": "MBPP/570", "prompt": "\n\ndef remove_words(list1, charlist):\n    \"\"\"\n    Write a function to remove words from a given list of strings containing a character or string.\n    >>> remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])\n    ['Red', '', 'Green', 'Orange', 'White']\n    >>> remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])\n    ['Red', '', 'Green', 'Orange', 'White']\n    >>> remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])\n    ['Red &', 'Orange+', 'Green', 'Orange', 'White']\n    \"\"\"\n", "canonical_solution": "    \n    new_list = []\n    for line in list1:\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\n        new_list.append(new_words)\n    return new_list", "entry_point": "remove_words", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\n    assert candidate(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\n    assert candidate(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']\n\n", "language": "python", "description": "Write a function to remove words from a given list of strings containing a character or string."}
{"task_id": "MBPP/571", "prompt": "\n\ndef max_sum_pair_diff_lessthan_K(arr, N, K):\n\t\"\"\"\n\tWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\t>>> max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4)\n\t62\n\t>>> max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12)\n\t25\n\t>>> max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6)\n\t21\n\t\"\"\"\n", "canonical_solution": "\t \n\tarr.sort() \n\tdp = [0] * N \n\tdp[0] = 0\n\tfor i in range(1, N): \n\t\tdp[i] = dp[i-1] \n\t\tif (arr[i] - arr[i-1] < K): \n\t\t\tif (i >= 2): \n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \n\t\t\telse: \n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \n\treturn dp[N - 1]", "entry_point": "max_sum_pair_diff_lessthan_K", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\n    assert candidate([5, 15, 10, 300], 4, 12) == 25\n    assert candidate([1, 2, 3, 4, 5, 6], 6, 6) == 21\n\n", "language": "python", "description": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k."}
{"task_id": "MBPP/572", "prompt": "\n\ndef two_unique_nums(nums):\n  \"\"\"\n  Write a python function to remove two duplicate numbers from a given number of lists.\n  >>> two_unique_nums([1,2,3,2,3,4,5])\n  [1, 4, 5]\n  >>> two_unique_nums([1,2,3,2,4,5])\n  [1, 3, 4, 5]\n  >>> two_unique_nums([1,2,3,4,5])\n  [1, 2, 3, 4, 5]\n  \"\"\"\n", "canonical_solution": "  \n  return [i for i in nums if nums.count(i)==1]", "entry_point": "two_unique_nums", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,2,3,4,5]) == [1, 4, 5]\n    assert candidate([1,2,3,2,4,5]) == [1, 3, 4, 5]\n    assert candidate([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n\n", "language": "python", "description": "Write a python function to remove two duplicate numbers from a given number of lists."}
{"task_id": "MBPP/573", "prompt": "\n\ndef unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers of a given list.\n    >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40])\n    720000000\n    >>> unique_product([1, 2, 3, 1,])\n    6\n    >>> unique_product([7, 8, 9, 0, 1, 1])\n    0\n    \"\"\"\n", "canonical_solution": "    \n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p", "entry_point": "unique_product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n    assert candidate([1, 2, 3, 1,]) == 6\n    assert candidate([7, 8, 9, 0, 1, 1]) == 0\n\n", "language": "python", "description": "Write a python function to calculate the product of the unique numbers of a given list."}
{"task_id": "MBPP/574", "prompt": "\n\ndef surfacearea_cylinder(r,h):\n  \"\"\"\n  Write a function to find the surface area of a cylinder.\n  >>> surfacearea_cylinder(10,5)\n  942.45\n  >>> surfacearea_cylinder(4,5)\n  226.18800000000002\n  >>> surfacearea_cylinder(4,10)\n  351.848\n  \"\"\"\n", "canonical_solution": "  \n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea", "entry_point": "surfacearea_cylinder", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,5)==942.45\n    assert candidate(4,5)==226.18800000000002\n    assert candidate(4,10)==351.848\n\n", "language": "python", "description": "Write a function to find the surface area of a cylinder."}
{"task_id": "MBPP/575", "prompt": "\n\ndef count_no (A,N,L,R):\n    \"\"\"\n    Write a python function to find nth number in a sequence which is not a multiple of a given number.\n    >>> count_no(2,3,1,10)\n    5\n    >>> count_no(3,6,4,20)\n    11\n    >>> count_no(5,10,4,20)\n    16\n    \"\"\"\n", "canonical_solution": "     \n    count = 0\n    for i in range (L,R + 1): \n        if (i % A != 0): \n            count += 1\n        if (count == N): \n            break\n    return (i) ", "entry_point": "count_no", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2,3,1,10) == 5\n    assert candidate(3,6,4,20) == 11\n    assert candidate(5,10,4,20) == 16\n\n", "language": "python", "description": "Write a python function to find nth number in a sequence which is not a multiple of a given number."}
{"task_id": "MBPP/576", "prompt": "\n\ndef is_Sub_Array(A,B,n,m):\n    \"\"\"\n    Write a python function to check whether an array is subarray of another or not.\n    >>> is_Sub_Array([1,4,3,5],[1,2],4,2)\n    False\n    >>> is_Sub_Array([1,2,1],[1,2,1],3,3)\n    True\n    >>> is_Sub_Array([1,0,2,2],[2,2,0],4,3)\n    False\n    \"\"\"\n", "canonical_solution": "     \n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; ", "entry_point": "is_Sub_Array", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,4,3,5],[1,2],4,2) == False\n    assert candidate([1,2,1],[1,2,1],3,3) == True\n    assert candidate([1,0,2,2],[2,2,0],4,3) ==False\n\n", "language": "python", "description": "Write a python function to check whether an array is subarray of another or not."}
{"task_id": "MBPP/577", "prompt": "\n\ndef last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    >>> last_Digit_Factorial(4)\n    4\n    >>> last_Digit_Factorial(21)\n    0\n    >>> last_Digit_Factorial(30)\n    0\n    \"\"\"\n", "canonical_solution": "     \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0", "entry_point": "last_Digit_Factorial", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4) == 4\n    assert candidate(21) == 0\n    assert candidate(30) == 0\n\n", "language": "python", "description": "Write a python function to find the last digit in factorial of a given number."}
{"task_id": "MBPP/578", "prompt": "\n\ndef interleave_lists(list1,list2,list3):\n    \"\"\"\n    Write a function to interleave lists of the same length.\n    >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])\n    [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    >>> interleave_lists([10,20],[15,2],[5,10])\n    [10,15,5,20,2,10]\n    >>> interleave_lists([11,44], [10,15], [20,5])\n    [11,10,20,44,15,5]\n    \"\"\"\n", "canonical_solution": "    \n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result", "entry_point": "interleave_lists", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    assert candidate([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\n    assert candidate([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n\n", "language": "python", "description": "Write a function to interleave lists of the same length."}
{"task_id": "MBPP/579", "prompt": "\n\ndef find_dissimilar(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to find the dissimilar elements in the given two tuples.\n  >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n  (3, 6, 7, 10)\n  >>> find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9))\n  (1, 4, 7, 9)\n  >>> find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36))\n  (34, 36, 11, 25)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) ", "entry_point": "find_dissimilar", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n    assert candidate((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\n    assert candidate((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n\n", "language": "python", "description": "Write a function to find the dissimilar elements in the given two tuples."}
{"task_id": "MBPP/580", "prompt": "\n\ndef extract_even(test_tuple):\n  \"\"\"\n  Write a function to extract the even elements in the nested mixed tuple.\n  >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n  (4, (6, (2, 4)), 6, 8)\n  >>> extract_even((5, 6, (8, 7, (4, 8)), 7, 9))\n  (6, (8, (4, 8)))\n  >>> extract_even((5, 6, (9, 8, (4, 6)), 8, 10))\n  (6, (8, (4, 6)), 8, 10)\n  \"\"\"\n", "canonical_solution": "  def even_ele(test_tuple, even_fnc): \n  \tres = tuple() \n  \tfor ele in test_tuple: \n  \t\tif isinstance(ele, tuple): \n  \t\t\tres += (even_ele(ele, even_fnc), ) \n  \t\telif even_fnc(ele): \n  \t\t\tres += (ele, ) \n  \treturn res \n  \n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) ", "entry_point": "extract_even", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n    assert candidate((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\n    assert candidate((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n\n", "language": "python", "description": "Write a function to extract the even elements in the nested mixed tuple."}
{"task_id": "MBPP/581", "prompt": "\n\ndef surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of the square pyramid.\n    >>> surface_Area(3,4)\n    33\n    >>> surface_Area(4,5)\n    56\n    >>> surface_Area(1,2)\n    5\n    \"\"\"\n", "canonical_solution": "     \n    return 2 * b * s + pow(b,2) ", "entry_point": "surface_Area", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3,4) == 33\n    assert candidate(4,5) == 56\n    assert candidate(1,2) == 5\n\n", "language": "python", "description": "Write a python function to find the surface area of the square pyramid."}
{"task_id": "MBPP/582", "prompt": "\n\ndef my_dict(dict1):\n  \"\"\"\n  Write a function to check if a dictionary is empty or not.\n  >>> my_dict({10})\n  False\n  >>> my_dict({11})\n  False\n  >>> my_dict({})\n  True\n  \"\"\"\n", "canonical_solution": "  \n  if bool(dict1):\n     return False\n  else:\n     return True", "entry_point": "my_dict", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({10})==False\n    assert candidate({11})==False\n    assert candidate({})==True\n\n", "language": "python", "description": "Write a function to check if a dictionary is empty or not."}
{"task_id": "MBPP/583", "prompt": "\n\ndef catalan_number(num):\n    \"\"\"\n    Write a function for nth catalan number.\n    >>> catalan_number(10)\n    16796\n    >>> catalan_number(9)\n    4862\n    >>> catalan_number(7)\n    429\n    \"\"\"\n", "canonical_solution": "    \n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num", "entry_point": "catalan_number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10)==16796\n    assert candidate(9)==4862\n    assert candidate(7)==429\n\n", "language": "python", "description": "Write a function for nth catalan number."}
{"task_id": "MBPP/584", "prompt": "\n\ndef find_adverbs(text):\n  \"\"\"\n  Write a function to find all adverbs and their positions in a given sentence by using regex.\n  >>> find_adverbs(\"Clearly, he has no excuse for such behavior.\")\n  '0-7: Clearly'\n  >>> find_adverbs(\"Please handle the situation carefuly\")\n  '28-36: carefuly'\n  >>> find_adverbs(\"Complete the task quickly\")\n  '18-25: quickly'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))", "entry_point": "find_adverbs", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\n    assert candidate(\"Please handle the situation carefuly\") == '28-36: carefuly'\n    assert candidate(\"Complete the task quickly\") == '18-25: quickly'\n\n", "language": "python", "description": "Write a function to find all adverbs and their positions in a given sentence by using regex."}
{"task_id": "MBPP/585", "prompt": "\n\ndef expensive_items(items,n):\n  \"\"\"\n  Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n  >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)\n  [{'name': 'Item-2', 'price': 555.22}]\n  >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)\n  [{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\n  >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)\n  [{'name': 'Item-2', 'price': 555.22}]\n  \"\"\"\n", "canonical_solution": "  import heapq\n  \n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items", "entry_point": "expensive_items", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\n", "language": "python", "description": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm."}
{"task_id": "MBPP/586", "prompt": "\n\ndef split_Arr(a,n,k):\n   \"\"\"\n   Write a python function to split the array and add the first part to the end.\n   >>> split_Arr([12,10,5,6,52,36],6,2)\n   [5,6,52,36,12,10]\n   >>> split_Arr([1,2,3,4],4,1)\n   [2,3,4,1]\n   >>> split_Arr([0,1,2,3,4,5,6,7],8,3)\n   [3,4,5,6,7,0,1,2]\n   \"\"\"\n", "canonical_solution": "     \n   b = a[:k] \n   return (a[k::]+b[::]) ", "entry_point": "split_Arr", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\n    assert candidate([1,2,3,4],4,1) == [2,3,4,1]\n    assert candidate([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]\n\n", "language": "python", "description": "Write a python function to split the array and add the first part to the end."}
{"task_id": "MBPP/587", "prompt": "\n\ndef list_tuple(listx):\n  \"\"\"\n  Write a function to convert a list to a tuple.\n  >>> list_tuple([5, 10, 7, 4, 15, 3])\n  (5, 10, 7, 4, 15, 3)\n  >>> list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])\n  (2, 4, 5, 6, 2, 3, 4, 4, 7)\n  >>> list_tuple([58,44,56])\n  (58,44,56)\n  \"\"\"\n", "canonical_solution": "  \n  tuplex = tuple(listx)\n  return tuplex", "entry_point": "list_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n    assert candidate([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert candidate([58,44,56])==(58,44,56)\n\n", "language": "python", "description": "Write a function to convert a list to a tuple."}
{"task_id": "MBPP/588", "prompt": "\n\ndef big_diff(nums):\n     \"\"\"\n     Write a python function to find the difference between largest and smallest value in a given array.\n     >>> big_diff([1,2,3,4])\n     3\n     >>> big_diff([4,5,12])\n     8\n     >>> big_diff([9,2,3])\n     7\n     \"\"\"\n", "canonical_solution": "     \n     diff= max(nums)-min(nums)\n     return diff", "entry_point": "big_diff", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4]) == 3\n    assert candidate([4,5,12]) == 8\n    assert candidate([9,2,3]) == 7\n\n", "language": "python", "description": "Write a python function to find the difference between largest and smallest value in a given array."}
{"task_id": "MBPP/589", "prompt": "\n\ndef perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    >>> perfect_squares(1,30)\n    [1, 4, 9, 16, 25]\n    >>> perfect_squares(50,100)\n    [64, 81, 100]\n    >>> perfect_squares(100,200)\n    [100, 121, 144, 169, 196]\n    \"\"\"\n", "canonical_solution": "    \n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists", "entry_point": "perfect_squares", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,30)==[1, 4, 9, 16, 25]\n    assert candidate(50,100)==[64, 81, 100]\n    assert candidate(100,200)==[100, 121, 144, 169, 196]\n\n", "language": "python", "description": "Write a function to find perfect squares between two given numbers."}
{"task_id": "MBPP/590", "prompt": "\n\ndef polar_rect(x,y):\n \"\"\"\n Write a function to convert polar coordinates to rectangular coordinates.\n >>> polar_rect(3,4)\n ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n >>> polar_rect(4,7)\n ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\n >>> polar_rect(15,17)\n ((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n \"\"\"\n", "canonical_solution": " import cmath\n \n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)", "entry_point": "polar_rect", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    assert candidate(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\n    assert candidate(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n\n", "language": "python", "description": "Write a function to convert polar coordinates to rectangular coordinates."}
{"task_id": "MBPP/591", "prompt": "\n\ndef swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    >>> swap_List([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, 12]\n    >>> swap_List([1, 2, 3])\n    [3, 2, 1]\n    >>> swap_List([4, 5, 6])\n    [6, 5, 4]\n    \"\"\"\n", "canonical_solution": "     \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList ", "entry_point": "swap_List", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n    assert candidate([1, 2, 3]) == [3, 2, 1]\n    assert candidate([4, 5, 6]) == [6, 5, 4]\n\n", "language": "python", "description": "Write a python function to interchange the first and last elements in a list."}
{"task_id": "MBPP/592", "prompt": "\n\ndef sum_Of_product(n):\n    \"\"\"\n    Write a python function to find sum of product of binomial co-efficients.\n    >>> sum_Of_product(3)\n    15\n    >>> sum_Of_product(4)\n    56\n    >>> sum_Of_product(1)\n    1\n    \"\"\"\n", "canonical_solution": "    def binomial_Coeff(n,k): \n        C = [0] * (k + 1); \n        C[0] = 1; # nC0 is 1 \n        for i in range(1,n + 1):  \n            for j in range(min(i, k),0,-1): \n                C[j] = C[j] + C[j - 1]; \n        return C[k]; \n     \n    return binomial_Coeff(2 * n,n - 1); ", "entry_point": "sum_Of_product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3) == 15\n    assert candidate(4) == 56\n    assert candidate(1) == 1\n\n", "language": "python", "description": "Write a python function to find sum of product of binomial co-efficients."}
{"task_id": "MBPP/593", "prompt": "\n\ndef removezero_ip(ip):\n \"\"\"\n Write a function to remove leading zeroes from an ip address.\n >>> removezero_ip(\"216.08.094.196\")\n ('216.8.94.196')\n >>> removezero_ip(\"12.01.024\")\n ('12.1.24')\n >>> removezero_ip(\"216.08.094.0196\")\n ('216.8.94.196')\n \"\"\"\n", "canonical_solution": " import re\n \n string = re.sub('\\.[0]*', '.', ip)\n return string", "entry_point": "removezero_ip", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"216.08.094.196\")==('216.8.94.196') \n    assert candidate(\"12.01.024\")==('12.1.24') \n    assert candidate(\"216.08.094.0196\")==('216.8.94.196') \n\n", "language": "python", "description": "Write a function to remove leading zeroes from an ip address."}
{"task_id": "MBPP/594", "prompt": "\n\ndef diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of first even and odd number of a given list.\n    >>> diff_even_odd([1,3,5,7,4,1,6,8])\n    3\n    >>> diff_even_odd([1,2,3,4,5,6,7,8,9,10])\n    1\n    >>> diff_even_odd([1,5,7,9,10])\n    9\n    \"\"\"\n", "canonical_solution": "    \n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)", "entry_point": "diff_even_odd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8])==3\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==1\n    assert candidate([1,5,7,9,10])==9\n\n", "language": "python", "description": "Write a function to find the difference of first even and odd number of a given list."}
{"task_id": "MBPP/595", "prompt": "\n\ndef min_Swaps(str1,str2) :\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary string to another.\n    >>> min_Swaps(\"1101\",\"1110\")\n    1\n    >>> min_Swaps(\"111\",\"000\")\n    \"Not Possible\"\n    >>> min_Swaps(\"111\",\"110\")\n    \"Not Possible\"\n    \"\"\"\n", "canonical_solution": "     \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") ", "entry_point": "min_Swaps", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"1101\",\"1110\") == 1\n    assert candidate(\"111\",\"000\") == \"Not Possible\"\n    assert candidate(\"111\",\"110\") == \"Not Possible\"\n\n", "language": "python", "description": "Write a python function to count minimum number of swaps required to convert one binary string to another."}
{"task_id": "MBPP/596", "prompt": "\n\ndef tuple_size(tuple_list):\n  \"\"\"\n  Write a function to find the size of the given tuple.\n  >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) )\n  104\n  >>> tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") )\n  104\n  >>> tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  )\n  88\n  \"\"\"\n", "canonical_solution": "  import sys \n  \n  return (sys.getsizeof(tuple_list)) ", "entry_point": "tuple_size", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((\"A\", 1, \"B\", 2, \"C\", 3) ) == 104\n    assert candidate((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == 104\n    assert candidate(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == 88\n\n", "language": "python", "description": "Write a function to find the size of the given tuple."}
{"task_id": "MBPP/597", "prompt": "\n\ndef find_kth(arr1, arr2, m, n, k):\n\t\"\"\"\n\tWrite a function to find kth element from the given two sorted arrays.\n\t>>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5)\n\t6\n\t>>> find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7)\n\t256\n\t>>> find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6)\n\t8\n\t\"\"\"\n", "canonical_solution": "\t\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]", "entry_point": "find_kth", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\n    assert candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\n    assert candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8\n\n", "language": "python", "description": "Write a function to find kth element from the given two sorted arrays."}
{"task_id": "MBPP/598", "prompt": "\n\ndef armstrong_number(number):\n \"\"\"\n Write a function to check whether the given number is armstrong or not.\n >>> armstrong_number(153)\n True\n >>> armstrong_number(259)\n False\n >>> armstrong_number(4458)\n False\n \"\"\"\n", "canonical_solution": " \n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False", "entry_point": "armstrong_number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(153)==True\n    assert candidate(259)==False\n    assert candidate(4458)==False\n\n", "language": "python", "description": "Write a function to check whether the given number is armstrong or not."}
{"task_id": "MBPP/599", "prompt": "\n\ndef sum_average(number):\n \"\"\"\n Write a function to find sum and average of first n natural numbers.\n >>> sum_average(10)\n (55, 5.5)\n >>> sum_average(15)\n (120, 8.0)\n >>> sum_average(20)\n (210, 10.5)\n \"\"\"\n", "canonical_solution": " \n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)", "entry_point": "sum_average", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10)==(55, 5.5)\n    assert candidate(15)==(120, 8.0)\n    assert candidate(20)==(210, 10.5)\n\n", "language": "python", "description": "Write a function to find sum and average of first n natural numbers."}
{"task_id": "MBPP/600", "prompt": "\n\ndef is_Even(n) :\n    \"\"\"\n    Write a python function to check whether the given number is even or not using bitwise operator.\n    >>> is_Even(1)\n    False\n    >>> is_Even(2)\n    True\n    >>> is_Even(3)\n    False\n    \"\"\"\n", "canonical_solution": "     \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; ", "entry_point": "is_Even", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == False\n    assert candidate(2) == True\n    assert candidate(3) == False\n\n", "language": "python", "description": "Write a python function to check whether the given number is even or not using bitwise operator."}
{"task_id": "MBPP/601", "prompt": "\n\ndef max_chain_length(arr, n):\n\t\"\"\"\n\tWrite a function to find the longest chain which can be formed from the given set of pairs.\n\t>>> max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4)\n\t3\n\t>>> max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4)\n\t4\n\t>>> max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5)\n\t5\n\t\"\"\"\n", "canonical_solution": "\tclass Pair(object): \n\t\tdef __init__(self, a, b): \n\t\t\tself.a = a \n\t\t\tself.b = b \n\t \n\tmax = 0\n\tmcl = [1 for i in range(n)] \n\tfor i in range(1, n): \n\t\tfor j in range(0, i): \n\t\t\tif (arr[i].a > arr[j].b and\n\t\t\t\tmcl[i] < mcl[j] + 1): \n\t\t\t\tmcl[i] = mcl[j] + 1\n\tfor i in range(n): \n\t\tif (max < mcl[i]): \n\t\t\tmax = mcl[i] \n\treturn max", "entry_point": "max_chain_length", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\n    assert candidate([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\n    assert candidate([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5\n\n", "language": "python", "description": "Write a function to find the longest chain which can be formed from the given set of pairs."}
{"task_id": "MBPP/602", "prompt": "\n\ndef first_repeated_char(str1):\n  \"\"\"\n  Write a python function to find the first repeated character in a given string.\n  >>> first_repeated_char(\"abcabc\")\n  \"a\"\n  >>> first_repeated_char(\"abc\")\n  \"None\"\n  >>> first_repeated_char(\"123123\")\n  \"1\"\n  \"\"\"\n", "canonical_solution": "  \n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c \n  return \"None\"", "entry_point": "first_repeated_char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"abcabc\") == \"a\"\n    assert candidate(\"abc\") == \"None\"\n    assert candidate(\"123123\") == \"1\"\n\n", "language": "python", "description": "Write a python function to find the first repeated character in a given string."}
{"task_id": "MBPP/603", "prompt": "\n\ndef get_ludic(n):\n\t\"\"\"\n\tWrite a function to get a lucid number smaller than or equal to n.\n\t>>> get_ludic(10)\n\t[1, 2, 3, 5, 7]\n\t>>> get_ludic(25)\n\t[1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n\t>>> get_ludic(45)\n\t[1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n\t\"\"\"\n", "canonical_solution": "\t\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics", "entry_point": "get_ludic", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == [1, 2, 3, 5, 7]\n    assert candidate(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n    assert candidate(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n\n", "language": "python", "description": "Write a function to get a lucid number smaller than or equal to n."}
{"task_id": "MBPP/604", "prompt": "\n\ndef reverse_words(s):\n        \"\"\"\n        Write a function to reverse words in a given string.\n        >>> reverse_words(\"python program\")\n        (\"program python\")\n        >>> reverse_words(\"java language\")\n        (\"language java\")\n        >>> reverse_words(\"indian man\")\n        (\"man indian\")\n        \"\"\"\n", "canonical_solution": "        \n        return ' '.join(reversed(s.split()))", "entry_point": "reverse_words", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"python program\")==(\"program python\")\n    assert candidate(\"java language\")==(\"language java\")\n    assert candidate(\"indian man\")==(\"man indian\")\n\n", "language": "python", "description": "Write a function to reverse words in a given string."}
{"task_id": "MBPP/605", "prompt": "\n\ndef prime_num(num):\n  \"\"\"\n  Write a function to check if the given integer is a prime number.\n  >>> prime_num(13)\n  True\n  >>> prime_num(7)\n  True\n  >>> prime_num(-1010)\n  False\n  \"\"\"\n", "canonical_solution": "  \n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False", "entry_point": "prime_num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(13)==True\n    assert candidate(7)==True\n    assert candidate(-1010)==False\n\n", "language": "python", "description": "Write a function to check if the given integer is a prime number."}
{"task_id": "MBPP/606", "prompt": "\n\ndef radian_degree(degree):\n \"\"\"\n Write a function to convert degrees to radians.\n >>> radian_degree(90)\n 1.5707963267948966\n >>> radian_degree(60)\n 1.0471975511965976\n >>> radian_degree(120)\n 2.0943951023931953\n \"\"\"\n", "canonical_solution": " import math\n \n radian = degree*(math.pi/180)\n return radian", "entry_point": "radian_degree", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(90)==1.5707963267948966\n    assert candidate(60)==1.0471975511965976\n    assert candidate(120)==2.0943951023931953\n\n", "language": "python", "description": "Write a function to convert degrees to radians."}
{"task_id": "MBPP/607", "prompt": "\n\ndef find_literals(text, pattern):\n  \"\"\"\n  Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n  >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n  ('fox', 16, 19)\n  >>> find_literals('Its been a very crazy procedure right', 'crazy')\n  ('crazy', 16, 21)\n  >>> find_literals('Hardest choices required strongest will', 'will')\n  ('will', 35, 39)\n  \"\"\"\n", "canonical_solution": "  import re\n  pattern = 'fox'\n  text = 'The quick brown fox jumps over the lazy dog.'\n  \n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)", "entry_point": "find_literals", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    assert candidate('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n    assert candidate('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n\n", "language": "python", "description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex."}
{"task_id": "MBPP/608", "prompt": "\n\ndef bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    >>> bell_Number(2)\n    2\n    >>> bell_Number(3)\n    5\n    >>> bell_Number(4)\n    15\n    \"\"\"\n", "canonical_solution": "     \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] ", "entry_point": "bell_Number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 2\n    assert candidate(3) == 5\n    assert candidate(4) == 15\n\n", "language": "python", "description": "Write a python function to find nth bell number."}
{"task_id": "MBPP/609", "prompt": "\n\ndef floor_Min(A,B,N):\n    \"\"\"\n    Write a python function to find minimum possible value for the given periodic function.\n    >>> floor_Min(10,20,30)\n    15\n    >>> floor_Min(1,2,1)\n    0\n    >>> floor_Min(11,10,9)\n    9\n    \"\"\"\n", "canonical_solution": "    \n    x = max(B - 1,N)\n    return (A*x) // B", "entry_point": "floor_Min", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,20,30) == 15\n    assert candidate(1,2,1) == 0\n    assert candidate(11,10,9) == 9\n\n", "language": "python", "description": "Write a python function to find minimum possible value for the given periodic function."}
{"task_id": "MBPP/610", "prompt": "\n\ndef remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function to remove the k'th element from a given list.\n    >>> remove_kth_element([1,1,2,3,4,4,5,1],3)\n    [1, 1, 3, 4, 4, 5, 1]\n    >>> remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)\n    [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    >>> remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)\n    [10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n    \"\"\"\n", "canonical_solution": "    \n    return  list1[:L-1] + list1[L:]", "entry_point": "remove_kth_element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n\n", "language": "python", "description": "Write a python function to remove the k'th element from a given list."}
{"task_id": "MBPP/611", "prompt": "\n\ndef max_of_nth(test_list, N):\n  \"\"\"\n  Write a function to find the maximum of nth column from the given tuple list.\n  >>> max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n  19\n  >>> max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1)\n  10\n  >>> max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1)\n  11\n  \"\"\"\n", "canonical_solution": "  \n  res = max([sub[N] for sub in test_list])\n  return (res) ", "entry_point": "max_of_nth", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\n    assert candidate([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\n    assert candidate([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11\n\n", "language": "python", "description": "Write a function to find the maximum of nth column from the given tuple list."}
{"task_id": "MBPP/612", "prompt": "\n\ndef merge(lst):\n    \"\"\"\n    Write a python function to merge the first and last elements separately in a list of lists.\n    >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n    [['x', 'a', 'm'], ['y', 'b', 'n']]\n    >>> merge([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 3, 5, 7], [2, 4, 6, 8]]\n    >>> merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']])\n    [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]\n    \"\"\"\n", "canonical_solution": "      \n    return [list(ele) for ele in list(zip(*lst))] ", "entry_point": "merge", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n    assert candidate([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert candidate([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]\n\n", "language": "python", "description": "Write a python function to merge the first and last elements separately in a list of lists."}
{"task_id": "MBPP/613", "prompt": "\n\ndef maximum_value(test_list):\n  \"\"\"\n  Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n  >>> maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])])\n  [('key1', 5), ('key2', 4), ('key3', 9)]\n  >>> maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])])\n  [('key1', 6), ('key2', 5), ('key3', 10)]\n  >>> maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])])\n  [('key1', 7), ('key2', 6), ('key3', 11)]\n  \"\"\"\n", "canonical_solution": "  \n  res = [(key, max(lst)) for key, lst in test_list]\n  return (res) ", "entry_point": "maximum_value", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\n    assert candidate([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\n    assert candidate([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]\n\n", "language": "python", "description": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list."}
{"task_id": "MBPP/614", "prompt": "\n\ndef cummulative_sum(test_list):\n  \"\"\"\n  Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n  >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n  30\n  >>> cummulative_sum([(2, 4), (6, 7, 8), (3, 7)])\n  37\n  >>> cummulative_sum([(3, 5), (7, 8, 9), (4, 8)])\n  44\n  \"\"\"\n", "canonical_solution": "  \n  res = sum(map(sum, test_list))\n  return (res)", "entry_point": "cummulative_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(1, 3), (5, 6, 7), (2, 6)]) == 30\n    assert candidate([(2, 4), (6, 7, 8), (3, 7)]) == 37\n    assert candidate([(3, 5), (7, 8, 9), (4, 8)]) == 44\n\n", "language": "python", "description": "Write a function to find the cumulative sum of all the values that are present in the given tuple list."}
{"task_id": "MBPP/615", "prompt": "\n\ndef average_tuple(nums):\n    \"\"\"\n    Write a function to find average value of the numbers in a given tuple of tuples.\n    >>> average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))\n    [30.5, 34.25, 27.0, 23.25]\n    >>> average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))\n    [25.5, -18.0, 3.75]\n    >>> average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))\n    [305.0, 342.5, 270.0, 232.5]\n    \"\"\"\n", "canonical_solution": "    \n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result", "entry_point": "average_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n    assert candidate(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\n    assert candidate( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]\n\n", "language": "python", "description": "Write a function to find average value of the numbers in a given tuple of tuples."}
{"task_id": "MBPP/616", "prompt": "\n\ndef tuple_modulo(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perfom the modulo of tuple elements in the given two tuples.\n  >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n  (0, 4, 5, 1)\n  >>> tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6))\n  (5, 5, 6, 1)\n  >>> tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7))\n  (5, 6, 7, 1)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) ", "entry_point": "tuple_modulo", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n\n", "language": "python", "description": "Write a function to perfom the modulo of tuple elements in the given two tuples."}
{"task_id": "MBPP/617", "prompt": "\n\ndef min_Jumps(a, b, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    >>> min_Jumps(3,4,11)\n    3.5\n    >>> min_Jumps(3,4,0)\n    0\n    >>> min_Jumps(11,14,11)\n    1\n    \"\"\"\n", "canonical_solution": "     \n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2", "entry_point": "min_Jumps", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3,4,11)==3.5\n    assert candidate(3,4,0)==0\n    assert candidate(11,14,11)==1\n\n", "language": "python", "description": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane."}
{"task_id": "MBPP/618", "prompt": "\n\ndef div_list(nums1,nums2):\n  \"\"\"\n  Write a function to divide two lists using map and lambda function.\n  >>> div_list([4,5,6],[1, 2, 3])\n  [4.0,2.5,2.0]\n  >>> div_list([3,2],[1,4])\n  [3.0, 0.5]\n  >>> div_list([90,120],[50,70])\n  [1.8, 1.7142857142857142]\n  \"\"\"\n", "canonical_solution": "  \n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)", "entry_point": "div_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n    assert candidate([3,2],[1,4])==[3.0, 0.5]\n    assert candidate([90,120],[50,70])==[1.8, 1.7142857142857142]\n\n", "language": "python", "description": "Write a function to divide two lists using map and lambda function."}
{"task_id": "MBPP/619", "prompt": "\n\ndef move_num(test_str):\n  \"\"\"\n  Write a function to move all the numbers in it to the given string.\n  >>> move_num('I1love143you55three3000thousand')\n  'Iloveyouthreethousand1143553000'\n  >>> move_num('Avengers124Assemble')\n  'AvengersAssemble124'\n  >>> move_num('Its11our12path13to14see15things16do17things')\n  'Itsourpathtoseethingsdothings11121314151617'\n  \"\"\"\n", "canonical_solution": "  \n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) ", "entry_point": "move_num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\n", "language": "python", "description": "Write a function to move all the numbers in it to the given string."}
{"task_id": "MBPP/620", "prompt": "\n\ndef largest_subset(a, n):\n\t\"\"\"\n\tWrite a function to find the largest subset where each pair is divisible.\n\t>>> largest_subset([ 1, 3, 6, 13, 17, 18 ], 6)\n\t4\n\t>>> largest_subset([10, 5, 3, 15, 20], 5)\n\t3\n\t>>> largest_subset([18, 1, 3, 6, 13, 17], 6)\n\t4\n\t\"\"\"\n", "canonical_solution": "\t\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)", "entry_point": "largest_subset", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([ 1, 3, 6, 13, 17, 18 ], 6) == 4\n    assert candidate([10, 5, 3, 15, 20], 5) == 3\n    assert candidate([18, 1, 3, 6, 13, 17], 6) == 4\n\n", "language": "python", "description": "Write a function to find the largest subset where each pair is divisible."}
{"task_id": "MBPP/621", "prompt": "\n\ndef increment_numerics(test_list, K):\n  \"\"\"\n  Write a function to increment the numeric values in the given strings by k.\n  >>> increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6)\n  ['MSM', '240', 'is', '104', '129', 'best', '10']\n  >>> increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12)\n  ['Dart', '368', 'is', '100', '181', 'Super', '18']\n  >>> increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33)\n  ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']\n  \"\"\"\n", "canonical_solution": "  \n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\n  return res ", "entry_point": "increment_numerics", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\n    assert candidate([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\n    assert candidate([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']\n\n", "language": "python", "description": "Write a function to increment the numeric values in the given strings by k."}
{"task_id": "MBPP/622", "prompt": "\n\ndef get_median(arr1, arr2, n):\n  \"\"\"\n  Write a function to find the median of two sorted arrays of same size.\n  >>> get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n  16.0\n  >>> get_median([2, 4, 8, 9], [7, 13, 19, 28], 4)\n  8.5\n  >>> get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)\n  25.0\n  \"\"\"\n", "canonical_solution": "  \n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2", "entry_point": "get_median", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\n", "language": "python", "description": "Write a function to find the median of two sorted arrays of same size."}
{"task_id": "MBPP/623", "prompt": "\n\ndef nth_nums(nums,n):\n \"\"\"\n Write a function to find the n-th power of individual elements in a list using lambda function.\n >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)\n [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n >>> nth_nums([10,20,30],3)\n ([1000, 8000, 27000])\n >>> nth_nums([12,15],5)\n ([248832, 759375])\n \"\"\"\n", "canonical_solution": " \n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums", "entry_point": "nth_nums", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10,20,30],3)==([1000, 8000, 27000])\n    assert candidate([12,15],5)==([248832, 759375])\n\n", "language": "python", "description": "Write a function to find the n-th power of individual elements in a list using lambda function."}
{"task_id": "MBPP/624", "prompt": "\n\ndef is_upper(string):\n  \"\"\"\n  Write a python function to convert the given string to upper case.\n  >>> is_upper(\"person\")\n  \"PERSON\"\n  >>> is_upper(\"final\")\n  \"FINAL\"\n  >>> is_upper(\"Valid\")\n  \"VALID\"\n  \"\"\"\n", "canonical_solution": "  \n  return (string.upper())", "entry_point": "is_upper", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"person\") ==\"PERSON\"\n    assert candidate(\"final\") == \"FINAL\"\n    assert candidate(\"Valid\") == \"VALID\"\n\n", "language": "python", "description": "Write a python function to convert the given string to upper case."}
{"task_id": "MBPP/625", "prompt": "\n\ndef swap_List(newList):\n    \"\"\"\n    Write a python function to interchange first and last elements in a given list.\n    >>> swap_List([1,2,3])\n    [3,2,1]\n    >>> swap_List([1,2,3,4,4])\n    [4,2,3,4,1]\n    >>> swap_List([4,5,6])\n    [6,5,4]\n    \"\"\"\n", "canonical_solution": "     \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList ", "entry_point": "swap_List", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3]) == [3,2,1]\n    assert candidate([1,2,3,4,4]) == [4,2,3,4,1]\n    assert candidate([4,5,6]) == [6,5,4]\n\n", "language": "python", "description": "Write a python function to interchange first and last elements in a given list."}
{"task_id": "MBPP/626", "prompt": "\n\ndef triangle_area(r) :\n    \"\"\"\n    Write a python function to find the largest triangle that can be inscribed in the semicircle.\n    >>> triangle_area(0)\n    0\n    >>> triangle_area(-1)\n    -1\n    >>> triangle_area(2)\n    4\n    \"\"\"\n", "canonical_solution": "      \n    if r < 0 : \n        return -1\n    return r * r ", "entry_point": "triangle_area", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(0) == 0\n    assert candidate(-1) == -1\n    assert candidate(2) == 4\n\n", "language": "python", "description": "Write a python function to find the largest triangle that can be inscribed in the semicircle."}
{"task_id": "MBPP/627", "prompt": "\n\ndef find_First_Missing(array,start,end):\n    \"\"\"\n    Write a python function to find the smallest missing number from the given array.\n    >>> find_First_Missing([0,1,2,3],0,3)\n    4\n    >>> find_First_Missing([0,1,2,6,9],0,4)\n    3\n    >>> find_First_Missing([2,3,5,8,9],0,4)\n    0\n    \"\"\"\n", "canonical_solution": "     \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) ", "entry_point": "find_First_Missing", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([0,1,2,3],0,3) == 4\n    assert candidate([0,1,2,6,9],0,4) == 3\n    assert candidate([2,3,5,8,9],0,4) == 0\n\n", "language": "python", "description": "Write a python function to find the smallest missing number from the given array."}
{"task_id": "MBPP/628", "prompt": "\n\ndef replace_spaces(string):\n  \"\"\"\n  Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n  >>> replace_spaces(\"My Name is Dawood\")\n  'My%20Name%20is%20Dawood'\n  >>> replace_spaces(\"I am a Programmer\")\n  'I%20am%20a%20Programmer'\n  >>> replace_spaces(\"I love Coding\")\n  'I%20love%20Coding'\n  \"\"\"\n", "canonical_solution": "  MAX=1000;\n  \n  string=string.strip()\n  i=len(string)\n  space_count=string.count(' ')\n  new_length = i + space_count*2\n  if new_length > MAX:\n    return -1\n  index = new_length-1\n  string=list(string)\n  for f in range(i-2, new_length-2):\n    string.append('0')\n  for j in range(i-1, 0, -1):\n    if string[j] == ' ':\n      string[index] = '0'\n      string[index-1] = '2'\n      string[index-2] = '%'\n      index=index-3\n    else:\n      string[index] = string[j]\n      index -= 1\n  return ''.join(string)", "entry_point": "replace_spaces", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n    assert candidate(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\n    assert candidate(\"I love Coding\") == 'I%20love%20Coding'\n\n", "language": "python", "description": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'."}
{"task_id": "MBPP/629", "prompt": "\n\ndef Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a mixed list.\n    >>> Split([1,2,3,4,5])\n    [2,4]\n    >>> Split([4,5,6,7,8,0,1])\n    [4,6,8,0]\n    >>> Split ([8,12,15,19])\n    [8,12]\n    \"\"\"\n", "canonical_solution": "     \n    ev_li = [] \n    for i in list: \n        if (i % 2 == 0): \n            ev_li.append(i)  \n    return ev_li", "entry_point": "Split", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5]) == [2,4]\n    assert candidate([4,5,6,7,8,0,1]) == [4,6,8,0]\n    assert candidate ([8,12,15,19]) == [8,12]\n\n", "language": "python", "description": "Write a python function to find even numbers from a mixed list."}
{"task_id": "MBPP/630", "prompt": "\n\ndef get_coordinates(test_tup):\n  \"\"\"\n  Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n  >>> get_coordinates((3, 4))\n  [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n  >>> get_coordinates((4, 5))\n  [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n  >>> get_coordinates((5, 6))\n  [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n  \"\"\"\n", "canonical_solution": "  def adjac(ele, sub = []): \n    if not ele: \n       yield sub \n    else: \n       yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                  for idx in adjac(ele[1:], sub + [j])] \n  \n  res = list(adjac(test_tup))\n  return (res) ", "entry_point": "get_coordinates", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    assert candidate((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert candidate((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n\n", "language": "python", "description": "Write a function to extract all the adjacent coordinates of the given coordinate tuple."}
{"task_id": "MBPP/631", "prompt": "\n\ndef replace_spaces(text):\n  \"\"\"\n  Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n  >>> replace_spaces('Jumanji The Jungle')\n  'Jumanji_The_Jungle'\n  >>> replace_spaces('The Avengers')\n  'The_Avengers'\n  >>> replace_spaces('Fast and Furious')\n  'Fast_and_Furious'\n  \"\"\"\n", "canonical_solution": "  import re\n  text = 'Python Exercises'\n  \n  text =text.replace (\" \", \"_\")\n  return (text)\n  text =text.replace (\"_\", \" \")\n  return (text)", "entry_point": "replace_spaces", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n    assert candidate('The Avengers') == 'The_Avengers'\n    assert candidate('Fast and Furious') == 'Fast_and_Furious'\n\n", "language": "python", "description": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex."}
{"task_id": "MBPP/632", "prompt": "\n\ndef move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    >>> move_zero([1,0,2,0,3,4])\n    [1,2,3,4,0,0]\n    >>> move_zero([2,3,2,0,0,4,0,5,0])\n    [2,3,2,4,5,0,0,0,0]\n    >>> move_zero([0,1,0,1,1])\n    [1,1,1,0,0]\n    \"\"\"\n", "canonical_solution": "    \n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return (x)", "entry_point": "move_zero", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n    assert candidate([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\n    assert candidate([0,1,0,1,1]) == [1,1,1,0,0]\n\n", "language": "python", "description": "Write a python function to move all zeroes to the end of the given list."}
{"task_id": "MBPP/633", "prompt": "\n\ndef pair_OR_Sum(arr,n) :\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given array.\n    >>> pair_OR_Sum([5,9,7,6],4)\n    47\n    >>> pair_OR_Sum([7,3,5],3)\n    12\n    >>> pair_OR_Sum([7,3],2)\n    4\n    \"\"\"\n", "canonical_solution": "     \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans ", "entry_point": "pair_OR_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5,9,7,6],4) == 47\n    assert candidate([7,3,5],3) == 12\n    assert candidate([7,3],2) == 4\n\n", "language": "python", "description": "Write a python function to find the sum of xor of all pairs of numbers in the given array."}
{"task_id": "MBPP/634", "prompt": "\n\ndef even_Power_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    >>> even_Power_Sum(2)\n    272\n    >>> even_Power_Sum(3)\n    1568\n    >>> even_Power_Sum(4)\n    5664\n    \"\"\"\n", "canonical_solution": "     \n    sum = 0; \n    for i in range(1,n + 1): \n        j = 2*i; \n        sum = sum + (j*j*j*j); \n    return sum; ", "entry_point": "even_Power_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 272\n    assert candidate(3) == 1568\n    assert candidate(4) == 5664\n\n", "language": "python", "description": "Write a python function to find the sum of fourth power of first n even natural numbers."}
{"task_id": "MBPP/635", "prompt": "\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to push all values into a heap and then pop off the smallest values one at a time.\n    >>> heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])\n    [14, 22, 25, 25, 35, 58, 65, 75, 85]\n    >>> heap_sort( [7, 1, 9, 5])\n    [1,5,7,9]\n    \"\"\"\n", "canonical_solution": "    import heapq as hq\n    \n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]", "entry_point": "heap_sort", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate( [7, 1, 9, 5])==[1,5,7,9]\n\n", "language": "python", "description": "Write a function to push all values into a heap and then pop off the smallest values one at a time."}
{"task_id": "MBPP/636", "prompt": "\n\ndef Check_Solution(a,b,c):\n    \"\"\"\n    Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n    >>> Check_Solution(2,0,2)\n    \"Yes\"\n    >>> Check_Solution(2,-5,2)\n    \"Yes\"\n    >>> Check_Solution(1,2,3)\n    \"No\"\n    \"\"\"\n", "canonical_solution": "     \n    if (a == c): \n        return (\"Yes\"); \n    else: \n        return (\"No\"); ", "entry_point": "Check_Solution", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2,0,2) == \"Yes\"\n    assert candidate(2,-5,2) == \"Yes\"\n    assert candidate(1,2,3) == \"No\"\n\n", "language": "python", "description": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not."}
{"task_id": "MBPP/637", "prompt": "\n\ndef noprofit_noloss(actual_cost,sale_amount):\n  \"\"\"\n  Write a function to check whether the given amount has no profit and no loss\n  >>> noprofit_noloss(1500,1200)\n  False\n  >>> noprofit_noloss(100,100)\n  True\n  >>> noprofit_noloss(2000,5000)\n  False\n  \"\"\"\n", "canonical_solution": "   \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False", "entry_point": "noprofit_noloss", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1500,1200)==False\n    assert candidate(100,100)==True\n    assert candidate(2000,5000)==False\n\n", "language": "python", "description": "Write a function to check whether the given amount has no profit and no loss"}
{"task_id": "MBPP/638", "prompt": "\n\ndef wind_chill(v,t):\n \"\"\"\n Write a function to calculate wind chill index.\n >>> wind_chill(120,35)\n 40\n >>> wind_chill(40,70)\n 86\n >>> wind_chill(10,100)\n 116\n \"\"\"\n", "canonical_solution": " import math\n \n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))", "entry_point": "wind_chill", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(120,35)==40\n    assert candidate(40,70)==86\n    assert candidate(10,100)==116\n\n", "language": "python", "description": "Write a function to calculate wind chill index."}
{"task_id": "MBPP/639", "prompt": "\n\ndef sample_nam(sample_names):\n  \"\"\"\n  Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n  >>> sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n  16\n  >>> sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n  10\n  >>> sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])\n  6\n  \"\"\"\n", "canonical_solution": "  \n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))", "entry_point": "sample_nam", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n    assert candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\n    assert candidate([\"abcd\", \"Python\", \"abba\", \"aba\"])==6\n\n", "language": "python", "description": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter."}
{"task_id": "MBPP/640", "prompt": "\n\ndef remove_parenthesis(items):\n \"\"\"\n Write a function to remove the parenthesis area in a string.\n >>> remove_parenthesis([\"python (chrome)\"])\n (\"python\")\n >>> remove_parenthesis([\"string(.abc)\"])\n (\"string\")\n >>> remove_parenthesis([\"alpha(num)\"])\n (\"alpha\")\n \"\"\"\n", "canonical_solution": " import re\n \n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "entry_point": "remove_parenthesis", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"python (chrome)\"])==(\"python\")\n    assert candidate([\"string(.abc)\"])==(\"string\")\n    assert candidate([\"alpha(num)\"])==(\"alpha\")\n\n", "language": "python", "description": "Write a function to remove the parenthesis area in a string."}
{"task_id": "MBPP/641", "prompt": "\n\ndef is_nonagonal(n):\n\t\"\"\"\n\tWrite a function to find the nth nonagonal number.\n\t>>> is_nonagonal(10)\n\t325\n\t>>> is_nonagonal(15)\n\t750\n\t>>> is_nonagonal(18)\n\t1089\n\t\"\"\"\n", "canonical_solution": "\t \n\treturn int(n * (7 * n - 5) / 2) ", "entry_point": "is_nonagonal", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 325\n    assert candidate(15) == 750\n    assert candidate(18) == 1089\n\n", "language": "python", "description": "Write a function to find the nth nonagonal number."}
{"task_id": "MBPP/642", "prompt": "\n\ndef remove_similar_row(test_list):\n  \"\"\"\n  Write a function to remove similar rows from the given tuple matrix.\n  >>> remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] )\n  {((4, 6), (2, 2)), ((4, 5), (3, 2))}\n  >>> remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] )\n  {((5, 6), (4, 3)), ((5, 7), (3, 3))}\n  >>> remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] )\n  {((5, 4), (6, 7)), ((4, 4), (6, 8))}\n  \"\"\"\n", "canonical_solution": "  \n  res = set([tuple(set(sub)) for sub in test_list])\n  return (res) ", "entry_point": "remove_similar_row", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((4, 6), (2, 2)), ((4, 5), (3, 2))}\n    assert candidate([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((5, 6), (4, 3)), ((5, 7), (3, 3))}\n    assert candidate([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((5, 4), (6, 7)), ((4, 4), (6, 8))}\n\n", "language": "python", "description": "Write a function to remove similar rows from the given tuple matrix."}
{"task_id": "MBPP/643", "prompt": "\n\ndef text_match_wordz_middle(text):\n        \"\"\"\n        Write a function that matches a word containing 'z', not at the start or end of the word.\n        >>> text_match_wordz_middle(\"pythonzabc.\")\n        ('Found a match!')\n        >>> text_match_wordz_middle(\"xyzabc.\")\n        ('Found a match!')\n        >>> text_match_wordz_middle(\"  lang  .\")\n        ('Not matched!')\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        patterns = '\\Bz\\B'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "entry_point": "text_match_wordz_middle", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"pythonzabc.\")==('Found a match!')\n    assert candidate(\"xyzabc.\")==('Found a match!')\n    assert candidate(\"  lang  .\")==('Not matched!')\n\n", "language": "python", "description": "Write a function that matches a word containing 'z', not at the start or end of the word."}
{"task_id": "MBPP/644", "prompt": "\n\ndef reverse_Array_Upto_K(input, k):\n  \"\"\"\n  Write a python function to reverse an array upto a given position.\n  >>> reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4)\n  [4, 3, 2, 1, 5, 6]\n  >>> reverse_Array_Upto_K([4, 5, 6, 7], 2)\n  [5, 4, 6, 7]\n  >>> reverse_Array_Upto_K([9, 8, 7, 6, 5],3)\n  [7, 8, 9, 6, 5]\n  \"\"\"\n", "canonical_solution": "   \n  return (input[k-1::-1] + input[k:]) ", "entry_point": "reverse_Array_Upto_K", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n    assert candidate([4, 5, 6, 7], 2) == [5, 4, 6, 7]\n    assert candidate([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]\n\n", "language": "python", "description": "Write a python function to reverse an array upto a given position."}
{"task_id": "MBPP/645", "prompt": "\n\ndef find_k_product(test_list, K):\n  \"\"\"\n  Write a function to find the product of it\u2019s kth index in the given tuples.\n  >>> find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n  665\n  >>> find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1)\n  280\n  >>> find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0)\n  210\n  \"\"\"\n", "canonical_solution": "  def get_product(val) : \n  \tres = 1\n  \tfor ele in val: \n  \t\tres *= ele \n  \treturn res \n  \n  res = get_product([sub[K] for sub in test_list])\n  return (res) ", "entry_point": "find_k_product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\n    assert candidate([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\n    assert candidate([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210\n\n", "language": "python", "description": "Write a function to find the product of it\u2019s kth index in the given tuples."}
{"task_id": "MBPP/646", "prompt": "\n\ndef No_of_cubes(N,K):\n    \"\"\"\n    Write a python function to count number of cubes of size k in a cube of size n.\n    >>> No_of_cubes(2,1)\n    8\n    >>> No_of_cubes(5,2)\n    64\n    >>> No_of_cubes(1,1)\n    1\n    \"\"\"\n", "canonical_solution": "    \n    No = 0\n    No = (N - K + 1)\n    No = pow(No, 3)\n    return No", "entry_point": "No_of_cubes", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2,1) == 8\n    assert candidate(5,2) == 64\n    assert candidate(1,1) == 1\n\n", "language": "python", "description": "Write a python function to count number of cubes of size k in a cube of size n."}
{"task_id": "MBPP/647", "prompt": "\n\ndef split_upperstring(text):\n \"\"\"\n Write a function to split a string at uppercase letters.\n >>> split_upperstring(\"PythonProgramLanguage\")\n ['Python','Program','Language']\n >>> split_upperstring(\"PythonProgram\")\n ['Python','Program']\n >>> split_upperstring(\"ProgrammingLanguage\")\n ['Programming','Language']\n \"\"\"\n", "canonical_solution": " import re\n \n return (re.findall('[A-Z][^A-Z]*', text))", "entry_point": "split_upperstring", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"PythonProgramLanguage\")==['Python','Program','Language']\n    assert candidate(\"PythonProgram\")==['Python','Program']\n    assert candidate(\"ProgrammingLanguage\")==['Programming','Language']\n\n", "language": "python", "description": "Write a function to split a string at uppercase letters."}
{"task_id": "MBPP/648", "prompt": "\n\ndef exchange_elements(lst):\n    \"\"\"\n    Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n    >>> exchange_elements([0,1,2,3,4,5])\n    [1, 0, 3, 2, 5, 4]\n    >>> exchange_elements([5,6,7,8,9,10])\n    [6,5,8,7,10,9]\n    >>> exchange_elements([25,35,45,55,75,95])\n    [35,25,55,45,95,75]\n    \"\"\"\n", "canonical_solution": "    from itertools import zip_longest, chain, tee\n    \n    lst1, lst2 = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))", "entry_point": "exchange_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \n    assert candidate([5,6,7,8,9,10])==[6,5,8,7,10,9] \n    assert candidate([25,35,45,55,75,95])==[35,25,55,45,95,75] \n\n", "language": "python", "description": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list."}
{"task_id": "MBPP/649", "prompt": "\n\ndef sum_Range_list(nums, m, n):\n    \"\"\"\n    Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n    >>> sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10)\n    29\n    >>> sum_Range_list([1,2,3,4,5],1,2)\n    5\n    >>> sum_Range_list([1,0,1,2,5,6],4,5)\n    11\n    \"\"\"\n", "canonical_solution": "                                                                                                                                                                                                    \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += nums[i]                                                                                                                                                                                                  \n    return sum_range   ", "entry_point": "sum_Range_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\n    assert candidate([1,2,3,4,5],1,2) == 5\n    assert candidate([1,0,1,2,5,6],4,5) == 11\n\n", "language": "python", "description": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range."}
{"task_id": "MBPP/650", "prompt": "\n\ndef are_Equal(arr1,arr2,n,m):\n    \"\"\"\n    Write a python function to check whether the given two arrays are equal or not.\n    >>> are_Equal([1,2,3],[3,2,1],3,3)\n    True\n    >>> are_Equal([1,1,1],[2,2,2],3,3)\n    False\n    >>> are_Equal([8,9],[4,5,6],2,3)\n    False\n    \"\"\"\n", "canonical_solution": "    \n    if (n != m):\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0,n - 1):\n        if (arr1[i] != arr2[i]):\n            return False\n    return True", "entry_point": "are_Equal", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3],[3,2,1],3,3) == True\n    assert candidate([1,1,1],[2,2,2],3,3) == False\n    assert candidate([8,9],[4,5,6],2,3) == False\n\n", "language": "python", "description": "Write a python function to check whether the given two arrays are equal or not."}
{"task_id": "MBPP/651", "prompt": "\n\ndef check_subset(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to check if one tuple is a subset of another tuple.\n  >>> check_subset((10, 4, 5, 6), (5, 10))\n  True\n  >>> check_subset((1, 2, 3, 4), (5, 6))\n  False\n  >>> check_subset((7, 8, 9, 10), (10, 8))\n  True\n  \"\"\"\n", "canonical_solution": "  \n  res = set(test_tup2).issubset(test_tup1)\n  return (res) ", "entry_point": "check_subset", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 10)) == True\n    assert candidate((1, 2, 3, 4), (5, 6)) == False\n    assert candidate((7, 8, 9, 10), (10, 8)) == True\n\n", "language": "python", "description": "Write a function to check if one tuple is a subset of another tuple."}
{"task_id": "MBPP/652", "prompt": "\n\ndef matrix_to_list(test_list):\n  \"\"\"\n  Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n  >>> matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]])\n  '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\n  >>> matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]])\n  '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\n  >>> matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]])\n  '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'\n  \"\"\"\n", "canonical_solution": "  \n  temp = [ele for sub in test_list for ele in sub]\n  res = list(zip(*temp))\n  return (str(res))", "entry_point": "matrix_to_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\n    assert candidate([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\n    assert candidate([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'\n\n", "language": "python", "description": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column."}
{"task_id": "MBPP/653", "prompt": "\n\ndef grouping_dictionary(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n    >>> grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])\n    ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\n    >>> grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])\n    ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\n    >>> grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])\n    ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})\n    \"\"\"\n", "canonical_solution": "    from collections import defaultdict\n    \n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d", "entry_point": "grouping_dictionary", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\n    assert candidate([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\n    assert candidate([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})\n\n", "language": "python", "description": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module."}
{"task_id": "MBPP/654", "prompt": "\n\ndef rectangle_perimeter(l,b):\n  \"\"\"\n  Write a function to find the perimeter of a rectangle.\n  >>> rectangle_perimeter(10,20)\n  60\n  >>> rectangle_perimeter(10,5)\n  30\n  >>> rectangle_perimeter(4,2)\n  12\n  \"\"\"\n", "canonical_solution": "  \n  perimeter=2*(l+b)\n  return perimeter", "entry_point": "rectangle_perimeter", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,20)==60\n    assert candidate(10,5)==30\n    assert candidate(4,2)==12\n\n", "language": "python", "description": "Write a function to find the perimeter of a rectangle."}
{"task_id": "MBPP/655", "prompt": "\n\ndef fifth_Power_Sum(n) :\n    \"\"\"\n    Write a python function to find the sum of fifth power of n natural numbers.\n    >>> fifth_Power_Sum(2)\n    33\n    >>> fifth_Power_Sum(4)\n    1300\n    >>> fifth_Power_Sum(3)\n    276\n    \"\"\"\n", "canonical_solution": "     \n    sm = 0 \n    for i in range(1,n+1) : \n        sm = sm + (i*i*i*i*i) \n    return sm ", "entry_point": "fifth_Power_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 33\n    assert candidate(4) == 1300\n    assert candidate(3) == 276\n\n", "language": "python", "description": "Write a python function to find the sum of fifth power of n natural numbers."}
{"task_id": "MBPP/656", "prompt": "\n\ndef find_Min_Sum(a,b,n):\n    \"\"\"\n    Write a python function to find the minimum sum of absolute differences of two arrays.\n    >>> find_Min_Sum([3,2,1],[2,1,3],3)\n    0\n    >>> find_Min_Sum([1,2,3],[4,5,6],3)\n    9\n    >>> find_Min_Sum([4,1,8,7],[2,3,6,5],4)\n    6\n    \"\"\"\n", "canonical_solution": "     \n    a.sort() \n    b.sort() \n    sum = 0  \n    for i in range(n): \n        sum = sum + abs(a[i] - b[i]) \n    return sum", "entry_point": "find_Min_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3,2,1],[2,1,3],3) == 0\n    assert candidate([1,2,3],[4,5,6],3) == 9\n    assert candidate([4,1,8,7],[2,3,6,5],4) == 6\n\n", "language": "python", "description": "Write a python function to find the minimum sum of absolute differences of two arrays."}
{"task_id": "MBPP/657", "prompt": "\n\ndef first_Digit(n) :\n    \"\"\"\n    Write a python function to find the first digit in factorial of a given number.\n    >>> first_Digit(5)\n    1\n    >>> first_Digit(10)\n    3\n    >>> first_Digit(7)\n    5\n    \"\"\"\n", "canonical_solution": "    import math \n     \n    fact = 1\n    for i in range(2,n + 1) : \n        fact = fact * i \n        while (fact % 10 == 0) :  \n            fact = int(fact / 10) \n    while (fact >= 10) : \n        fact = int(fact / 10) \n    return math.floor(fact) ", "entry_point": "first_Digit", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(10) == 3\n    assert candidate(7) == 5\n\n", "language": "python", "description": "Write a python function to find the first digit in factorial of a given number."}
{"task_id": "MBPP/658", "prompt": "\n\ndef max_occurrences(list1):\n    \"\"\"\n    Write a function to find the item with maximum occurrences in a given list.\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])\n    2\n    >>> max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])\n    1\n    >>> max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])\n    1\n    \"\"\"\n", "canonical_solution": "    \n    max_val = 0\n    result = list1[0] \n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result", "entry_point": "max_occurrences", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\n    assert candidate([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\n    assert candidate([1, 2, 3,2, 4, 5,1, 1, 1])==1\n\n", "language": "python", "description": "Write a function to find the item with maximum occurrences in a given list."}
{"task_id": "MBPP/659", "prompt": "\n\ndef Repeat(x):\n    \"\"\"\n    Write a python function to print duplicants from a list of integers.\n    >>> Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20])\n    [20, 30, -20, 60]\n    >>> Repeat([-1, 1, -1, 8])\n    [-1]\n    >>> Repeat([1, 2, 3, 1, 2,])\n    [1, 2]\n    \"\"\"\n", "canonical_solution": "     \n    _size = len(x) \n    repeated = [] \n    for i in range(_size): \n        k = i + 1\n        for j in range(k, _size): \n            if x[i] == x[j] and x[i] not in repeated: \n                repeated.append(x[i]) \n    return repeated ", "entry_point": "Repeat", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\n    assert candidate([-1, 1, -1, 8]) == [-1]\n    assert candidate([1, 2, 3, 1, 2,]) == [1, 2]\n\n", "language": "python", "description": "Write a python function to print duplicants from a list of integers."}
{"task_id": "MBPP/660", "prompt": "\n\ndef find_Points(l1,r1,l2,r2):\n    \"\"\"\n    Write a python function to choose points from two ranges such that no point lies in both the ranges.\n    >>> find_Points(5,10,1,5)\n    (1,10)\n    >>> find_Points(3,5,7,9)\n    (3,9)\n    >>> find_Points(1,5,2,8)\n    (1,8)\n    \"\"\"\n", "canonical_solution": "     \n    x = min(l1,l2) if (l1 != l2) else -1\n    y = max(r1,r2) if (r1 != r2) else -1\n    return (x,y)", "entry_point": "find_Points", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5,10,1,5) == (1,10)\n    assert candidate(3,5,7,9) == (3,9)\n    assert candidate(1,5,2,8) == (1,8)\n\n", "language": "python", "description": "Write a python function to choose points from two ranges such that no point lies in both the ranges."}
{"task_id": "MBPP/661", "prompt": "\n\ndef max_sum_of_three_consecutive(arr, n):\n\t\"\"\"\n\tWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\t>>> max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5)\n\t2101\n\t>>> max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5)\n\t5013\n\t>>> max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8)\n\t27\n\t\"\"\"\n", "canonical_solution": "\t \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = arr[0] + arr[1] \n\tif n > 2: \n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \n\tfor i in range(3, n): \n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \n\treturn sum[n-1]", "entry_point": "max_sum_of_three_consecutive", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([100, 1000, 100, 1000, 1], 5) == 2101\n    assert candidate([3000, 2000, 1000, 3, 10], 5) == 5013\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27\n\n", "language": "python", "description": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present."}
{"task_id": "MBPP/662", "prompt": "\n\ndef sorted_dict(dict1):\n  \"\"\"\n  Write a function to sort a list in a dictionary.\n  >>> sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})\n  {'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\n  >>> sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})\n  {'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\n  >>> sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})\n  {'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}\n  \"\"\"\n", "canonical_solution": "  \n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n  return sorted_dict", "entry_point": "sorted_dict", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\n    assert candidate({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\n    assert candidate({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}\n\n", "language": "python", "description": "Write a function to sort a list in a dictionary."}
{"task_id": "MBPP/663", "prompt": "\n\ndef find_max_val(n, x, y):\n\t\"\"\"\n\tWrite a function to find the largest possible value of k such that k modulo x is y.\n\t>>> find_max_val(15, 10, 5)\n\t15\n\t>>> find_max_val(187, 10, 5)\n\t185\n\t>>> find_max_val(16, 11, 1)\n\t12\n\t\"\"\"\n", "canonical_solution": "\timport sys \n\t \n\tans = -sys.maxsize \n\tfor k in range(n + 1): \n\t\tif (k % x == y): \n\t\t\tans = max(ans, k) \n\treturn (ans if (ans >= 0 and\n\t\t\t\t\tans <= n) else -1) ", "entry_point": "find_max_val", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15, 10, 5) == 15\n    assert candidate(187, 10, 5) == 185\n    assert candidate(16, 11, 1) == 12\n\n", "language": "python", "description": "Write a function to find the largest possible value of k such that k modulo x is y."}
{"task_id": "MBPP/664", "prompt": "\n\ndef average_Even(n) :\n    \"\"\"\n    Write a python function to find the average of even numbers till a given even number.\n    >>> average_Even(2)\n    2\n    >>> average_Even(4)\n    3\n    >>> average_Even(100)\n    51\n    \"\"\"\n", "canonical_solution": "     \n    if (n% 2!= 0) : \n        return (\"Invalid Input\") \n        return -1  \n    sm = 0\n    count = 0\n    while (n>= 2) : \n        count = count+1\n        sm = sm+n \n        n = n-2\n    return sm // count ", "entry_point": "average_Even", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 2\n    assert candidate(4) == 3\n    assert candidate(100) == 51\n\n", "language": "python", "description": "Write a python function to find the average of even numbers till a given even number."}
{"task_id": "MBPP/665", "prompt": "\n\ndef move_last(num_list):\n    \"\"\"\n    Write a python function to shift first element to the end of given list.\n    >>> move_last([1,2,3,4])\n    [2,3,4,1]\n    >>> move_last([2,3,4,1,5,0])\n    [3,4,1,5,0,2]\n    >>> move_last([5,4,3,2,1])\n    [4,3,2,1,5]\n    \"\"\"\n", "canonical_solution": "    \n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return (x)", "entry_point": "move_last", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4]) == [2,3,4,1]\n    assert candidate([2,3,4,1,5,0]) == [3,4,1,5,0,2]\n    assert candidate([5,4,3,2,1]) == [4,3,2,1,5]\n\n", "language": "python", "description": "Write a python function to shift first element to the end of given list."}
{"task_id": "MBPP/666", "prompt": "\n\ndef count_char(string,char):\n \"\"\"\n Write a function to count occurrence of a character in a string.\n >>> count_char(\"Python\",'o')\n 1\n >>> count_char(\"little\",'t')\n 2\n >>> count_char(\"assert\",'s')\n 2\n \"\"\"\n", "canonical_solution": " \n count = 0\n for i in range(len(string)):\n    if(string[i] == char):\n        count = count + 1\n return count", "entry_point": "count_char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"Python\",'o')==1\n    assert candidate(\"little\",'t')==2\n    assert candidate(\"assert\",'s')==2\n\n", "language": "python", "description": "Write a function to count occurrence of a character in a string."}
{"task_id": "MBPP/667", "prompt": "\n\ndef Check_Vow(string, vowels):\n    \"\"\"\n    Write a python function to count number of vowels in the string.\n    >>> Check_Vow('corner','AaEeIiOoUu')\n    2\n    >>> Check_Vow('valid','AaEeIiOoUu')\n    2\n    >>> Check_Vow('true','AaEeIiOoUu')\n    2\n    \"\"\"\n", "canonical_solution": "     \n    final = [each for each in string if each in vowels] \n    return(len(final)) \n", "entry_point": "Check_Vow", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('corner','AaEeIiOoUu') == 2\n    assert candidate('valid','AaEeIiOoUu') == 2\n    assert candidate('true','AaEeIiOoUu') ==2\n\n", "language": "python", "description": "Write a python function to count number of vowels in the string."}
{"task_id": "MBPP/668", "prompt": "\n\ndef replace(string, char):\n    \"\"\"\n    Write a python function to replace multiple occurence of character by single.\n    >>> replace('peep','e')\n    'pep'\n    >>> replace('Greek','e')\n    'Grek'\n    >>> replace('Moon','o')\n    'Mon'\n    \"\"\"\n", "canonical_solution": "    import re \n     \n    pattern = char + '{2,}'\n    string = re.sub(pattern, char, string) \n    return string ", "entry_point": "replace", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('peep','e') == 'pep'\n    assert candidate('Greek','e') == 'Grek'\n    assert candidate('Moon','o') == 'Mon'\n\n", "language": "python", "description": "Write a python function to replace multiple occurence of character by single."}
{"task_id": "MBPP/669", "prompt": "\n\ndef check_IP(Ip):\n\t\"\"\"\n\tWrite a function to check whether the given ip address is valid or not using regex.\n\t>>> check_IP(\"192.168.0.1\")\n\t'Valid IP address'\n\t>>> check_IP(\"110.234.52.124\")\n\t'Valid IP address'\n\t>>> check_IP(\"366.1.2.2\")\n\t'Invalid IP address'\n\t\"\"\"\n", "canonical_solution": "\timport re \n\tregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\t\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\t\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\t\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\n\t \n\tif(re.search(regex, Ip)): \n\t\treturn (\"Valid IP address\") \n\telse: \n\t\treturn (\"Invalid IP address\") ", "entry_point": "check_IP", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"192.168.0.1\") == 'Valid IP address'\n    assert candidate(\"110.234.52.124\") == 'Valid IP address'\n    assert candidate(\"366.1.2.2\") == 'Invalid IP address'\n\n", "language": "python", "description": "Write a function to check whether the given ip address is valid or not using regex."}
{"task_id": "MBPP/670", "prompt": "\n\ndef decreasing_trend(nums):\n    \"\"\"\n    Write a python function to check whether a sequence of numbers has a decreasing trend or not.\n    >>> decreasing_trend([-4,-3,-2,-1])\n    True\n    >>> decreasing_trend([1,2,3])\n    True\n    >>> decreasing_trend([3,2,1])\n    False\n    \"\"\"\n", "canonical_solution": "    \n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False", "entry_point": "decreasing_trend", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-4,-3,-2,-1]) == True\n    assert candidate([1,2,3]) == True\n    assert candidate([3,2,1]) == False\n\n", "language": "python", "description": "Write a python function to check whether a sequence of numbers has a decreasing trend or not."}
{"task_id": "MBPP/671", "prompt": "\n\ndef set_Right_most_Unset_Bit(n):\n    \"\"\"\n    Write a python function to set the right most unset bit.\n    >>> set_Right_most_Unset_Bit(21)\n    23\n    >>> set_Right_most_Unset_Bit(11)\n    15\n    >>> set_Right_most_Unset_Bit(15)\n    15\n    \"\"\"\n", "canonical_solution": "    import math \n    def get_Pos_Of_Right_most_Set_Bit(n): \n        return int(math.log2(n&-n)+1)   \n     \n    if (n == 0): \n        return 1\n    if ((n & (n + 1)) == 0):     \n        return n \n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \n    return ((1 << (pos - 1)) | n) ", "entry_point": "set_Right_most_Unset_Bit", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(21) == 23\n    assert candidate(11) == 15\n    assert candidate(15) == 15\n\n", "language": "python", "description": "Write a python function to set the right most unset bit."}
{"task_id": "MBPP/672", "prompt": "\n\ndef max_of_three(num1,num2,num3):\n    \"\"\"\n    Write a function to find maximum of three numbers.\n    >>> max_of_three(10,20,30)\n    30\n    >>> max_of_three(55,47,39)\n    55\n    >>> max_of_three(10,49,30)\n    49\n    \"\"\"\n", "canonical_solution": "     \n    if (num1 >= num2) and (num1 >= num3):\n       lnum = num1\n    elif (num2 >= num1) and (num2 >= num3):\n       lnum = num2\n    else:\n       lnum = num3\n    return lnum", "entry_point": "max_of_three", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,20,30)==30\n    assert candidate(55,47,39)==55\n    assert candidate(10,49,30)==49\n\n", "language": "python", "description": "Write a function to find maximum of three numbers."}
{"task_id": "MBPP/673", "prompt": "\n\ndef convert(list):\n    \"\"\"\n    Write a python function to convert a list of multiple integers into a single integer.\n    >>> convert([1,2,3])\n    123\n    >>> convert([4,5,6])\n    456\n    >>> convert([7,8,9])\n    789\n    \"\"\"\n", "canonical_solution": "     \n    s = [str(i) for i in list] \n    res = int(\"\".join(s))  \n    return (res) ", "entry_point": "convert", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3]) == 123\n    assert candidate([4,5,6]) == 456\n    assert candidate([7,8,9]) == 789\n\n", "language": "python", "description": "Write a python function to convert a list of multiple integers into a single integer."}
{"task_id": "MBPP/674", "prompt": "\n\ndef remove_duplicate(string):\n  \"\"\"\n  Write a function to remove duplicate words from a given string using collections module.\n  >>> remove_duplicate(\"Python Exercises Practice Solution Exercises\")\n  (\"Python Exercises Practice Solution\")\n  >>> remove_duplicate(\"Python Exercises Practice Solution Python\")\n  (\"Python Exercises Practice Solution\")\n  >>> remove_duplicate(\"Python Exercises Practice Solution Practice\")\n  (\"Python Exercises Practice Solution\")\n  \"\"\"\n", "canonical_solution": "  from collections import OrderedDict\n  \n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\n  return result", "entry_point": "remove_duplicate", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\n    assert candidate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\n    assert candidate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")\n\n", "language": "python", "description": "Write a function to remove duplicate words from a given string using collections module."}
{"task_id": "MBPP/675", "prompt": "\n\ndef sum_nums(x, y,m,n):\n    \"\"\"\n    Write a function to add two integers. however, if the sum is between the given range it will return 20.\n    >>> sum_nums(2,10,11,20)\n    20\n    >>> sum_nums(15,17,1,10)\n    32\n    >>> sum_nums(10,15,5,30)\n    20\n    \"\"\"\n", "canonical_solution": "    \n    sum_nums= x + y\n    if sum_nums in range(m, n):\n        return 20\n    else:\n        return sum_nums", "entry_point": "sum_nums", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2,10,11,20)==20\n    assert candidate(15,17,1,10)==32\n    assert candidate(10,15,5,30)==20\n\n", "language": "python", "description": "Write a function to add two integers. however, if the sum is between the given range it will return 20."}
{"task_id": "MBPP/676", "prompt": "\n\ndef remove_extra_char(text1):\n  \"\"\"\n  Write a function to remove everything except alphanumeric characters from the given string by using regex.\n  >>> remove_extra_char('**//Google Android// - 12. ')\n  'GoogleAndroid12'\n  >>> remove_extra_char('****//Google Flutter//*** - 36. ')\n  'GoogleFlutter36'\n  >>> remove_extra_char('**//Google Firebase// - 478. ')\n  'GoogleFirebase478'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  pattern = re.compile('[\\W_]+')\n  return (pattern.sub('', text1))", "entry_point": "remove_extra_char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('**//Google Android// - 12. ') == 'GoogleAndroid12'\n    assert candidate('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\n    assert candidate('**//Google Firebase// - 478. ') == 'GoogleFirebase478'\n\n", "language": "python", "description": "Write a function to remove everything except alphanumeric characters from the given string by using regex."}
{"task_id": "MBPP/677", "prompt": "\n\ndef validity_triangle(a,b,c):\n \"\"\"\n Write a function to check if the triangle is valid or not.\n >>> validity_triangle(60,50,90)\n False\n >>> validity_triangle(45,75,60)\n True\n >>> validity_triangle(30,50,100)\n True\n \"\"\"\n", "canonical_solution": " \n total = a + b + c\n if total == 180:\n    return True\n else:\n    return False", "entry_point": "validity_triangle", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(60,50,90)==False\n    assert candidate(45,75,60)==True\n    assert candidate(30,50,100)==True\n\n", "language": "python", "description": "Write a function to check if the triangle is valid or not."}
{"task_id": "MBPP/678", "prompt": "\n\ndef remove_spaces(str1):\n  \"\"\"\n  Write a python function to remove spaces from a given string.\n  >>> remove_spaces(\"a b c\")\n  \"abc\"\n  >>> remove_spaces(\"1 2 3\")\n  \"123\"\n  >>> remove_spaces(\" b c\")\n  \"bc\"\n  \"\"\"\n", "canonical_solution": "  \n  str1 = str1.replace(' ','')\n  return str1", "entry_point": "remove_spaces", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"a b c\") == \"abc\"\n    assert candidate(\"1 2 3\") == \"123\"\n    assert candidate(\" b c\") == \"bc\"\n\n", "language": "python", "description": "Write a python function to remove spaces from a given string."}
{"task_id": "MBPP/679", "prompt": "\n\ndef access_key(ditionary,key):\n  \"\"\"\n  Write a function to access dictionary key\u2019s element by index.\n  >>> access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)\n  'physics'\n  >>> access_key({'python':10, 'java': 20, 'C++':30},2)\n  'C++'\n  >>> access_key({'program':15,'computer':45},1)\n  'computer'\n  \"\"\"\n", "canonical_solution": "  \n  return list(ditionary)[key]", "entry_point": "access_key", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\n    assert candidate({'python':10, 'java': 20, 'C++':30},2)== 'C++'\n    assert candidate({'program':15,'computer':45},1)== 'computer'\n\n", "language": "python", "description": "Write a function to access dictionary key\u2019s element by index."}
{"task_id": "MBPP/680", "prompt": "\n\ndef increasing_trend(nums):\n    \"\"\"\n    Write a python function to check whether a sequence of numbers has an increasing trend or not.\n    >>> increasing_trend([1,2,3,4])\n    True\n    >>> increasing_trend([4,3,2,1])\n    False\n    >>> increasing_trend([0,1,4,9])\n    True\n    \"\"\"\n", "canonical_solution": "    \n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False", "entry_point": "increasing_trend", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4]) == True\n    assert candidate([4,3,2,1]) == False\n    assert candidate([0,1,4,9]) == True\n\n", "language": "python", "description": "Write a python function to check whether a sequence of numbers has an increasing trend or not."}
{"task_id": "MBPP/681", "prompt": "\n\ndef smallest_Divisor(n):\n    \"\"\"\n    Write a python function to find the smallest prime divisor of a number.\n    >>> smallest_Divisor(10)\n    2\n    >>> smallest_Divisor(25)\n    5\n    >>> smallest_Divisor(31)\n    31\n    \"\"\"\n", "canonical_solution": "     \n    if (n % 2 == 0): \n        return 2; \n    i = 3;  \n    while (i*i <= n): \n        if (n % i == 0): \n            return i; \n        i += 2; \n    return n; ", "entry_point": "smallest_Divisor", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 2\n    assert candidate(25) == 5\n    assert candidate(31) == 31\n\n", "language": "python", "description": "Write a python function to find the smallest prime divisor of a number."}
{"task_id": "MBPP/682", "prompt": "\n\ndef mul_list(nums1,nums2):\n  \"\"\"\n  Write a function to multiply two lists using map and lambda function.\n  >>> mul_list([1, 2, 3],[4,5,6])\n  [4,10,18]\n  >>> mul_list([1,2],[3,4])\n  [3,8]\n  >>> mul_list([90,120],[50,70])\n  [4500,8400]\n  \"\"\"\n", "canonical_solution": "  \n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)", "entry_point": "mul_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3],[4,5,6])==[4,10,18]\n    assert candidate([1,2],[3,4])==[3,8]\n    assert candidate([90,120],[50,70])==[4500,8400]\n\n", "language": "python", "description": "Write a function to multiply two lists using map and lambda function."}
{"task_id": "MBPP/683", "prompt": "\n\ndef sum_Square(n) :\n    \"\"\"\n    Write a python function to check whether the given number can be represented by sum of two squares or not.\n    >>> sum_Square(25)\n    True\n    >>> sum_Square(24)\n    False\n    >>> sum_Square(17)\n    True\n    \"\"\"\n", "canonical_solution": "     \n    i = 1 \n    while i*i <= n : \n        j = 1\n        while (j*j <= n) : \n            if (i*i+j*j == n) : \n                return True\n            j = j+1\n        i = i+1     \n    return False", "entry_point": "sum_Square", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(25) == True\n    assert candidate(24) == False\n    assert candidate(17) == True\n\n", "language": "python", "description": "Write a python function to check whether the given number can be represented by sum of two squares or not."}
{"task_id": "MBPP/684", "prompt": "\n\ndef count_Char(str,x):\n    \"\"\"\n    Write a python function to count occurences of a character in a repeated string.\n    >>> count_Char(\"abcac\",'a')\n    4\n    >>> count_Char(\"abca\",'c')\n    2\n    >>> count_Char(\"aba\",'a')\n    7\n    \"\"\"\n", "canonical_solution": "     \n    count = 0\n    for i in range(len(str)):  \n        if (str[i] == x) : \n            count += 1\n    n = 10\n    repititions = n // len(str)  \n    count = count * repititions  \n    l = n % len(str)  \n    for i in range(l): \n        if (str[i] == x):  \n            count += 1\n    return count  ", "entry_point": "count_Char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"abcac\",'a') == 4\n    assert candidate(\"abca\",'c') == 2\n    assert candidate(\"aba\",'a') == 7\n\n", "language": "python", "description": "Write a python function to count occurences of a character in a repeated string."}
{"task_id": "MBPP/685", "prompt": "\n\ndef sum_Of_Primes(n):\n    \"\"\"\n    Write a python function to find sum of prime numbers between 1 to n.\n    >>> sum_Of_Primes(10)\n    17\n    >>> sum_Of_Primes(20)\n    77\n    >>> sum_Of_Primes(5)\n    10\n    \"\"\"\n", "canonical_solution": "     \n    prime = [True] * (n + 1)  \n    p = 2\n    while p * p <= n: \n        if prime[p] == True:  \n            i = p * 2\n            while i <= n: \n                prime[i] = False\n                i += p \n        p += 1    \n    sum = 0\n    for i in range (2,n + 1): \n        if(prime[i]): \n            sum += i \n    return sum", "entry_point": "sum_Of_Primes", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 17\n    assert candidate(20) == 77\n    assert candidate(5) == 10\n\n", "language": "python", "description": "Write a python function to find sum of prime numbers between 1 to n."}
{"task_id": "MBPP/686", "prompt": "\n\ndef freq_element(test_tup):\n  \"\"\"\n  Write a function to find the frequency of each element in the given list.\n  >>> freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) )\n  '{4: 3, 5: 4, 6: 2}'\n  >>> freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) )\n  '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\n  >>> freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) )\n  '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'\n  \"\"\"\n", "canonical_solution": "  from collections import defaultdict \n  \n  res = defaultdict(int)\n  for ele in test_tup:\n    res[ele] += 1\n  return (str(dict(res))) ", "entry_point": "freq_element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\n    assert candidate((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\n    assert candidate((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'\n\n", "language": "python", "description": "Write a function to find the frequency of each element in the given list."}
{"task_id": "MBPP/687", "prompt": "\n\ndef recur_gcd(a, b):\n\t\"\"\"\n\tWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\t>>> recur_gcd(12,14)\n\t2\n\t>>> recur_gcd(13,17)\n\t1\n\t>>> recur_gcd(9, 3)\n\t3\n\t\"\"\"\n", "canonical_solution": "\t\n\tlow = min(a, b)\n\thigh = max(a, b)\n\tif low == 0:\n\t\treturn high\n\telif low == 1:\n\t\treturn 1\n\telse:\n\t\treturn recur_gcd(low, high%low)", "entry_point": "recur_gcd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12,14) == 2\n    assert candidate(13,17) == 1\n    assert candidate(9, 3) == 3\n\n", "language": "python", "description": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion."}
{"task_id": "MBPP/688", "prompt": "\n\ndef len_complex(a,b):\n  \"\"\"\n  Write a function to get the length of a complex number.\n  >>> len_complex(3,4)\n  5.0\n  >>> len_complex(9,10)\n  13.45362404707371\n  >>> len_complex(7,9)\n  11.40175425099138\n  \"\"\"\n", "canonical_solution": "  import cmath\n  \n  cn=complex(a,b)\n  length=abs(cn)\n  return length", "entry_point": "len_complex", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3,4)==5.0\n    assert candidate(9,10)==13.45362404707371\n    assert candidate(7,9)==11.40175425099138\n\n", "language": "python", "description": "Write a function to get the length of a complex number."}
{"task_id": "MBPP/689", "prompt": "\n\ndef min_jumps(arr, n):\n\t\"\"\"\n\t## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\t>>> min_jumps([1, 3, 6, 1, 0, 9], 6)\n\t3\n\t>>> min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11)\n\t3\n\t>>> min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11)\n\t10\n\t\"\"\"\n", "canonical_solution": "\t\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\tbreak\n\treturn jumps[n-1]", "entry_point": "min_jumps", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 6, 1, 0, 9], 6) == 3\n    assert candidate([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10\n\n", "language": "python", "description": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block"}
{"task_id": "MBPP/690", "prompt": "\n\ndef mul_consecutive_nums(nums):\n    \"\"\"\n    Write a function to multiply consecutive numbers of a given list.\n    >>> mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])\n    [1, 3, 12, 16, 20, 30, 42]\n    >>> mul_consecutive_nums([4, 5, 8, 9, 6, 10])\n    [20, 40, 72, 54, 60]\n    >>> mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [2, 6, 12, 20, 30, 42, 56, 72, 90]\n    \"\"\"\n", "canonical_solution": "    \n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "entry_point": "mul_consecutive_nums", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\n    assert candidate([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]\n\n", "language": "python", "description": "Write a function to multiply consecutive numbers of a given list."}
{"task_id": "MBPP/691", "prompt": "\n\ndef group_element(test_list):\n  \"\"\"\n  Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n  >>> group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)])\n  {5: [6, 2], 7: [2, 8, 3], 8: [9]}\n  >>> group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)])\n  {6: [7, 3], 8: [3, 9, 4], 9: [10]}\n  >>> group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)])\n  {7: [8, 4], 9: [4, 10, 5], 10: [11]}\n  \"\"\"\n", "canonical_solution": "  from itertools import groupby \n  \n  res = dict()\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\n    res[key] = [ele[0] for ele in val] \n  return (res)\n", "entry_point": "group_element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\n    assert candidate([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\n    assert candidate([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}\n\n", "language": "python", "description": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list."}
{"task_id": "MBPP/692", "prompt": "\n\ndef last_Two_Digits(N):\n    \"\"\"\n    Write a python function to find the last two digits in factorial of a given number.\n    >>> last_Two_Digits(7)\n    40\n    >>> last_Two_Digits(5)\n    20\n    >>> last_Two_Digits(2)\n    2\n    \"\"\"\n", "canonical_solution": "     \n    if (N >= 10): \n        return\n    fac = 1\n    for i in range(1,N + 1): \n        fac = (fac * i) % 100\n    return (fac) ", "entry_point": "last_Two_Digits", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(7) == 40\n    assert candidate(5) == 20\n    assert candidate(2) == 2\n\n", "language": "python", "description": "Write a python function to find the last two digits in factorial of a given number."}
{"task_id": "MBPP/693", "prompt": "\n\ndef remove_multiple_spaces(text1):\n  \"\"\"\n  Write a function to remove multiple spaces in a string by using regex.\n  >>> remove_multiple_spaces('Google      Assistant')\n  'Google Assistant'\n  >>> remove_multiple_spaces('Quad      Core')\n  'Quad Core'\n  >>> remove_multiple_spaces('ChromeCast      Built-in')\n  'ChromeCast Built-in'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  return (re.sub(' +',' ',text1))", "entry_point": "remove_multiple_spaces", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('Google      Assistant') == 'Google Assistant'\n    assert candidate('Quad      Core') == 'Quad Core'\n    assert candidate('ChromeCast      Built-in') == 'ChromeCast Built-in'\n\n", "language": "python", "description": "Write a function to remove multiple spaces in a string by using regex."}
{"task_id": "MBPP/694", "prompt": "\n\ndef extract_unique(test_dict):\n  \"\"\"\n  Write a function to extract unique values from the given dictionary values.\n  >>> extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} )\n  [1, 2, 5, 6, 7, 8, 10, 11, 12]\n  >>> extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} )\n  [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\n  >>> extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]})\n  [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]\n  \"\"\"\n", "canonical_solution": "  \n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\n  return res", "entry_point": "extract_unique", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\n    assert candidate({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\n    assert candidate({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]\n\n", "language": "python", "description": "Write a function to extract unique values from the given dictionary values."}
{"task_id": "MBPP/695", "prompt": "\n\ndef check_greater(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n  >>> check_greater((10, 4, 5), (13, 5, 18))\n  True\n  >>> check_greater((1, 2, 3), (2, 1, 4))\n  False\n  >>> check_greater((4, 5, 6), (5, 6, 7))\n  True\n  \"\"\"\n", "canonical_solution": "  \n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\n  return (res) ", "entry_point": "check_greater", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (13, 5, 18)) == True\n    assert candidate((1, 2, 3), (2, 1, 4)) == False\n    assert candidate((4, 5, 6), (5, 6, 7)) == True\n\n", "language": "python", "description": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple."}
{"task_id": "MBPP/696", "prompt": "\n\ndef zip_list(list1,list2):\n \"\"\"\n Write a function to zip two given lists of lists.\n >>> zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )\n [[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n >>> zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )\n [[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\n >>> zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )\n [['a','b','e','f'],['c','d','g','h']]\n \"\"\"\n", "canonical_solution": "   \n result = list(map(list.__add__, list1, list2)) \n return result", "entry_point": "zip_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n    assert candidate([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\n    assert candidate([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]\n\n", "language": "python", "description": "Write a function to zip two given lists of lists."}
{"task_id": "MBPP/697", "prompt": "\n\ndef count_even(array_nums):\n   \"\"\"\n   Write a function to find number of even elements in the given list using lambda function.\n   >>> count_even([1, 2, 3, 5, 7, 8, 9, 10])\n   3\n   >>> count_even([10,15,14,13,-18,12,-20])\n   5\n   >>> count_even([1, 2, 4, 8, 9])\n   3\n   \"\"\"\n", "canonical_solution": "   \n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even", "entry_point": "count_even", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10])==3\n    assert candidate([10,15,14,13,-18,12,-20])==5\n    assert candidate([1, 2, 4, 8, 9])==3\n\n", "language": "python", "description": "Write a function to find number of even elements in the given list using lambda function."}
{"task_id": "MBPP/698", "prompt": "\n\ndef sort_dict_item(test_dict):\n  \"\"\"\n  Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n  >>> sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} )\n  {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\n  >>> sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} )\n  {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\n  >>> sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} )\n  {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}\n  \"\"\"\n", "canonical_solution": "  \n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\n  return  (res) \n", "entry_point": "sort_dict_item", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\n    assert candidate({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\n    assert candidate({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}\n\n", "language": "python", "description": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys."}
{"task_id": "MBPP/699", "prompt": "\n\ndef min_Swaps(str1,str2) :\n    \"\"\"\n    Write a python function to find the minimum number of swaps required to convert one binary string to another.\n    >>> min_Swaps(\"1101\",\"1110\")\n    1\n    >>> min_Swaps(\"1111\",\"0100\")\n    \"Not Possible\"\n    >>> min_Swaps(\"1110000\",\"0001101\")\n    3\n    \"\"\"\n", "canonical_solution": "     \n    count = 0\n    for i in range(len(str1)) : \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") ", "entry_point": "min_Swaps", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"1101\",\"1110\") == 1\n    assert candidate(\"1111\",\"0100\") == \"Not Possible\"\n    assert candidate(\"1110000\",\"0001101\") == 3\n\n", "language": "python", "description": "Write a python function to find the minimum number of swaps required to convert one binary string to another."}
{"task_id": "MBPP/700", "prompt": "\n\ndef count_range_in_list(li, min, max):\n\t\"\"\"\n\tWrite a function to count the number of elements in a list which are within a specific range.\n\t>>> count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)\n\t6\n\t>>> count_range_in_list(['a','b','c','d','e','f'],'a','e')\n\t5\n\t>>> count_range_in_list([7,8,9,15,17,19,45],15,20)\n\t3\n\t\"\"\"\n", "canonical_solution": "\t\n\tctr = 0\n\tfor x in li:\n\t\tif min <= x <= max:\n\t\t\tctr += 1\n\treturn ctr", "entry_point": "count_range_in_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10,20,30,40,40,40,70,80,99],40,100)==6\n    assert candidate(['a','b','c','d','e','f'],'a','e')==5\n    assert candidate([7,8,9,15,17,19,45],15,20)==3\n\n", "language": "python", "description": "Write a function to count the number of elements in a list which are within a specific range."}
{"task_id": "MBPP/701", "prompt": "\n\ndef equilibrium_index(arr):\n  \"\"\"\n  Write a function to find the equilibrium index of the given array.\n  >>> equilibrium_index([1, 2, 3, 4, 1, 2, 3])\n  3\n  >>> equilibrium_index([-7, 1, 5, 2, -4, 3, 0])\n  3\n  >>> equilibrium_index([1, 2, 3])\n  -1\n  \"\"\"\n", "canonical_solution": "  \n  total_sum = sum(arr)\n  left_sum=0\n  for i, num in enumerate(arr):\n    total_sum -= num\n    if left_sum == total_sum:\n      return i\n    left_sum += num\n  return -1", "entry_point": "equilibrium_index", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 1, 2, 3]) == 3\n    assert candidate([-7, 1, 5, 2, -4, 3, 0]) == 3\n    assert candidate([1, 2, 3]) == -1\n\n", "language": "python", "description": "Write a function to find the equilibrium index of the given array."}
{"task_id": "MBPP/702", "prompt": "\n\ndef removals(arr, n, k):\n\t\"\"\"\n\tWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\t>>> removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4)\n\t5\n\t>>> removals([1, 5, 6, 2, 8], 5, 2)\n\t3\n\t>>> removals([1, 2, 3 ,4, 5, 6], 6, 3)\n\t2\n\t\"\"\"\n", "canonical_solution": "\tdef find_ind(key, i, n, \n\t\t\t\tk, arr):\n\t\tind = -1\n\t\tstart = i + 1\n\t\tend = n - 1;\n\t\twhile (start < end):\n\t\t\tmid = int(start +\n\t\t\t\t\t(end - start) / 2)\n\t\t\tif (arr[mid] - key <= k):\n\t\t\t\tind = mid\n\t\t\t\tstart = mid + 1\n\t\t\telse:\n\t\t\t\tend = mid\n\t\treturn ind\n\t\n\tans = n - 1\n\tarr.sort()\n\tfor i in range(0, n):\n\t\tj = find_ind(arr[i], i, \n\t\t\t\t\tn, k, arr)\n\t\tif (j != -1):\n\t\t\tans = min(ans, n -\n\t\t\t\t\t\t(j - i + 1))\n\treturn ans", "entry_point": "removals", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\n    assert candidate([1, 5, 6, 2, 8], 5, 2) == 3\n    assert candidate([1, 2, 3 ,4, 5, 6], 6, 3) == 2\n\n", "language": "python", "description": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k."}
{"task_id": "MBPP/703", "prompt": "\n\ndef is_key_present(d,x):\n  \"\"\"\n  Write a function to check whether the given key is present in the dictionary or not.\n  >>> is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)\n  True\n  >>> is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)\n  True\n  >>> is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)\n  False\n  \"\"\"\n", "canonical_solution": "  \n  if x in d:\n    return True\n  else:\n     return False", "entry_point": "is_key_present", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\n    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\n    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False\n\n", "language": "python", "description": "Write a function to check whether the given key is present in the dictionary or not."}
{"task_id": "MBPP/704", "prompt": "\n\ndef harmonic_sum(n):\n  \"\"\"\n  Write a function to calculate the harmonic sum of n-1.\n  >>> harmonic_sum(10)\n  2.9289682539682538\n  >>> harmonic_sum(4)\n  2.083333333333333\n  >>> harmonic_sum(7)\n  2.5928571428571425\n  \"\"\"\n", "canonical_solution": "  \n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1))", "entry_point": "harmonic_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10)==2.9289682539682538\n    assert candidate(4)==2.083333333333333\n    assert candidate(7)==2.5928571428571425 \n\n", "language": "python", "description": "Write a function to calculate the harmonic sum of n-1."}
{"task_id": "MBPP/705", "prompt": "\n\ndef sort_sublists(list1):\n      \"\"\"\n      Write a function to sort a list of lists by length and value.\n      >>> sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])\n      [[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n      >>> sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])\n      [[1], [7], [2, 3], [10, 11], [4, 5, 6]]\n      >>> sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])\n      [['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]\n      \"\"\"\n", "canonical_solution": "      \n      list1.sort()  \n      list1.sort(key=len)\n      return  list1", "entry_point": "sort_sublists", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n    assert candidate([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\n    assert candidate([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]\n\n", "language": "python", "description": "Write a function to sort a list of lists by length and value."}
{"task_id": "MBPP/706", "prompt": "\n\ndef is_subset(arr1, m, arr2, n):\n\t\"\"\"\n\tWrite a function to find whether an array is subset of another array.\n\t>>> is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4)\n\tTrue\n\t>>> is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3)\n\tTrue\n\t>>> is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3)\n\tFalse\n\t\"\"\"\n", "canonical_solution": "\t \n\thashset = set() \n\tfor i in range(0, m): \n\t\thashset.add(arr1[i]) \n\tfor i in range(0, n): \n\t\tif arr2[i] in hashset: \n\t\t\tcontinue\n\t\telse: \n\t\t\treturn False\n\treturn True\t\t", "entry_point": "is_subset", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\n    assert candidate([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\n    assert candidate([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False\n\n", "language": "python", "description": "Write a function to find whether an array is subset of another array."}
{"task_id": "MBPP/707", "prompt": "\n\ndef count_Set_Bits(n) :\n    \"\"\"\n    Write a python function to count the total set bits from 1 to n.\n    >>> count_Set_Bits(16)\n    33\n    >>> count_Set_Bits(2)\n    2\n    >>> count_Set_Bits(14)\n    28\n    \"\"\"\n", "canonical_solution": "      \n    n += 1; \n    powerOf2 = 2;   \n    cnt = n // 2;  \n    while (powerOf2 <= n) : \n        totalPairs = n // powerOf2;  \n        cnt += (totalPairs // 2) * powerOf2;  \n        if (totalPairs & 1) : \n            cnt += (n % powerOf2) \n        else : \n            cnt += 0\n        powerOf2 <<= 1;    \n    return cnt;  ", "entry_point": "count_Set_Bits", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(16) == 33\n    assert candidate(2) == 2\n    assert candidate(14) == 28\n\n", "language": "python", "description": "Write a python function to count the total set bits from 1 to n."}
{"task_id": "MBPP/708", "prompt": "\n\ndef Convert(string):\n    \"\"\"\n    Write a python function to convert a string to a list.\n    >>> Convert('python program')\n    ['python','program']\n    >>> Convert('Data Analysis')\n    ['Data','Analysis']\n    >>> Convert('Hadoop Training')\n    ['Hadoop','Training']\n    \"\"\"\n", "canonical_solution": "     \n    li = list(string.split(\" \")) \n    return li ", "entry_point": "Convert", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('python program') == ['python','program']\n    assert candidate('Data Analysis') ==['Data','Analysis']\n    assert candidate('Hadoop Training') == ['Hadoop','Training']\n\n", "language": "python", "description": "Write a python function to convert a string to a list."}
{"task_id": "MBPP/709", "prompt": "\n\ndef get_unique(test_list):\n  \"\"\"\n  Write a function to count unique keys for each value present in the tuple.\n  >>> get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] )\n  '{4: 4, 2: 3, 1: 2}'\n  >>> get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] )\n  '{5: 4, 3: 3, 2: 2}'\n  >>> get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] )\n  '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'\n  \"\"\"\n", "canonical_solution": "  from collections import defaultdict \n  \n  res = defaultdict(list)\n  for sub in test_list:\n    res[sub[1]].append(sub[0])\n  res = dict(res)\n  res_dict = dict()\n  for key in res:\n    res_dict[key] = len(list(set(res[key])))\n  return (str(res_dict)) ", "entry_point": "get_unique", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\n    assert candidate([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\n    assert candidate([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'\n\n", "language": "python", "description": "Write a function to count unique keys for each value present in the tuple."}
{"task_id": "MBPP/710", "prompt": "\n\ndef front_and_rear(test_tup):\n  \"\"\"\n  Write a function to access the initial and last data of the given tuple record.\n  >>> front_and_rear((10, 4, 5, 6, 7))\n  (10, 7)\n  >>> front_and_rear((1, 2, 3, 4, 5))\n  (1, 5)\n  >>> front_and_rear((6, 7, 8, 9, 10))\n  (6, 10)\n  \"\"\"\n", "canonical_solution": "  \n  res = (test_tup[0], test_tup[-1])\n  return (res) ", "entry_point": "front_and_rear", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6, 7)) == (10, 7)\n    assert candidate((1, 2, 3, 4, 5)) == (1, 5)\n    assert candidate((6, 7, 8, 9, 10)) == (6, 10)\n\n", "language": "python", "description": "Write a function to access the initial and last data of the given tuple record."}
{"task_id": "MBPP/711", "prompt": "\n\ndef product_Equal(n):\n    \"\"\"\n    Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\n    >>> product_Equal(2841)\n    True\n    >>> product_Equal(1234)\n    False\n    >>> product_Equal(1212)\n    False\n    \"\"\"\n", "canonical_solution": "     \n    if n < 10: \n        return False\n    prodOdd = 1; prodEven = 1\n    while n > 0: \n        digit = n % 10\n        prodOdd *= digit \n        n = n//10\n        if n == 0: \n            break; \n        digit = n % 10\n        prodEven *= digit \n        n = n//10\n    if prodOdd == prodEven: \n        return True\n    return False", "entry_point": "product_Equal", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2841) == True\n    assert candidate(1234) == False\n    assert candidate(1212) == False\n\n", "language": "python", "description": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not."}
{"task_id": "MBPP/712", "prompt": "\n\ndef remove_duplicate(list1):\n \"\"\"\n Write a function to remove duplicates from a list of lists.\n >>> remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n [[10, 20], [30, 56, 25], [33], [40]]\n >>> remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )\n [\"a\", \"b\", \"c\"]\n >>> remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )\n [1, 3, 5, 6]\n \"\"\"\n", "canonical_solution": " import itertools\n \n list.sort(list1)\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\n return remove_duplicate", "entry_point": "remove_duplicate", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \n    assert candidate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\n    assert candidate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]\n\n", "language": "python", "description": "Write a function to remove duplicates from a list of lists."}
{"task_id": "MBPP/713", "prompt": "\n\ndef check_valid(test_tup):\n  \"\"\"\n  Write a function to check if the given tuple contains all valid values or not.\n  >>> check_valid((True, True, True, True) )\n  True\n  >>> check_valid((True, False, True, True) )\n  False\n  >>> check_valid((True, True, True, True) )\n  True\n  \"\"\"\n", "canonical_solution": "  \n  res = not any(map(lambda ele: not ele, test_tup))\n  return (res) ", "entry_point": "check_valid", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((True, True, True, True) ) == True\n    assert candidate((True, False, True, True) ) == False\n    assert candidate((True, True, True, True) ) == True\n\n", "language": "python", "description": "Write a function to check if the given tuple contains all valid values or not."}
{"task_id": "MBPP/714", "prompt": "\n\ndef count_Fac(n):\n    \"\"\"\n    Write a python function to count the number of distinct power of prime factor of given number.\n    >>> count_Fac(24)\n    3\n    >>> count_Fac(12)\n    2\n    >>> count_Fac(4)\n    1\n    \"\"\"\n", "canonical_solution": "      \n    m = n \n    count = 0\n    i = 2\n    while((i * i) <= m): \n        total = 0\n        while (n % i == 0): \n            n /= i \n            total += 1 \n        temp = 0\n        j = 1\n        while((temp + j) <= total): \n            temp += j \n            count += 1\n            j += 1 \n        i += 1\n    if (n != 1): \n        count += 1 \n    return count ", "entry_point": "count_Fac", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(24) == 3\n    assert candidate(12) == 2\n    assert candidate(4) == 1\n\n", "language": "python", "description": "Write a python function to count the number of distinct power of prime factor of given number."}
{"task_id": "MBPP/715", "prompt": "\n\ndef str_to_tuple(test_str):\n  \"\"\"\n  Write a function to convert the given string of integers into a tuple.\n  >>> str_to_tuple(\"1, -5, 4, 6, 7\")\n  (1, -5, 4, 6, 7)\n  >>> str_to_tuple(\"1, 2, 3, 4, 5\")\n  (1, 2, 3, 4, 5)\n  >>> str_to_tuple(\"4, 6, 9, 11, 13, 14\")\n  (4, 6, 9, 11, 13, 14)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(map(int, test_str.split(', ')))\n  return (res) ", "entry_point": "str_to_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\n    assert candidate(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\n    assert candidate(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)\n\n", "language": "python", "description": "Write a function to convert the given string of integers into a tuple."}
{"task_id": "MBPP/716", "prompt": "\n\ndef rombus_perimeter(a):\n  \"\"\"\n  Write a function to find the perimeter of a rombus.\n  >>> rombus_perimeter(10)\n  40\n  >>> rombus_perimeter(5)\n  20\n  >>> rombus_perimeter(4)\n  16\n  \"\"\"\n", "canonical_solution": "  \n  perimeter=4*a\n  return perimeter", "entry_point": "rombus_perimeter", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10)==40\n    assert candidate(5)==20\n    assert candidate(4)==16\n\n", "language": "python", "description": "Write a function to find the perimeter of a rombus."}
{"task_id": "MBPP/717", "prompt": "\n\ndef sd_calc(data):\n    \"\"\"\n    Write a function to calculate the standard deviation.\n    >>> sd_calc([4, 2, 5, 8, 6])\n    2.23606797749979\n    >>> sd_calc([1,2,3,4,5,6,7])\n    2.160246899469287\n    >>> sd_calc([5,9,10,15,6,4])\n    4.070217029430577\n    \"\"\"\n", "canonical_solution": "    import math\n    import sys\n    \n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean)**2\n    sd = math.sqrt(sd / float(n-1))\n    return sd\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean", "entry_point": "sd_calc", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([4, 2, 5, 8, 6])== 2.23606797749979\n    assert candidate([1,2,3,4,5,6,7])==2.160246899469287\n    assert candidate([5,9,10,15,6,4])==4.070217029430577\n\n", "language": "python", "description": "Write a function to calculate the standard deviation."}
{"task_id": "MBPP/718", "prompt": "\n\ndef alternate_elements(list1):\n    \"\"\"\n    Write a function to create a list taking alternate elements from another given list.\n    >>> alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])\n    ['red', 'white', 'orange']\n    >>> alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])\n    [2, 3, 0, 8, 4]\n    >>> alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1,3,5,7,9]\n    \"\"\"\n", "canonical_solution": "    \n    result=[]\n    for item in list1[::2]:\n        result.append(item)\n    return result ", "entry_point": "alternate_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\n    assert candidate([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\n", "language": "python", "description": "Write a function to create a list taking alternate elements from another given list."}
{"task_id": "MBPP/719", "prompt": "\n\ndef text_match(text):\n        \"\"\"\n        Write a function that matches a string that has an a followed by zero or more b's.\n        >>> text_match(\"ac\")\n        ('Found a match!')\n        >>> text_match(\"dc\")\n        ('Not matched!')\n        >>> text_match(\"abba\")\n        ('Found a match!')\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "entry_point": "text_match", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"ac\")==('Found a match!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abba\")==('Found a match!')\n\n", "language": "python", "description": "Write a function that matches a string that has an a followed by zero or more b's."}
{"task_id": "MBPP/720", "prompt": "\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  \"\"\"\n  Write a function to add a dictionary to the tuple.\n  >>> add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} )\n  (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n  >>> add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} )\n  (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\n  >>> add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} )\n  (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n  \"\"\"\n", "canonical_solution": "  \n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) ", "entry_point": "add_dict_to_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    assert candidate((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\n    assert candidate((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n\n", "language": "python", "description": "Write a function to add a dictionary to the tuple."}
{"task_id": "MBPP/721", "prompt": "\n\ndef maxAverageOfPath(cost, N):\n\t\"\"\"\n\tWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\t>>> maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3)\n\t5.2\n\t>>> maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3)\n\t6.2\n\t>>> maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3)\n\t7.2\n\t\"\"\"\n", "canonical_solution": "\tM = 100\n\t \n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \n\tdp[0][0] = cost[0][0] \n\tfor i in range(1, N): \n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \n\tfor j in range(1, N): \n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \n\tfor i in range(1, N): \n\t\tfor j in range(1, N): \n\t\t\tdp[i][j] = max(dp[i - 1][j], \n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \n\treturn dp[N - 1][N - 1] / (2 * N - 1)", "entry_point": "maxAverageOfPath", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\n    assert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\n    assert candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 \n\n", "language": "python", "description": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n."}
{"task_id": "MBPP/722", "prompt": "\n\ndef filter_data(students,h,w):\n    \"\"\"\n    Write a function to filter the height and width of students which are stored in a dictionary.\n    >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)\n    {'Cierra Vega': (6.2, 70)}\n    >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)\n    {'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\n    >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)\n    {'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n    \"\"\"\n", "canonical_solution": "    \n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    ", "entry_point": "filter_data", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n\n", "language": "python", "description": "Write a function to filter the height and width of students which are stored in a dictionary."}
{"task_id": "MBPP/723", "prompt": "\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    Write a function to count the same pair in two given lists using map function.\n    >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n    4\n    >>> count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    11\n    >>> count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    1\n    \"\"\"\n", "canonical_solution": "    from operator import eq\n    \n    result = sum(map(eq, nums1, nums2))\n    return result", "entry_point": "count_same_pair", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\n\n", "language": "python", "description": "Write a function to count the same pair in two given lists using map function."}
{"task_id": "MBPP/724", "prompt": "\n\ndef power_base_sum(base, power):\n    \"\"\"\n    Write a function to calculate the sum of all digits of the base to the specified power.\n    >>> power_base_sum(2,100)\n    115\n    >>> power_base_sum(8,10)\n    37\n    >>> power_base_sum(8,15)\n    62\n    \"\"\"\n", "canonical_solution": "    \n    return sum([int(i) for i in str(pow(base, power))])", "entry_point": "power_base_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2,100)==115\n    assert candidate(8,10)==37\n    assert candidate(8,15)==62\n\n", "language": "python", "description": "Write a function to calculate the sum of all digits of the base to the specified power."}
{"task_id": "MBPP/725", "prompt": "\n\ndef extract_quotation(text1):\n  \"\"\"\n  Write a function to extract values between quotation marks of the given string by using regex.\n  >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n  ['A53', 'multi', 'Processor']\n  >>> extract_quotation('Cast your \"favorite\" entertainment \"apps\"')\n  ['favorite', 'apps']\n  >>> extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support')\n  ['4k Ultra HD', 'HDR 10']\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  return (re.findall(r'\"(.*?)\"', text1))", "entry_point": "extract_quotation", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n    assert candidate('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\n    assert candidate('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\n\n", "language": "python", "description": "Write a function to extract values between quotation marks of the given string by using regex."}
{"task_id": "MBPP/726", "prompt": "\n\ndef multiply_elements(test_tup):\n  \"\"\"\n  Write a function to multiply the adjacent elements of the given tuple.\n  >>> multiply_elements((1, 5, 7, 8, 10))\n  (5, 35, 56, 80)\n  >>> multiply_elements((2, 4, 5, 6, 7))\n  (8, 20, 30, 42)\n  >>> multiply_elements((12, 13, 14, 9, 15))\n  (156, 182, 126, 135)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "entry_point": "multiply_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n    assert candidate((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\n    assert candidate((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\n\n", "language": "python", "description": "Write a function to multiply the adjacent elements of the given tuple."}
{"task_id": "MBPP/727", "prompt": "\n\ndef remove_char(S):\n  \"\"\"\n  Write a function to remove all characters except letters and numbers using regex\n  >>> remove_char(\"123abcjw:, .@! eiw\")\n  '123abcjweiw'\n  >>> remove_char(\"Hello1234:, ! Howare33u\")\n  'Hello1234Howare33u'\n  >>> remove_char(\"Cool543Triks@:, Make@987Trips\")\n  'Cool543TriksMake987Trips'\n  \"\"\"\n", "canonical_solution": "  import re \n  \n  result = re.sub('[\\W_]+', '', S) \n  return result", "entry_point": "remove_char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"123abcjw:, .@! eiw\") == '123abcjweiw'\n    assert candidate(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\n    assert candidate(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' \n\n", "language": "python", "description": "Write a function to remove all characters except letters and numbers using regex"}
{"task_id": "MBPP/728", "prompt": "\n\ndef sum_list(lst1,lst2):\n  \"\"\"\n  Write a function to sum elements in two lists.\n  >>> sum_list([10,20,30],[15,25,35])\n  [25,45,65]\n  >>> sum_list([1,2,3],[5,6,7])\n  [6,8,10]\n  >>> sum_list([15,20,30],[15,45,75])\n  [30,65,105]\n  \"\"\"\n", "canonical_solution": "  \n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "entry_point": "sum_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10,20,30],[15,25,35])==[25,45,65]\n    assert candidate([1,2,3],[5,6,7])==[6,8,10]\n    assert candidate([15,20,30],[15,45,75])==[30,65,105]\n\n", "language": "python", "description": "Write a function to sum elements in two lists."}
{"task_id": "MBPP/729", "prompt": "\n\ndef add_list(nums1,nums2):\n  \"\"\"\n  Write a function to add two lists using map and lambda function.\n  >>> add_list([1, 2, 3],[4,5,6])\n  [5, 7, 9]\n  >>> add_list([1,2],[3,4])\n  [4,6]\n  >>> add_list([10,20],[50,70])\n  [60,90]\n  \"\"\"\n", "canonical_solution": "  \n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)", "entry_point": "add_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3],[4,5,6])==[5, 7, 9]\n    assert candidate([1,2],[3,4])==[4,6]\n    assert candidate([10,20],[50,70])==[60,90]\n\n", "language": "python", "description": "Write a function to add two lists using map and lambda function."}
{"task_id": "MBPP/730", "prompt": "\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    >>> consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n    [10, 15, 19, 18, 17, 26, 17, 18, 10]\n    >>> consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n", "canonical_solution": "    from itertools import groupby\n    \n    return [key for key, group in groupby(nums)] ", "entry_point": "consecutive_duplicates", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\n\n", "language": "python", "description": "Write a function to remove consecutive duplicates of a given list."}
{"task_id": "MBPP/731", "prompt": "\n\ndef lateralsurface_cone(r,h):\n  \"\"\"\n  Write a function to find the lateral surface area of a cone.\n  >>> lateralsurface_cone(5,12)\n  204.20352248333654\n  >>> lateralsurface_cone(10,15)\n  566.3586699569488\n  >>> lateralsurface_cone(19,17)\n  1521.8090132193388\n  \"\"\"\n", "canonical_solution": "  import math\n  \n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA", "entry_point": "lateralsurface_cone", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5,12)==204.20352248333654\n    assert candidate(10,15)==566.3586699569488\n    assert candidate(19,17)==1521.8090132193388\n\n", "language": "python", "description": "Write a function to find the lateral surface area of a cone."}
{"task_id": "MBPP/732", "prompt": "\n\ndef replace_specialchar(text):\n \"\"\"\n Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n >>> replace_specialchar('Python language, Programming language.')\n ('Python:language::Programming:language:')\n >>> replace_specialchar('a b c,d e f')\n ('a:b:c:d:e:f')\n >>> replace_specialchar('ram reshma,ram rahim')\n ('ram:reshma:ram:rahim')\n \"\"\"\n", "canonical_solution": " import re\n \n return (re.sub(\"[ ,.]\", \":\", text))", "entry_point": "replace_specialchar", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('Python language, Programming language.')==('Python:language::Programming:language:')\n    assert candidate('a b c,d e f')==('a:b:c:d:e:f')\n    assert candidate('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n\n", "language": "python", "description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon."}
{"task_id": "MBPP/733", "prompt": "\n\ndef find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    1\n    >>> find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    2\n    >>> find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)\n    4\n    \"\"\"\n", "canonical_solution": "    \n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "entry_point": "find_first_occurrence", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    assert candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\n    assert candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n\n", "language": "python", "description": "Write a function to find the index of the first occurrence of a given number in a sorted array."}
{"task_id": "MBPP/734", "prompt": "\n\ndef sum_Of_Subarray_Prod(arr,n):\n    \"\"\"\n    Write a python function to find sum of products of all possible subarrays.\n    >>> sum_Of_Subarray_Prod([1,2,3],3)\n    20\n    >>> sum_Of_Subarray_Prod([1,2],2)\n    5\n    >>> sum_Of_Subarray_Prod([1,2,3,4],4)\n    84\n    \"\"\"\n", "canonical_solution": "    \n    ans = 0\n    res = 0\n    i = n - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)", "entry_point": "sum_Of_Subarray_Prod", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3],3) == 20\n    assert candidate([1,2],2) == 5\n    assert candidate([1,2,3,4],4) == 84\n\n", "language": "python", "description": "Write a python function to find sum of products of all possible subarrays."}
{"task_id": "MBPP/735", "prompt": "\n\ndef toggle_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    >>> toggle_middle_bits(9)\n    15\n    >>> toggle_middle_bits(10)\n    12\n    >>> toggle_middle_bits(11)\n    13\n    \"\"\"\n", "canonical_solution": "    def set_middle_bits(n):  \n        n |= n >> 1; \n        n |= n >> 2; \n        n |= n >> 4; \n        n |= n >> 8; \n        n |= n >> 16;  \n        return (n >> 1) ^ 1\n     \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) ", "entry_point": "toggle_middle_bits", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(9) == 15\n    assert candidate(10) == 12\n    assert candidate(11) == 13\n\n", "language": "python", "description": "Write a python function to toggle bits of the number except the first and the last bit."}
{"task_id": "MBPP/736", "prompt": "\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    >>> left_insertion([1,2,4,5],6)\n    4\n    >>> left_insertion([1,2,4,5],3)\n    2\n    >>> left_insertion([1,2,4,5],7)\n    4\n    \"\"\"\n", "canonical_solution": "    import bisect\n    \n    i = bisect.bisect_left(a, x)\n    return i", "entry_point": "left_insertion", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,4,5],6)==4\n    assert candidate([1,2,4,5],3)==2\n    assert candidate([1,2,4,5],7)==4\n\n", "language": "python", "description": "Write a function to locate the left insertion point for a specified value in sorted order."}
{"task_id": "MBPP/737", "prompt": "\n\ndef check_str(string):\n\t\"\"\"\n\tWrite a function to check whether the given string is starting with a vowel or not using regex.\n\t>>> check_str(\"annie\")\n\t'Valid'\n\t>>> check_str(\"dawood\")\n\t'Invalid'\n\t>>> check_str(\"Else\")\n\t'Valid'\n\t\"\"\"\n", "canonical_solution": "\timport re \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\t \n\tif(re.search(regex, string)): \n\t\treturn (\"Valid\") \n\telse: \n\t\treturn (\"Invalid\") ", "entry_point": "check_str", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"annie\") == 'Valid'\n    assert candidate(\"dawood\") == 'Invalid'\n    assert candidate(\"Else\") == 'Valid'\n\n", "language": "python", "description": "Write a function to check whether the given string is starting with a vowel or not using regex."}
{"task_id": "MBPP/738", "prompt": "\n\ndef geometric_sum(n):\n  \"\"\"\n  Write a function to calculate the geometric sum of n-1.\n  >>> geometric_sum(7)\n  1.9921875\n  >>> geometric_sum(4)\n  1.9375\n  >>> geometric_sum(8)\n  1.99609375\n  \"\"\"\n", "canonical_solution": "  \n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "entry_point": "geometric_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(7) == 1.9921875\n    assert candidate(4) == 1.9375\n    assert candidate(8) == 1.99609375\n\n", "language": "python", "description": "Write a function to calculate the geometric sum of n-1."}
{"task_id": "MBPP/739", "prompt": "\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    >>> find_Index(2)\n    4\n    >>> find_Index(3)\n    14\n    >>> find_Index(4)\n    45\n    \"\"\"\n", "canonical_solution": "    import math \n     \n    x = math.sqrt(2 * math.pow(10,(n - 1))); \n    return round(x); ", "entry_point": "find_Index", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 14\n    assert candidate(4) == 45\n\n", "language": "python", "description": "Write a python function to find the index of smallest triangular number with n digits."}
{"task_id": "MBPP/740", "prompt": "\n\ndef tuple_to_dict(test_tup):\n  \"\"\"\n  Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n  >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n  {1: 5, 7: 10, 13: 5}\n  >>> tuple_to_dict((1, 2, 3, 4, 5, 6))\n  {1: 2, 3: 4, 5: 6}\n  >>> tuple_to_dict((7, 8, 9, 10, 11, 12))\n  {7: 8, 9: 10, 11: 12}\n  \"\"\"\n", "canonical_solution": "  \n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) ", "entry_point": "tuple_to_dict", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n    assert candidate((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\n    assert candidate((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n\n", "language": "python", "description": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements."}
{"task_id": "MBPP/741", "prompt": "\n\ndef all_Characters_Same(s) :\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    >>> all_Characters_Same(\"python\")\n    False\n    >>> all_Characters_Same(\"aaa\")\n    True\n    >>> all_Characters_Same(\"data\")\n    False\n    \"\"\"\n", "canonical_solution": "    \n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True", "entry_point": "all_Characters_Same", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"python\") == False\n    assert candidate(\"aaa\") == True\n    assert candidate(\"data\") == False\n\n", "language": "python", "description": "Write a python function to check whether all the characters are same or not."}
{"task_id": "MBPP/742", "prompt": "\n\ndef area_tetrahedron(side):\n  \"\"\"\n  Write a function to caluclate the area of a tetrahedron.\n  >>> area_tetrahedron(3)\n  15.588457268119894\n  >>> area_tetrahedron(20)\n  692.8203230275509\n  >>> area_tetrahedron(10)\n  173.20508075688772\n  \"\"\"\n", "canonical_solution": "  import math\n  \n  area = math.sqrt(3)*(side*side)\n  return area", "entry_point": "area_tetrahedron", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3)==15.588457268119894\n    assert candidate(20)==692.8203230275509\n    assert candidate(10)==173.20508075688772\n\n", "language": "python", "description": "Write a function to caluclate the area of a tetrahedron."}
{"task_id": "MBPP/743", "prompt": "\n\ndef rotate_right(list1,m,n):\n  \"\"\"\n  Write a function to rotate a given list by specified number of items to the right direction.\n  >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)\n  [8, 9, 10, 1, 2, 3, 4, 5, 6]\n  >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)\n  [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n  >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)\n  [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n  \"\"\"\n", "canonical_solution": "  \n  result =  list1[-(m):]+list1[:-(n)]\n  return result", "entry_point": "rotate_right", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n\n", "language": "python", "description": "Write a function to rotate a given list by specified number of items to the right direction."}
{"task_id": "MBPP/744", "prompt": "\n\ndef check_none(test_tup):\n  \"\"\"\n  Write a function to check if the given tuple has any none value or not.\n  >>> check_none((10, 4, 5, 6, None))\n  True\n  >>> check_none((7, 8, 9, 11, 14))\n  False\n  >>> check_none((1, 2, 3, 4, None))\n  True\n  \"\"\"\n", "canonical_solution": "  \n  res = any(map(lambda ele: ele is None, test_tup))\n  return (res) ", "entry_point": "check_none", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6, None)) == True\n    assert candidate((7, 8, 9, 11, 14)) == False\n    assert candidate((1, 2, 3, 4, None)) == True\n\n", "language": "python", "description": "Write a function to check if the given tuple has any none value or not."}
{"task_id": "MBPP/745", "prompt": "\n\ndef divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n    >>> divisible_by_digits(1,22)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    >>> divisible_by_digits(1,15)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    >>> divisible_by_digits(20,25)\n    [22, 24]\n    \"\"\"\n", "canonical_solution": "    \n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "entry_point": "divisible_by_digits", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    assert candidate(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert candidate(20,25)==[22, 24]\n\n", "language": "python", "description": "Write a function to find numbers within a given range where every number is divisible by every digit it contains."}
{"task_id": "MBPP/746", "prompt": "\n\ndef sector_area(r,a):\n    \"\"\"\n    Write a function to find area of a sector.\n    >>> sector_area(4,45)\n    6.285714285714286\n    >>> sector_area(9,45)\n    31.82142857142857\n    >>> sector_area(9,360)\n    None\n    \"\"\"\n", "canonical_solution": "    \n    pi=22/7\n    if a >= 360:\n        return None\n    sectorarea = (pi*r**2) * (a/360)\n    return sectorarea", "entry_point": "sector_area", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4,45)==6.285714285714286\n    assert candidate(9,45)==31.82142857142857\n    assert candidate(9,360)==None\n\n", "language": "python", "description": "Write a function to find area of a sector."}
{"task_id": "MBPP/747", "prompt": "\n\ndef lcs_of_three(X, Y, Z, m, n, o):\n\t\"\"\"\n\tWrite a function to find the longest common subsequence for the given three string sequence.\n\t>>> lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5)\n\t2\n\t>>> lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13)\n\t5\n\t>>> lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5)\n\t3\n\t\"\"\"\n", "canonical_solution": "\t \n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \n\t\tfor k in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tfor k in range(o+1): \n\t\t\t\tif (i == 0 or j == 0 or k == 0): \n\t\t\t\t\tL[i][j][k] = 0\n\t\t\t\telif (X[i-1] == Y[j-1] and\n\t\t\t\t\tX[i-1] == Z[k-1]): \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t\telse: \n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \n\treturn L[m][n][o]", "entry_point": "lcs_of_three", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\n    assert candidate('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \n    assert candidate('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3\n\n", "language": "python", "description": "Write a function to find the longest common subsequence for the given three string sequence."}
{"task_id": "MBPP/748", "prompt": "\n\ndef capital_words_spaces(str1):\n  \"\"\"\n  Write a function to put spaces between words starting with capital letters in a given string by using regex.\n  >>> capital_words_spaces(\"Python\")\n  'Python'\n  >>> capital_words_spaces(\"PythonProgrammingExamples\")\n  'Python Programming Examples'\n  >>> capital_words_spaces(\"GetReadyToBeCodingFreak\")\n  'Get Ready To Be Coding Freak'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "entry_point": "capital_words_spaces", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"Python\") == 'Python'\n    assert candidate(\"PythonProgrammingExamples\") == 'Python Programming Examples'\n    assert candidate(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'\n\n", "language": "python", "description": "Write a function to put spaces between words starting with capital letters in a given string by using regex."}
{"task_id": "MBPP/749", "prompt": "\n\ndef sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    >>> sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])\n    [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    >>> sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])\n    [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    >>> sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])\n    [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n    \"\"\"\n", "canonical_solution": "    \n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result", "entry_point": "sort_numeric_strings", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    assert candidate(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert candidate(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n\n", "language": "python", "description": "Write a function to sort a given list of strings of numbers numerically."}
{"task_id": "MBPP/750", "prompt": "\n\ndef add_tuple(test_list, test_tup):\n  \"\"\"\n  Write a function to add the given tuple to the given list.\n  >>> add_tuple([5, 6, 7], (9, 10))\n  [5, 6, 7, 9, 10]\n  >>> add_tuple([6, 7, 8], (10, 11))\n  [6, 7, 8, 10, 11]\n  >>> add_tuple([7, 8, 9], (11, 12))\n  [7, 8, 9, 11, 12]\n  \"\"\"\n", "canonical_solution": "  \n  test_list += test_tup\n  return (test_list) ", "entry_point": "add_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n    assert candidate([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\n    assert candidate([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n\n", "language": "python", "description": "Write a function to add the given tuple to the given list."}
{"task_id": "MBPP/751", "prompt": "\n\ndef check_min_heap(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    >>> check_min_heap([1, 2, 3, 4, 5, 6], 0)\n    True\n    >>> check_min_heap([2, 3, 4, 5, 10, 15], 0)\n    True\n    >>> check_min_heap([2, 10, 4, 5, 3, 15], 0)\n    False\n    \"\"\"\n", "canonical_solution": "    \n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap(arr, 2 * i + 2))\n    return left_child and right_child", "entry_point": "check_min_heap", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], 0) == True\n    assert candidate([2, 3, 4, 5, 10, 15], 0) == True\n    assert candidate([2, 10, 4, 5, 3, 15], 0) == False\n\n", "language": "python", "description": "Write a function to check if the given array represents min heap or not."}
{"task_id": "MBPP/752", "prompt": "\n\ndef jacobsthal_num(n):\n\t\"\"\"\n\tWrite a function to find the nth jacobsthal number.\n\t>>> jacobsthal_num(5)\n\t11\n\t>>> jacobsthal_num(2)\n\t1\n\t>>> jacobsthal_num(4)\n\t5\n\t\"\"\"\n", "canonical_solution": "\t \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]", "entry_point": "jacobsthal_num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 11\n    assert candidate(2) == 1\n    assert candidate(4) == 5\n\n", "language": "python", "description": "Write a function to find the nth jacobsthal number."}
{"task_id": "MBPP/753", "prompt": "\n\ndef min_k(test_list, K):\n  \"\"\"\n  Write a function to find minimum k records from tuple list.\n  >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n  [('Akash', 2), ('Akshat', 4)]\n  >>> min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3)\n  [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n  >>> min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1)\n  [('Ayesha', 9)]\n  \"\"\"\n", "canonical_solution": "  \n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) ", "entry_point": "min_k", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n    assert candidate([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert candidate([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n\n", "language": "python", "description": "Write a function to find minimum k records from tuple list."}
{"task_id": "MBPP/754", "prompt": "\n\ndef extract_index_list(l1, l2, l3):\n    \"\"\"\n    Write a function to find common index elements from three lists.\n    >>> extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])\n    [1, 7]\n    >>> extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])\n    [1, 6]\n    >>> extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])\n    [1, 5]\n    \"\"\"\n", "canonical_solution": "    \n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result", "entry_point": "extract_index_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n    assert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\n    assert candidate([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\n\n", "language": "python", "description": "Write a function to find common index elements from three lists."}
{"task_id": "MBPP/755", "prompt": "\n\ndef second_smallest(numbers):\n  \"\"\"\n  Write a function to find the second smallest number in a list.\n  >>> second_smallest([1, 2, -8, -2, 0, -2])\n  -2\n  >>> second_smallest([1, 1, -0.5, 0, 2, -2, -2])\n  -0.5\n  >>> second_smallest([2,2])\n  None\n  \"\"\"\n", "canonical_solution": "  \n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()    \n  return  uniq_items[1] ", "entry_point": "second_smallest", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, -8, -2, 0, -2])==-2\n    assert candidate([1, 1, -0.5, 0, 2, -2, -2])==-0.5\n    assert candidate([2,2])==None\n\n", "language": "python", "description": "Write a function to find the second smallest number in a list."}
{"task_id": "MBPP/756", "prompt": "\n\ndef text_match_zero_one(text):\n        \"\"\"\n        Write a function that matches a string that has an a followed by zero or one 'b'.\n        >>> text_match_zero_one(\"ac\")\n        ('Found a match!')\n        >>> text_match_zero_one(\"dc\")\n        ('Not matched!')\n        >>> text_match_zero_one(\"abbbba\")\n        ('Found a match!')\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "entry_point": "text_match_zero_one", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"ac\")==('Found a match!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abbbba\")==('Found a match!')\n\n", "language": "python", "description": "Write a function that matches a string that has an a followed by zero or one 'b'."}
{"task_id": "MBPP/757", "prompt": "\n\ndef count_reverse_pairs(test_list):\n  \"\"\"\n  Write a function to count the pairs of reverse strings in the given string list.\n  >>> count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n  '2'\n  >>> count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"])\n  '1'\n  >>> count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"])\n  '2'\n  \"\"\"\n", "canonical_solution": "  \n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return str(res)", "entry_point": "count_reverse_pairs", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\n    assert candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\n    assert candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' \n\n", "language": "python", "description": "Write a function to count the pairs of reverse strings in the given string list."}
{"task_id": "MBPP/758", "prompt": "\n\ndef unique_sublists(list1):\n    \"\"\"\n    Write a function to count number of unique lists within a list.\n    >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )\n    {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    >>> unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])\n    {('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    >>> unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])\n    {(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\n    \"\"\"\n", "canonical_solution": "    \n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "entry_point": "unique_sublists", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert candidate([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\n\n", "language": "python", "description": "Write a function to count number of unique lists within a list."}
{"task_id": "MBPP/759", "prompt": "\n\ndef is_decimal(num):\n    \"\"\"\n    Write a function to check a decimal with a precision of 2.\n    >>> is_decimal('123.11')\n    True\n    >>> is_decimal('e666.86')\n    False\n    >>> is_decimal('3.124587')\n    False\n    \"\"\"\n", "canonical_solution": "    \n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)", "entry_point": "is_decimal", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('123.11')==True\n    assert candidate('e666.86')==False\n    assert candidate('3.124587')==False\n\n", "language": "python", "description": "Write a function to check a decimal with a precision of 2."}
{"task_id": "MBPP/760", "prompt": "\n\ndef unique_Element(arr,n):\n    \"\"\"\n    Write a python function to check whether an array contains only one distinct element or not.\n    >>> unique_Element([1,1,1],3)\n    'YES'\n    >>> unique_Element([1,2,1,2],4)\n    'NO'\n    >>> unique_Element([1,2,3,4,5],5)\n    'NO'\n    \"\"\"\n", "canonical_solution": "    \n    s = set(arr)\n    if (len(s) == 1):\n        return ('YES')\n    else:\n        return ('NO')", "entry_point": "unique_Element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,1,1],3) == 'YES'\n    assert candidate([1,2,1,2],4) == 'NO'\n    assert candidate([1,2,3,4,5],5) == 'NO'\n\n", "language": "python", "description": "Write a python function to check whether an array contains only one distinct element or not."}
{"task_id": "MBPP/761", "prompt": "\n\ndef arc_length(d,a):\n    \"\"\"\n    Write a function to caluclate arc length of an angle.\n    >>> arc_length(9,45)\n    3.5357142857142856\n    >>> arc_length(9,480)\n    None\n    >>> arc_length(5,270)\n    11.785714285714285\n    \"\"\"\n", "canonical_solution": "    \n    pi=22/7\n    if a >= 360:\n        return None\n    arclength = (pi*d) * (a/360)\n    return arclength", "entry_point": "arc_length", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(9,45)==3.5357142857142856\n    assert candidate(9,480)==None\n    assert candidate(5,270)==11.785714285714285\n\n", "language": "python", "description": "Write a function to caluclate arc length of an angle."}
{"task_id": "MBPP/762", "prompt": "\n\ndef check_monthnumber_number(monthnum3):\n  \"\"\"\n  Write a function to check whether the given month number contains 30 days or not.\n  >>> check_monthnumber_number(6)\n  True\n  >>> check_monthnumber_number(2)\n  False\n  >>> check_monthnumber_number(12)\n  False\n  \"\"\"\n", "canonical_solution": "  \n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n    return True\n  else:\n    return False", "entry_point": "check_monthnumber_number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6)==True\n    assert candidate(2)==False\n    assert candidate(12)==False\n\n", "language": "python", "description": "Write a function to check whether the given month number contains 30 days or not."}
{"task_id": "MBPP/763", "prompt": "\n\ndef find_Min_Diff(arr,n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    >>> find_Min_Diff((1,5,3,19,18,25),6)\n    1\n    >>> find_Min_Diff((4,3,2,6),4)\n    1\n    >>> find_Min_Diff((30,5,20,9),4)\n    4\n    \"\"\"\n", "canonical_solution": "     \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff ", "entry_point": "find_Min_Diff", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1,5,3,19,18,25),6) == 1\n    assert candidate((4,3,2,6),4) == 1\n    assert candidate((30,5,20,9),4) == 4\n\n", "language": "python", "description": "Write a python function to find the minimum difference between any two elements in a given array."}
{"task_id": "MBPP/764", "prompt": "\n\ndef number_ctr(str):\n      \"\"\"\n      Write a python function to count numeric values in a given string.\n      >>> number_ctr('program2bedone')\n      1\n      >>> number_ctr('3wonders')\n      1\n      >>> number_ctr('123')\n      3\n      \"\"\"\n", "canonical_solution": "      \n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr", "entry_point": "number_ctr", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('program2bedone') == 1\n    assert candidate('3wonders') ==1\n    assert candidate('123') == 3\n\n", "language": "python", "description": "Write a python function to count numeric values in a given string."}
{"task_id": "MBPP/765", "prompt": "\n\ndef is_polite(n):\n\t\"\"\"\n\tWrite a function to find nth polite number.\n\t>>> is_polite(7)\n\t11\n\t>>> is_polite(4)\n\t7\n\t>>> is_polite(9)\n\t13\n\t\"\"\"\n", "canonical_solution": "\timport math \n\t \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "entry_point": "is_polite", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(7) == 11\n    assert candidate(4) == 7\n    assert candidate(9) == 13\n\n", "language": "python", "description": "Write a function to find nth polite number."}
{"task_id": "MBPP/766", "prompt": "\n\ndef pair_wise(l1):\n    \"\"\"\n    Write a function to iterate over all pairs of consecutive items in a given list.\n    >>> pair_wise([1,1,2,3,3,4,4,5])\n    [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    >>> pair_wise([1,5,7,9,10])\n    [(1, 5), (5, 7), (7, 9), (9, 10)]\n    >>> pair_wise([1,2,3,4,5,6,7,8,9,10])\n    [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n    \"\"\"\n", "canonical_solution": "    \n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp", "entry_point": "pair_wise", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    assert candidate([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n\n", "language": "python", "description": "Write a function to iterate over all pairs of consecutive items in a given list."}
{"task_id": "MBPP/767", "prompt": "\n\ndef get_Pairs_Count(arr,n,sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n    >>> get_Pairs_Count([1,1,1,1],4,2)\n    6\n    >>> get_Pairs_Count([1,5,7,-1,5],5,6)\n    3\n    >>> get_Pairs_Count([1,-2,3],3,1)\n    1\n    \"\"\"\n", "canonical_solution": "    \n    count = 0  \n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count", "entry_point": "get_Pairs_Count", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,1,1,1],4,2) == 6\n    assert candidate([1,5,7,-1,5],5,6) == 3\n    assert candidate([1,-2,3],3,1) == 1\n\n", "language": "python", "description": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019."}
{"task_id": "MBPP/768", "prompt": "\n\ndef check_Odd_Parity(x):\n    \"\"\"\n    Write a python function to check for odd parity of a given number.\n    >>> check_Odd_Parity(13)\n    True\n    >>> check_Odd_Parity(21)\n    True\n    >>> check_Odd_Parity(18)\n    False\n    \"\"\"\n", "canonical_solution": "     \n    parity = 0\n    while (x != 0): \n        x = x & (x - 1) \n        parity += 1\n    if (parity % 2 == 1): \n        return True\n    else: \n        return False", "entry_point": "check_Odd_Parity", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(13) == True\n    assert candidate(21) == True\n    assert candidate(18) == False\n\n", "language": "python", "description": "Write a python function to check for odd parity of a given number."}
{"task_id": "MBPP/769", "prompt": "\n\ndef Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    >>> Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n    [10, 20, 30, 15]\n    >>> Diff([1,2,3,4,5], [6,7,1])\n    [2,3,4,5,6,7]\n    >>> Diff([1,2,3], [6,7,1])\n    [2,3,6,7]\n    \"\"\"\n", "canonical_solution": "    \n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n ", "entry_point": "Diff", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]\n    assert candidate([1,2,3,4,5], [6,7,1]) == [2,3,4,5,6,7]\n    assert candidate([1,2,3], [6,7,1]) == [2,3,6,7]\n\n", "language": "python", "description": "Write a python function to get the difference between two lists."}
{"task_id": "MBPP/770", "prompt": "\n\ndef odd_Num_Sum(n) :\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    >>> odd_Num_Sum(2)\n    82\n    >>> odd_Num_Sum(3)\n    707\n    >>> odd_Num_Sum(4)\n    3108\n    \"\"\"\n", "canonical_solution": "     \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm ", "entry_point": "odd_Num_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 82\n    assert candidate(3) == 707\n    assert candidate(4) == 3108\n\n", "language": "python", "description": "Write a python function to find the sum of fourth power of first n odd natural numbers."}
{"task_id": "MBPP/771", "prompt": "\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    >>> check_expression(\"{()}[{}]\")\n    True\n    >>> check_expression(\"{()}[{]\")\n    False\n    >>> check_expression(\"{()}[{}][]({})\")\n    True\n    \"\"\"\n", "canonical_solution": "    from collections import deque\n    \n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack", "entry_point": "check_expression", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"{()}[{}]\") == True\n    assert candidate(\"{()}[{]\") == False\n    assert candidate(\"{()}[{}][]({})\") == True\n\n", "language": "python", "description": "Write a function to check if the given expression is balanced or not."}
{"task_id": "MBPP/772", "prompt": "\n\ndef remove_length(test_str, K):\n  \"\"\"\n  Write a function to remove all the words with k length in the given string.\n  >>> remove_length('The person is most value tet', 3)\n  'person is most value'\n  >>> remove_length('If you told me about this ok', 4)\n  'If you me about ok'\n  >>> remove_length('Forces of darkeness is come into the play', 4)\n  'Forces of darkeness is the'\n  \"\"\"\n", "canonical_solution": "  \n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) ", "entry_point": "remove_length", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('The person is most value tet', 3) == 'person is most value'\n    assert candidate('If you told me about this ok', 4) == 'If you me about ok'\n    assert candidate('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n\n", "language": "python", "description": "Write a function to remove all the words with k length in the given string."}
{"task_id": "MBPP/773", "prompt": "\n\ndef occurance_substring(text,pattern):\n \"\"\"\n Write a function to find the occurrence and position of the substrings within a string.\n >>> occurance_substring('python programming, python language','python')\n ('python', 0, 6)\n >>> occurance_substring('python programming,programming language','programming')\n ('programming', 7, 18)\n >>> occurance_substring('python programming,programming language','language')\n ('language', 31, 39)\n \"\"\"\n", "canonical_solution": " import re\n \n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)", "entry_point": "occurance_substring", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('python programming, python language','python')==('python', 0, 6)\n    assert candidate('python programming,programming language','programming')==('programming', 7, 18)\n    assert candidate('python programming,programming language','language')==('language', 31, 39)\n\n", "language": "python", "description": "Write a function to find the occurrence and position of the substrings within a string."}
{"task_id": "MBPP/774", "prompt": "\n\ndef check_email(email):\n\t\"\"\"\n\tWrite a function to check if the string is a valid email address or not using regex.\n\t>>> check_email(\"ankitrai326@gmail.com\")\n\t'Valid Email'\n\t>>> check_email(\"my.ownsite@ourearth.org\")\n\t'Valid Email'\n\t>>> check_email(\"ankitaoie326.com\")\n\t'Invalid Email'\n\t\"\"\"\n", "canonical_solution": "\timport re \n\tregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n\t \n\tif(re.search(regex,email)): \n\t\treturn (\"Valid Email\") \n\telse: \n\t\treturn (\"Invalid Email\") ", "entry_point": "check_email", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"ankitrai326@gmail.com\") == 'Valid Email'\n    assert candidate(\"my.ownsite@ourearth.org\") == 'Valid Email'\n    assert candidate(\"ankitaoie326.com\") == 'Invalid Email'\n\n", "language": "python", "description": "Write a function to check if the string is a valid email address or not using regex."}
{"task_id": "MBPP/775", "prompt": "\n\ndef odd_position(nums):\n\t\"\"\"\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t>>> odd_position([2,1,4,3,6,7,6,3])\n\tTrue\n\t>>> odd_position([4,1,2])\n\tTrue\n\t>>> odd_position([1,2,3])\n\tFalse\n\t\"\"\"\n", "canonical_solution": "\t\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "entry_point": "odd_position", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([2,1,4,3,6,7,6,3]) == True\n    assert candidate([4,1,2]) == True\n    assert candidate([1,2,3]) == False\n\n", "language": "python", "description": "Write a python function to check whether every odd index contains odd numbers of a given list."}
{"task_id": "MBPP/776", "prompt": "\n\ndef count_vowels(test_str):\n  \"\"\"\n  Write a function to count those characters which have vowels as their neighbors in the given string.\n  >>> count_vowels('bestinstareels')\n  7\n  >>> count_vowels('partofthejourneyistheend')\n  12\n  >>> count_vowels('amazonprime')\n  5\n  \"\"\"\n", "canonical_solution": "  \n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) ", "entry_point": "count_vowels", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('bestinstareels') == 7\n    assert candidate('partofthejourneyistheend') == 12\n    assert candidate('amazonprime') == 5\n\n", "language": "python", "description": "Write a function to count those characters which have vowels as their neighbors in the given string."}
{"task_id": "MBPP/777", "prompt": "\n\ndef find_Sum(arr,n):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given array.\n    >>> find_Sum([1,2,3,1,1,4,5,6],8)\n    21\n    >>> find_Sum([1,10,9,4,2,10,10,45,4],9)\n    71\n    >>> find_Sum([12,10,9,45,2,10,10,45,10],9)\n    78\n    \"\"\"\n", "canonical_solution": "     \n    arr.sort() \n    sum = arr[0] \n    for i in range(0,n-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum", "entry_point": "find_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,1,1,4,5,6],8) == 21\n    assert candidate([1,10,9,4,2,10,10,45,4],9) == 71\n    assert candidate([12,10,9,45,2,10,10,45,10],9) == 78\n\n", "language": "python", "description": "Write a python function to find the sum of non-repeated elements in a given array."}
{"task_id": "MBPP/778", "prompt": "\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n    [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    >>> pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n    [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    >>> pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])\n    [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n    \"\"\"\n", "canonical_solution": "    from itertools import groupby\n    \n    return [list(group) for key, group in groupby(list1)]", "entry_point": "pack_consecutive_duplicates", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\n", "language": "python", "description": "Write a function to pack consecutive duplicates of a given list elements into sublists."}
{"task_id": "MBPP/779", "prompt": "\n\ndef unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of unique lists within a list.\n    >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n    {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    >>> unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])\n    {('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    >>> unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])\n    {(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\n    \"\"\"\n", "canonical_solution": "    \n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "entry_point": "unique_sublists", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert candidate([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\n\n", "language": "python", "description": "Write a function to count the number of unique lists within a list."}
{"task_id": "MBPP/780", "prompt": "\n\ndef find_combinations(test_list):\n  \"\"\"\n  Write a function to find the combinations of sums with tuples in the given tuple list.\n  >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n  [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n  >>> find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)])\n  [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n  >>> find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)])\n  [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n  \"\"\"\n", "canonical_solution": "  from itertools import combinations \n  \n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) ", "entry_point": "find_combinations", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n\n", "language": "python", "description": "Write a function to find the combinations of sums with tuples in the given tuple list."}
{"task_id": "MBPP/781", "prompt": "\n\ndef count_Divisors(n) :\n    \"\"\"\n    Write a python function to check whether the count of divisors is even or odd.\n    >>> count_Divisors(10)\n    \"Even\"\n    >>> count_Divisors(100)\n    \"Odd\"\n    >>> count_Divisors(125)\n    \"Even\"\n    \"\"\"\n", "canonical_solution": "    import math \n     \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    if (count % 2 == 0) : \n        return (\"Even\") \n    else : \n        return (\"Odd\") ", "entry_point": "count_Divisors", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == \"Even\"\n    assert candidate(100) == \"Odd\"\n    assert candidate(125) == \"Even\"\n\n", "language": "python", "description": "Write a python function to check whether the count of divisors is even or odd."}
{"task_id": "MBPP/782", "prompt": "\n\ndef Odd_Length_Sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    >>> Odd_Length_Sum([1,2,4])\n    14\n    >>> Odd_Length_Sum([1,2,1,2])\n    15\n    >>> Odd_Length_Sum([1,7])\n    8\n    \"\"\"\n", "canonical_solution": "    \n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum", "entry_point": "Odd_Length_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,4]) == 14\n    assert candidate([1,2,1,2]) == 15\n    assert candidate([1,7]) == 8\n\n", "language": "python", "description": "Write a python function to find the sum of all odd length subarrays."}
{"task_id": "MBPP/783", "prompt": "\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    >>> rgb_to_hsv(255, 255, 255)\n    (0, 0.0, 100.0)\n    >>> rgb_to_hsv(0, 215, 0)\n    (120.0, 100.0, 84.31372549019608)\n    >>> rgb_to_hsv(10, 215, 110)\n    (149.26829268292684, 95.34883720930233, 84.31372549019608)\n    \"\"\"\n", "canonical_solution": "    \n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v", "entry_point": "rgb_to_hsv", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(255, 255, 255)==(0, 0.0, 100.0)\n    assert candidate(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\n    assert candidate(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)\n\n", "language": "python", "description": "Write a function to convert rgb color to hsv color."}
{"task_id": "MBPP/784", "prompt": "\n\ndef mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    >>> mul_even_odd([1,3,5,7,4,1,6,8])\n    4\n    >>> mul_even_odd([1,2,3,4,5,6,7,8,9,10])\n    2\n    >>> mul_even_odd([1,5,7,9,10])\n    10\n    \"\"\"\n", "canonical_solution": "    \n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)", "entry_point": "mul_even_odd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8])==4\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==2\n    assert candidate([1,5,7,9,10])==10\n\n", "language": "python", "description": "Write a function to find the product of first even and odd number of a given list."}
{"task_id": "MBPP/785", "prompt": "\n\ndef tuple_str_int(test_str):\n  \"\"\"\n  Write a function to convert tuple string to integer tuple.\n  >>> tuple_str_int(\"(7, 8, 9)\")\n  (7, 8, 9)\n  >>> tuple_str_int(\"(1, 2, 3)\")\n  (1, 2, 3)\n  >>> tuple_str_int(\"(4, 5, 6)\")\n  (4, 5, 6)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) ", "entry_point": "tuple_str_int", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"(7, 8, 9)\") == (7, 8, 9)\n    assert candidate(\"(1, 2, 3)\") == (1, 2, 3)\n    assert candidate(\"(4, 5, 6)\") == (4, 5, 6)\n\n", "language": "python", "description": "Write a function to convert tuple string to integer tuple."}
{"task_id": "MBPP/786", "prompt": "\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    >>> right_insertion([1,2,4,5],6)\n    4\n    >>> right_insertion([1,2,4,5],3)\n    2\n    >>> right_insertion([1,2,4,5],7)\n    4\n    \"\"\"\n", "canonical_solution": "    import bisect\n    \n    i = bisect.bisect_right(a, x)\n    return i", "entry_point": "right_insertion", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,4,5],6)==4\n    assert candidate([1,2,4,5],3)==2\n    assert candidate([1,2,4,5],7)==4\n\n", "language": "python", "description": "Write a function to locate the right insertion point for a specified value in sorted order."}
{"task_id": "MBPP/787", "prompt": "\n\ndef text_match_three(text):\n        \"\"\"\n        Write a function that matches a string that has an a followed by three 'b'.\n        >>> text_match_three(\"ac\")\n        ('Not matched!')\n        >>> text_match_three(\"dc\")\n        ('Not matched!')\n        >>> text_match_three(\"abbbba\")\n        ('Found a match!')\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        patterns = 'ab{3}?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "entry_point": "text_match_three", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"ac\")==('Not matched!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abbbba\")==('Found a match!')\n\n", "language": "python", "description": "Write a function that matches a string that has an a followed by three 'b'."}
{"task_id": "MBPP/788", "prompt": "\n\ndef new_tuple(test_list, test_str):\n  \"\"\"\n  Write a function to create a new tuple from the given string and list.\n  >>> new_tuple([\"WEB\", \"is\"], \"best\")\n  ('WEB', 'is', 'best')\n  >>> new_tuple([\"We\", \"are\"], \"Developers\")\n  ('We', 'are', 'Developers')\n  >>> new_tuple([\"Part\", \"is\"], \"Wrong\")\n  ('Part', 'is', 'Wrong')\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(test_list + [test_str])\n  return (res) ", "entry_point": "new_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n    assert candidate([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\n    assert candidate([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')\n\n", "language": "python", "description": "Write a function to create a new tuple from the given string and list."}
{"task_id": "MBPP/789", "prompt": "\n\ndef perimeter_polygon(s,l):\n  \"\"\"\n  Write a function to calculate the perimeter of a regular polygon.\n  >>> perimeter_polygon(4,20)\n  80\n  >>> perimeter_polygon(10,15)\n  150\n  >>> perimeter_polygon(9,7)\n  63\n  \"\"\"\n", "canonical_solution": "  from math import tan, pi\n  \n  perimeter = s*l\n  return perimeter", "entry_point": "perimeter_polygon", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4,20)==80\n    assert candidate(10,15)==150\n    assert candidate(9,7)==63\n\n", "language": "python", "description": "Write a function to calculate the perimeter of a regular polygon."}
{"task_id": "MBPP/790", "prompt": "\n\ndef even_position(nums):\n\t\"\"\"\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t>>> even_position([3,2,1])\n\tFalse\n\t>>> even_position([1,2,3])\n\tFalse\n\t>>> even_position([2,1,4])\n\tTrue\n\t\"\"\"\n", "canonical_solution": "\t\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "entry_point": "even_position", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3,2,1]) == False\n    assert candidate([1,2,3]) == False\n    assert candidate([2,1,4]) == True\n\n", "language": "python", "description": "Write a python function to check whether every even index contains even numbers of a given list."}
{"task_id": "MBPP/791", "prompt": "\n\ndef remove_nested(test_tup):\n  \"\"\"\n  Write a function to remove the nested record from the given tuple.\n  >>> remove_nested((1, 5, 7, (4, 6), 10))\n  (1, 5, 7, 10)\n  >>> remove_nested((2, 6, 8, (5, 7), 11))\n  (2, 6, 8, 11)\n  >>> remove_nested((3, 7, 9, (6, 8), 12))\n  (3, 7, 9, 12)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) ", "entry_point": "remove_nested", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n    assert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\n    assert candidate((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\n\n", "language": "python", "description": "Write a function to remove the nested record from the given tuple."}
{"task_id": "MBPP/792", "prompt": "\n\ndef count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    4\n    >>> count_list([[1,2],[2,3],[4,5]])\n    3\n    >>> count_list([[1,0],[2,0]])\n    2\n    \"\"\"\n", "canonical_solution": "     \n    return len(input_list)", "entry_point": "count_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n    assert candidate([[1,2],[2,3],[4,5]]) == 3\n    assert candidate([[1,0],[2,0]]) == 2\n\n", "language": "python", "description": "Write a python function to count the number of lists in a given number of lists."}
{"task_id": "MBPP/793", "prompt": "\n\ndef last(arr,x,n):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    >>> last([1,2,3],1,3)\n    0\n    >>> last([1,1,1,2,3,4],1,6)\n    2\n    >>> last([2,3,2,3,6,8,9],3,8)\n    3\n    \"\"\"\n", "canonical_solution": "    \n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res", "entry_point": "last", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3],1,3) == 0\n    assert candidate([1,1,1,2,3,4],1,6) == 2\n    assert candidate([2,3,2,3,6,8,9],3,8) == 3\n\n", "language": "python", "description": "Write a python function to find the last position of an element in a sorted array."}
{"task_id": "MBPP/794", "prompt": "\n\ndef text_starta_endb(text):\n        \"\"\"\n        Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n        >>> text_starta_endb(\"aabbbb\")\n        ('Found a match!')\n        >>> text_starta_endb(\"aabAbbbc\")\n        ('Not matched!')\n        >>> text_starta_endb(\"accddbbjjj\")\n        ('Not matched!')\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        patterns = 'a.*?b$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "entry_point": "text_starta_endb", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"aabbbb\")==('Found a match!')\n    assert candidate(\"aabAbbbc\")==('Not matched!')\n    assert candidate(\"accddbbjjj\")==('Not matched!')\n\n", "language": "python", "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'."}
{"task_id": "MBPP/795", "prompt": "\n\ndef cheap_items(items,n):\n  \"\"\"\n  Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n  >>> cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)\n  [{'name': 'Item-1', 'price': 101.1}]\n  >>> cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)\n  [{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\n  >>> cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)\n  [{'name': 'Item-4', 'price': 22.75}]\n  \"\"\"\n", "canonical_solution": "  import heapq\n  \n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\n  return cheap_items", "entry_point": "cheap_items", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]\n\n", "language": "python", "description": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm."}
{"task_id": "MBPP/796", "prompt": "\n\ndef return_sum(dict):\n  \"\"\"\n  Write function to find the sum of all items in the given dictionary.\n  >>> return_sum({'a': 100, 'b':200, 'c':300})\n  600\n  >>> return_sum({'a': 25, 'b':18, 'c':45})\n  88\n  >>> return_sum({'a': 36, 'b':39, 'c':49})\n  124\n  \"\"\"\n", "canonical_solution": "  \n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum", "entry_point": "return_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'a': 100, 'b':200, 'c':300}) == 600\n    assert candidate({'a': 25, 'b':18, 'c':45}) == 88\n    assert candidate({'a': 36, 'b':39, 'c':49}) == 124\n\n", "language": "python", "description": "Write function to find the sum of all items in the given dictionary."}
{"task_id": "MBPP/797", "prompt": "\n\ndef sum_in_Range(l,r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    >>> sum_in_Range(2,5)\n    8\n    >>> sum_in_Range(5,7)\n    12\n    >>> sum_in_Range(7,13)\n    40\n    \"\"\"\n", "canonical_solution": "    def sum_Odd(n): \n        terms = (n + 1)//2\n        sum1 = terms * terms \n        return sum1  \n     \n    return sum_Odd(r) - sum_Odd(l - 1)", "entry_point": "sum_in_Range", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2,5) == 8\n    assert candidate(5,7) == 12\n    assert candidate(7,13) == 40\n\n", "language": "python", "description": "Write a python function to find the sum of all odd natural numbers within the range l and r."}
{"task_id": "MBPP/798", "prompt": "\n\ndef _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    >>> _sum([1, 2, 3])\n    6\n    >>> _sum([15, 12, 13, 10])\n    50\n    >>> _sum([0, 1, 2])\n    3\n    \"\"\"\n", "canonical_solution": "      \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  ", "entry_point": "_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([15, 12, 13, 10]) == 50\n    assert candidate([0, 1, 2]) == 3\n\n", "language": "python", "description": "Write a python function to find the sum of an array."}
{"task_id": "MBPP/799", "prompt": "\n\ndef left_Rotate(n,d):\n    \"\"\"\n    Write a python function to left rotate the bits of a given number.\n    >>> left_Rotate(16,2)\n    64\n    >>> left_Rotate(10,2)\n    40\n    >>> left_Rotate(99,3)\n    792\n    \"\"\"\n", "canonical_solution": "    INT_BITS = 32\n       \n    return (n << d)|(n >> (INT_BITS - d))  ", "entry_point": "left_Rotate", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(16,2) == 64\n    assert candidate(10,2) == 40\n    assert candidate(99,3) == 792\n\n", "language": "python", "description": "Write a python function to left rotate the bits of a given number."}
{"task_id": "MBPP/800", "prompt": "\n\ndef remove_all_spaces(text):\n \"\"\"\n Write a function to remove all whitespaces from a string.\n >>> remove_all_spaces('python  program')\n ('pythonprogram')\n >>> remove_all_spaces('python   programming    language')\n ('pythonprogramminglanguage')\n >>> remove_all_spaces('python                     program')\n ('pythonprogram')\n \"\"\"\n", "canonical_solution": " import re\n \n return (re.sub(r'\\s+', '',text))", "entry_point": "remove_all_spaces", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('python  program')==('pythonprogram')\n    assert candidate('python   programming    language')==('pythonprogramminglanguage')\n    assert candidate('python                     program')==('pythonprogram')\n\n", "language": "python", "description": "Write a function to remove all whitespaces from a string."}
{"task_id": "MBPP/801", "prompt": "\n\ndef test_three_equal(x,y,z):\n  \"\"\"\n  Write a python function to count the number of equal numbers from three given integers.\n  >>> test_three_equal(1,1,1)\n  3\n  >>> test_three_equal(-1,-2,-3)\n  0\n  >>> test_three_equal(1,2,2)\n  2\n  \"\"\"\n", "canonical_solution": "  \n  result= set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return (4-len(result))", "entry_point": "test_three_equal", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,1,1) == 3\n    assert candidate(-1,-2,-3) == 0\n    assert candidate(1,2,2) == 2\n\n", "language": "python", "description": "Write a python function to count the number of equal numbers from three given integers."}
{"task_id": "MBPP/802", "prompt": "\n\ndef count_Rotation(arr,n):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    >>> count_Rotation([3,2,1],3)\n    1\n    >>> count_Rotation([4,5,1,2,3],5)\n    2\n    >>> count_Rotation([7,8,9,1,2,3],6)\n    3\n    \"\"\"\n", "canonical_solution": "       \n    for i in range (1,n): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0", "entry_point": "count_Rotation", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3,2,1],3) == 1\n    assert candidate([4,5,1,2,3],5) == 2\n    assert candidate([7,8,9,1,2,3],6) == 3\n\n", "language": "python", "description": "Write a python function to count the number of rotations required to generate a sorted array."}
{"task_id": "MBPP/803", "prompt": "\n\ndef is_Perfect_Square(n) :\n    \"\"\"\n    Write a python function to check whether the given number is a perfect square or not.\n    >>> is_Perfect_Square(10)\n    False\n    >>> is_Perfect_Square(36)\n    True\n    >>> is_Perfect_Square(14)\n    False\n    \"\"\"\n", "canonical_solution": "    \n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False", "entry_point": "is_Perfect_Square", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == False\n    assert candidate(36) == True\n    assert candidate(14) == False\n\n", "language": "python", "description": "Write a python function to check whether the given number is a perfect square or not."}
{"task_id": "MBPP/804", "prompt": "\n\ndef is_Product_Even(arr,n):\n    \"\"\"\n    Write a python function to check whether the product of numbers is even or not.\n    >>> is_Product_Even([1,2,3],3)\n    True\n    >>> is_Product_Even([1,2,1,4],4)\n    True\n    >>> is_Product_Even([1,1],2)\n    False\n    \"\"\"\n", "canonical_solution": "     \n    for i in range(0,n): \n        if ((arr[i] & 1) == 0): \n            return True\n    return False", "entry_point": "is_Product_Even", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3],3) == True\n    assert candidate([1,2,1,4],4) == True\n    assert candidate([1,1],2) == False\n\n", "language": "python", "description": "Write a python function to check whether the product of numbers is even or not."}
{"task_id": "MBPP/805", "prompt": "\n\ndef max_sum_list(lists):\n \"\"\"\n Write a function to find the list in a list of lists whose sum of elements is the highest.\n >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n [10, 11, 12]\n >>> max_sum_list([[3,2,1], [6,5,4], [12,11,10]])\n [12,11,10]\n >>> max_sum_list([[2,3,1]])\n [2,3,1]\n \"\"\"\n", "canonical_solution": " \n return max(lists, key=sum)", "entry_point": "max_sum_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n    assert candidate([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \n    assert candidate([[2,3,1]])==[2,3,1] \n\n", "language": "python", "description": "Write a function to find the list in a list of lists whose sum of elements is the highest."}
{"task_id": "MBPP/806", "prompt": "\n\ndef max_run_uppercase(test_str):\n  \"\"\"\n  Write a function to find maximum run of uppercase characters in the given string.\n  >>> max_run_uppercase('GeMKSForGERksISBESt')\n  5\n  >>> max_run_uppercase('PrECIOusMOVemENTSYT')\n  6\n  >>> max_run_uppercase('GooGLEFluTTER')\n  4\n  \"\"\"\n", "canonical_solution": "  \n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)", "entry_point": "max_run_uppercase", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('GeMKSForGERksISBESt') == 5\n    assert candidate('PrECIOusMOVemENTSYT') == 6\n    assert candidate('GooGLEFluTTER') == 4\n\n", "language": "python", "description": "Write a function to find maximum run of uppercase characters in the given string."}
{"task_id": "MBPP/807", "prompt": "\n\ndef first_odd(nums):\n  \"\"\"\n  Write a python function to find the first odd number in a given list of numbers.\n  >>> first_odd([1,3,5])\n  1\n  >>> first_odd([2,4,1,3])\n  1\n  >>> first_odd ([8,9,1])\n  9\n  \"\"\"\n", "canonical_solution": "  \n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd", "entry_point": "first_odd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,3,5]) == 1\n    assert candidate([2,4,1,3]) == 1\n    assert candidate ([8,9,1]) == 9\n\n", "language": "python", "description": "Write a python function to find the first odd number in a given list of numbers."}
{"task_id": "MBPP/808", "prompt": "\n\ndef check_K(test_tup, K):\n  \"\"\"\n  Write a function to check if the given tuples contain the k or not.\n  >>> check_K((10, 4, 5, 6, 8), 6)\n  True\n  >>> check_K((1, 2, 3, 4, 5, 6), 7)\n  False\n  >>> check_K((7, 8, 9, 44, 11, 12), 11)\n  True\n  \"\"\"\n", "canonical_solution": "  \n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return (res) ", "entry_point": "check_K", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6, 8), 6) == True\n    assert candidate((1, 2, 3, 4, 5, 6), 7) == False\n    assert candidate((7, 8, 9, 44, 11, 12), 11) == True\n\n", "language": "python", "description": "Write a function to check if the given tuples contain the k or not."}
{"task_id": "MBPP/809", "prompt": "\n\ndef check_smaller(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n  >>> check_smaller((1, 2, 3), (2, 3, 4))\n  False\n  >>> check_smaller((4, 5, 6), (3, 4, 5))\n  True\n  >>> check_smaller((11, 12, 13), (10, 11, 12))\n  True\n  \"\"\"\n", "canonical_solution": "  \n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\n  return (res) ", "entry_point": "check_smaller", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 2, 3), (2, 3, 4)) == False\n    assert candidate((4, 5, 6), (3, 4, 5)) == True\n    assert candidate((11, 12, 13), (10, 11, 12)) == True\n\n", "language": "python", "description": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple."}
{"task_id": "MBPP/810", "prompt": "\n\ndef count_variable(a,b,c,d):\n  \"\"\"\n  Write a function to iterate over elements repeating each as many times as its count.\n  >>> count_variable(4,2,0,-2)\n  ['p', 'p', 'p', 'p', 'q', 'q']\n  >>> count_variable(0,1,2,3)\n  ['q', 'r', 'r', 's', 's', 's']\n  >>> count_variable(11,15,12,23)\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']\n  \"\"\"\n", "canonical_solution": "  from collections import Counter\n  \n  c = Counter(p=a, q=b, r=c, s=d)\n  return list(c.elements())", "entry_point": "count_variable", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \n    assert candidate(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \n    assert candidate(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']\n\n", "language": "python", "description": "Write a function to iterate over elements repeating each as many times as its count."}
{"task_id": "MBPP/811", "prompt": "\n\ndef check_identical(test_list1, test_list2):\n  \"\"\"\n  Write a function to check if two lists of tuples are identical or not.\n  >>> check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)])\n  True\n  >>> check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)])\n  False\n  >>> check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)])\n  True\n  \"\"\"\n", "canonical_solution": "  \n  res = test_list1 == test_list2\n  return (res) ", "entry_point": "check_identical", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\n    assert candidate([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\n    assert candidate([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True\n\n", "language": "python", "description": "Write a function to check if two lists of tuples are identical or not."}
{"task_id": "MBPP/812", "prompt": "\n\ndef road_rd(street):\n  \"\"\"\n  Write a function to abbreviate 'road' as 'rd.' in a given string.\n  >>> road_rd(\"ravipadu Road\")\n  ('ravipadu Rd.')\n  >>> road_rd(\"palnadu Road\")\n  ('palnadu Rd.')\n  >>> road_rd(\"eshwar enclave Road\")\n  ('eshwar enclave Rd.')\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  return (re.sub('Road$', 'Rd.', street))", "entry_point": "road_rd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"ravipadu Road\")==('ravipadu Rd.')\n    assert candidate(\"palnadu Road\")==('palnadu Rd.')\n    assert candidate(\"eshwar enclave Road\")==('eshwar enclave Rd.')\n\n", "language": "python", "description": "Write a function to abbreviate 'road' as 'rd.' in a given string."}
{"task_id": "MBPP/813", "prompt": "\n\ndef string_length(str1):\n    \"\"\"\n    Write a function to find length of the string.\n    >>> string_length('python')\n    6\n    >>> string_length('program')\n    7\n    >>> string_length('language')\n    8\n    \"\"\"\n", "canonical_solution": "    \n    count = 0\n    for char in str1:\n        count += 1\n    return count", "entry_point": "string_length", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('python')==6\n    assert candidate('program')==7\n    assert candidate('language')==8\n\n", "language": "python", "description": "Write a function to find length of the string."}
{"task_id": "MBPP/814", "prompt": "\n\ndef rombus_area(p,q):\n  \"\"\"\n  Write a function to find the area of a rombus.\n  >>> rombus_area(10,20)\n  100\n  >>> rombus_area(10,5)\n  25\n  >>> rombus_area(4,2)\n  4\n  \"\"\"\n", "canonical_solution": "  \n  area=(p*q)/2\n  return area", "entry_point": "rombus_area", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,20)==100\n    assert candidate(10,5)==25\n    assert candidate(4,2)==4\n\n", "language": "python", "description": "Write a function to find the area of a rombus."}
{"task_id": "MBPP/815", "prompt": "\n\ndef sort_by_dnf(arr, n):\n  \"\"\"\n  Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n  >>> sort_by_dnf([1,2,0,1,0,1,2,1,1], 9)\n  [0, 0, 1, 1, 1, 1, 1, 2, 2]\n  >>> sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10)\n  [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n  >>> sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10)\n  [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n  \"\"\"\n", "canonical_solution": "  \n  low=0\n  mid=0\n  high=n-1\n  while mid <= high:\n    if arr[mid] == 0:\n      arr[low], arr[mid] = arr[mid], arr[low]\n      low = low + 1\n      mid = mid + 1\n    elif arr[mid] == 1:\n      mid = mid + 1\n    else:\n      arr[mid], arr[high] = arr[high], arr[mid]\n      high = high - 1\n  return arr", "entry_point": "sort_by_dnf", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\n    assert candidate([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n    assert candidate([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n\n", "language": "python", "description": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2."}
{"task_id": "MBPP/816", "prompt": "\n\ndef clear_tuple(test_tup):\n  \"\"\"\n  Write a function to clear the values of the given tuples.\n  >>> clear_tuple((1, 5, 3, 6, 8))\n  ()\n  >>> clear_tuple((2, 1, 4 ,5 ,6))\n  ()\n  >>> clear_tuple((3, 2, 5, 6, 8))\n  ()\n  \"\"\"\n", "canonical_solution": "  \n  temp = list(test_tup)\n  temp.clear()\n  test_tup = tuple(temp)\n  return (test_tup) ", "entry_point": "clear_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 5, 3, 6, 8)) == ()\n    assert candidate((2, 1, 4 ,5 ,6)) == ()\n    assert candidate((3, 2, 5, 6, 8)) == ()\n\n", "language": "python", "description": "Write a function to clear the values of the given tuples."}
{"task_id": "MBPP/817", "prompt": "\n\ndef div_of_nums(nums,m,n):\n \"\"\"\n Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n >>> div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)\n [19, 65, 57, 39, 152, 190]\n >>> div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)\n [2, 5, 8, 10]\n >>> div_of_nums([10,15,14,13,18,12,20],10,5)\n [10, 15, 20]\n \"\"\"\n", "canonical_solution": " \n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \n return result", "entry_point": "div_of_nums", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\n    assert candidate([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\n    assert candidate([10,15,14,13,18,12,20],10,5)==[10, 15, 20]\n\n", "language": "python", "description": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function."}
{"task_id": "MBPP/818", "prompt": "\n\ndef lower_ctr(str):\n      \"\"\"\n      Write a python function to count lower case letters in a given string.\n      >>> lower_ctr('abc')\n      3\n      >>> lower_ctr('string')\n      6\n      >>> lower_ctr('Python')\n      5\n      \"\"\"\n", "canonical_solution": "      \n      lower_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \n      return  lower_ctr", "entry_point": "lower_ctr", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('abc') == 3\n    assert candidate('string') == 6\n    assert candidate('Python') == 5\n\n", "language": "python", "description": "Write a python function to count lower case letters in a given string."}
{"task_id": "MBPP/819", "prompt": "\n\ndef count_duplic(lists):\n    \"\"\"\n    Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n    >>> count_duplic([1,2,2,2,4,4,4,5,5,5,5])\n    ([1, 2, 4, 5], [1, 3, 3, 4])\n    >>> count_duplic([2,2,3,1,2,6,7,9])\n    ([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\n    >>> count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])\n    ([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    \"\"\"\n", "canonical_solution": "    \n    element = []\n    frequency = []\n    if not lists:\n        return element\n    running_count = 1\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lists[i+1])\n    return element,frequency\n", "entry_point": "count_duplic", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\n    assert candidate([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n\n", "language": "python", "description": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers."}
{"task_id": "MBPP/820", "prompt": "\n\ndef check_monthnum_number(monthnum1):\n  \"\"\"\n  Write a function to check whether the given month number contains 28 days or not.\n  >>> check_monthnum_number(2)\n  True\n  >>> check_monthnum_number(1)\n  False\n  >>> check_monthnum_number(3)\n  False\n  \"\"\"\n", "canonical_solution": "  \n  if monthnum1 == 2:\n    return True\n  else:\n    return False", "entry_point": "check_monthnum_number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2)==True\n    assert candidate(1)==False\n    assert candidate(3)==False\n\n", "language": "python", "description": "Write a function to check whether the given month number contains 28 days or not."}
{"task_id": "MBPP/821", "prompt": "\n\ndef merge_dictionaries(dict1,dict2):\n    \"\"\"\n    Write a function to merge two dictionaries into a single expression.\n    >>> merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })\n    {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\n    >>> merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n    {'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\n    >>> merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n    {'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}\n    \"\"\"\n", "canonical_solution": "    import collections as ct\n    \n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\n    return merged_dict", "entry_point": "merge_dictionaries", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\n    assert candidate({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}\n\n", "language": "python", "description": "Write a function to merge two dictionaries into a single expression."}
{"task_id": "MBPP/822", "prompt": "\n\ndef pass_validity(p):\n \"\"\"\n Write a function to return true if the password is valid.\n >>> pass_validity(\"password\")\n False\n >>> pass_validity(\"Password@10\")\n True\n >>> pass_validity(\"password@10\")\n False\n \"\"\"\n", "canonical_solution": " import re\n \n x = True\n while x:  \n    if (len(p)<6 or len(p)>12):\n        break\n    elif not re.search(\"[a-z]\",p):\n        break\n    elif not re.search(\"[0-9]\",p):\n        break\n    elif not re.search(\"[A-Z]\",p):\n        break\n    elif not re.search(\"[$#@]\",p):\n        break\n    elif re.search(\"\\s\",p):\n        break\n    else:\n        return True\n        x=False\n        break\n\n if x:\n    return False", "entry_point": "pass_validity", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"password\")==False\n    assert candidate(\"Password@10\")==True\n    assert candidate(\"password@10\")==False\n\n", "language": "python", "description": "Write a function to return true if the password is valid."}
{"task_id": "MBPP/823", "prompt": "\n\ndef check_substring(string, sample) :\n  \"\"\"\n  Write a function to check if the given string starts with a substring using regex.\n  >>> check_substring(\"dreams for dreams makes life fun\", \"makes\")\n  'string doesnt start with the given substring'\n  >>> check_substring(\"Hi there how are you Hi alex\", \"Hi\")\n  'string starts with the given substring'\n  >>> check_substring(\"Its been a long day\", \"been\")\n  'string doesnt start with the given substring'\n  \"\"\"\n", "canonical_solution": "  import re \n   \n  if (sample in string): \n      y = \"\\A\" + sample \n      x = re.search(y, string) \n      if x : \n          return (\"string starts with the given substring\") \n      else : \n          return (\"string doesnt start with the given substring\") \n  else : \n      return (\"entered string isnt a substring\")", "entry_point": "check_substring", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\n    assert candidate(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\n    assert candidate(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'\n\n", "language": "python", "description": "Write a function to check if the given string starts with a substring using regex."}
{"task_id": "MBPP/824", "prompt": "\n\ndef remove_even(l):\n    \"\"\"\n    Write a python function to remove even numbers from a given list.\n    >>> remove_even([1,3,5,2])\n    [1,3,5]\n    >>> remove_even([5,6,7])\n    [5,7]\n    >>> remove_even([1,2,3,4])\n    [1,3]\n    \"\"\"\n", "canonical_solution": "    \n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l", "entry_point": "remove_even", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,3,5,2]) == [1,3,5]\n    assert candidate([5,6,7]) == [5,7]\n    assert candidate([1,2,3,4]) == [1,3]\n\n", "language": "python", "description": "Write a python function to remove even numbers from a given list."}
{"task_id": "MBPP/825", "prompt": "\n\ndef access_elements(nums, list_index):\n    \"\"\"\n    Write a python function to access multiple elements of specified index from a given list.\n    >>> access_elements([2,3,8,4,7,9],[0,3,5])\n    [2, 4, 9]\n    >>> access_elements([1, 2, 3, 4, 5],[1,2])\n    [2,3]\n    >>> access_elements([1,0,2,3],[0,1])\n    [1,0]\n    \"\"\"\n", "canonical_solution": "    \n    result = [nums[i] for i in list_index]\n    return result", "entry_point": "access_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\n    assert candidate([1, 2, 3, 4, 5],[1,2]) == [2,3]\n    assert candidate([1,0,2,3],[0,1]) == [1,0]\n\n", "language": "python", "description": "Write a python function to access multiple elements of specified index from a given list."}
{"task_id": "MBPP/826", "prompt": "\n\ndef check_Type_Of_Triangle(a,b,c):\n    \"\"\"\n    Write a python function to find the type of triangle from the given sides.\n    >>> check_Type_Of_Triangle(1,2,3)\n    \"Obtuse-angled Triangle\"\n    >>> check_Type_Of_Triangle(2,2,2)\n    \"Acute-angled Triangle\"\n    >>> check_Type_Of_Triangle(1,0,1)\n    \"Right-angled Triangle\"\n    \"\"\"\n", "canonical_solution": "     \n    sqa = pow(a,2) \n    sqb = pow(b,2) \n    sqc = pow(c,2) \n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \n        return (\"Right-angled Triangle\") \n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \n        return (\"Obtuse-angled Triangle\") \n    else: \n        return (\"Acute-angled Triangle\") ", "entry_point": "check_Type_Of_Triangle", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,2,3) == \"Obtuse-angled Triangle\"\n    assert candidate(2,2,2) == \"Acute-angled Triangle\"\n    assert candidate(1,0,1) == \"Right-angled Triangle\"\n\n", "language": "python", "description": "Write a python function to find the type of triangle from the given sides."}
{"task_id": "MBPP/827", "prompt": "\n\ndef sum_column(list1, C):\n    \"\"\"\n    Write a function to sum a specific column of a list in a given list of lists.\n    >>> sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)\n    12\n    >>> sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)\n    15\n    >>> sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)\n    9\n    \"\"\"\n", "canonical_solution": "    \n    result = sum(row[C] for row in list1)\n    return result", "entry_point": "sum_column", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\n    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\n    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9\n\n", "language": "python", "description": "Write a function to sum a specific column of a list in a given list of lists."}
{"task_id": "MBPP/828", "prompt": "\n\ndef count_alpha_dig_spl(string):\n  \"\"\"\n  Write a function to count alphabets,digits and special charactes in a given string.\n  >>> count_alpha_dig_spl(\"abc!@#123\")\n  (3,3,3)\n  >>> count_alpha_dig_spl(\"dgsuy@#$%&1255\")\n  (5,4,5)\n  >>> count_alpha_dig_spl(\"fjdsif627348#%$^&\")\n  (6,6,5)\n  \"\"\"\n", "canonical_solution": "  \n  alphabets=digits = special = 0\n  for i in range(len(string)):\n    if(string[i].isalpha()):\n        alphabets = alphabets + 1\n    elif(string[i].isdigit()):\n        digits = digits + 1\n    else:\n        special = special + 1\n  return (alphabets,digits,special)   ", "entry_point": "count_alpha_dig_spl", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"abc!@#123\")==(3,3,3)\n    assert candidate(\"dgsuy@#$%&1255\")==(5,4,5)\n    assert candidate(\"fjdsif627348#%$^&\")==(6,6,5)\n\n", "language": "python", "description": "Write a function to count alphabets,digits and special charactes in a given string."}
{"task_id": "MBPP/829", "prompt": "\n\ndef second_frequent(input):\n\t\"\"\"\n\tWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\t>>> second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa'])\n\t'bbb'\n\t>>> second_frequent(['abc','bcd','abc','bcd','bcd','bcd'])\n\t'abc'\n\t>>> second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma'])\n\t'gsm'\n\t\"\"\"\n", "canonical_solution": "\tfrom collections import Counter \n\t\t\n\t \n\tdict = Counter(input) \n\tvalue = sorted(dict.values(), reverse=True)  \n\tsecond_large = value[1] \n\tfor (key, val) in dict.items(): \n\t\tif val == second_large: \n\t\t\treturn (key) ", "entry_point": "second_frequent", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\n    assert candidate(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\n    assert candidate(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'\n\n", "language": "python", "description": "Write a function to find out the second most repeated (or frequent) string in the given sequence."}
{"task_id": "MBPP/830", "prompt": "\n\ndef round_up(a, digits):\n    \"\"\"\n    Write a function to round up a number to specific digits.\n    >>> round_up(123.01247,0)\n    124\n    >>> round_up(123.01247,1)\n    123.1\n    >>> round_up(123.01247,2)\n    123.02\n    \"\"\"\n", "canonical_solution": "    import math\n    \n    n = 10**-digits\n    return round(math.ceil(a / n) * n, digits)", "entry_point": "round_up", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(123.01247,0)==124\n    assert candidate(123.01247,1)==123.1\n    assert candidate(123.01247,2)==123.02\n\n", "language": "python", "description": "Write a function to round up a number to specific digits."}
{"task_id": "MBPP/831", "prompt": "\n\ndef count_Pairs(arr,n):\n    \"\"\"\n    Write a python function to count equal element pairs from the given array.\n    >>> count_Pairs([1,1,1,1],4)\n    6\n    >>> count_Pairs([1,5,1],3)\n    1\n    >>> count_Pairs([3,2,1,7,8,9],6)\n    0\n    \"\"\"\n", "canonical_solution": "     \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] == arr[j]): \n                cnt += 1; \n    return cnt; ", "entry_point": "count_Pairs", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,1,1,1],4) == 6\n    assert candidate([1,5,1],3) == 1\n    assert candidate([3,2,1,7,8,9],6) == 0\n\n", "language": "python", "description": "Write a python function to count equal element pairs from the given array."}
{"task_id": "MBPP/832", "prompt": "\n\ndef extract_max(input):\n\t\"\"\"\n\tWrite a function to extract the maximum numeric value from a string by using regex.\n\t>>> extract_max('100klh564abc365bg')\n\t564\n\t>>> extract_max('hello300how546mer231')\n\t546\n\t>>> extract_max('its233beenalong343journey234')\n\t343\n\t\"\"\"\n", "canonical_solution": "\timport re \n\t \n\tnumbers = re.findall('\\d+',input) \n\tnumbers = map(int,numbers) \n\treturn max(numbers)", "entry_point": "extract_max", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('100klh564abc365bg') == 564\n    assert candidate('hello300how546mer231') == 546\n    assert candidate('its233beenalong343journey234') == 343\n\n", "language": "python", "description": "Write a function to extract the maximum numeric value from a string by using regex."}
{"task_id": "MBPP/833", "prompt": "\n\ndef get_key(dict):\n    \"\"\"\n    Write a function to get dictionary keys as a list.\n    >>> get_key({1:'python',2:'java'})\n    [1,2]\n    >>> get_key({10:'red',20:'blue',30:'black'})\n    [10,20,30]\n    >>> get_key({27:'language',39:'java',44:'little'})\n    [27,39,44]\n    \"\"\"\n", "canonical_solution": "     \n    list = [] \n    for key in dict.keys(): \n        list.append(key)           \n    return list", "entry_point": "get_key", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({1:'python',2:'java'})==[1,2]\n    assert candidate({10:'red',20:'blue',30:'black'})==[10,20,30]\n    assert candidate({27:'language',39:'java',44:'little'})==[27,39,44]\n\n", "language": "python", "description": "Write a function to get dictionary keys as a list."}
{"task_id": "MBPP/834", "prompt": "\n\ndef generate_matrix(n):\n        \"\"\"\n        Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n        >>> generate_matrix(3)\n        [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n        >>> generate_matrix(2)\n        [[1,2],[4,3]]\n        >>> generate_matrix(7)\n        [[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]\n        \"\"\"\n", "canonical_solution": "        \n        if n<=0:\n            return [] \n        matrix=[row[:] for row in [[0]*n]*n]        \n        row_st=0\n        row_ed=n-1        \n        col_st=0\n        col_ed=n-1\n        current=1        \n        while (True):\n            if current>n*n:\n                break\n            for c in range (col_st, col_ed+1):\n                matrix[row_st][c]=current\n                current+=1\n            row_st+=1\n            for r in range (row_st, row_ed+1):\n                matrix[r][col_ed]=current\n                current+=1\n            col_ed-=1\n            for c in range (col_ed, col_st-1, -1):\n                matrix[row_ed][c]=current\n                current+=1\n            row_ed-=1\n            for r in range (row_ed, row_st-1, -1):\n                matrix[r][col_st]=current\n                current+=1\n            col_st+=1\n        return matrix", "entry_point": "generate_matrix", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \n    assert candidate(2)==[[1,2],[4,3]]\n    assert candidate(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]\n\n", "language": "python", "description": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order."}
{"task_id": "MBPP/835", "prompt": "\n\ndef slope(x1,y1,x2,y2):\n    \"\"\"\n    Write a python function to find the slope of a line.\n    >>> slope(4,2,2,5)\n    -1.5\n    >>> slope(2,4,4,6)\n    1\n    >>> slope(1,2,4,2)\n    0\n    \"\"\"\n", "canonical_solution": "     \n    return (float)(y2-y1)/(x2-x1)  ", "entry_point": "slope", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4,2,2,5) == -1.5\n    assert candidate(2,4,4,6) == 1\n    assert candidate(1,2,4,2) == 0\n\n", "language": "python", "description": "Write a python function to find the slope of a line."}
{"task_id": "MBPP/836", "prompt": "\n\ndef max_sub_array_sum(a,size):\n\t\"\"\"\n\tWrite a function to find length of the subarray having maximum sum.\n\t>>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8)\n\t5\n\t>>> max_sub_array_sum([1, -2, 1, 1, -2, 1],6)\n\t2\n\t>>> max_sub_array_sum([-1, -2, 3, 4, 5],5)\n\t3\n\t\"\"\"\n", "canonical_solution": "\tfrom sys import maxsize \n\t \n\tmax_so_far = -maxsize - 1\n\tmax_ending_here = 0\n\tstart = 0\n\tend = 0\n\ts = 0\n\tfor i in range(0,size): \n\t\tmax_ending_here += a[i] \n\t\tif max_so_far < max_ending_here: \n\t\t\tmax_so_far = max_ending_here \n\t\t\tstart = s \n\t\t\tend = i \n\t\tif max_ending_here < 0: \n\t\t\tmax_ending_here = 0\n\t\t\ts = i+1\n\treturn (end - start + 1)", "entry_point": "max_sub_array_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\n    assert candidate([1, -2, 1, 1, -2, 1],6) == 2\n    assert candidate([-1, -2, 3, 4, 5],5) == 3\n\n", "language": "python", "description": "Write a function to find length of the subarray having maximum sum."}
{"task_id": "MBPP/837", "prompt": "\n\ndef cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n odd natural numbers.\n    >>> cube_Sum(2)\n    28\n    >>> cube_Sum(3)\n    153\n    >>> cube_Sum(4)\n    496\n    \"\"\"\n", "canonical_solution": "     \n    sum = 0   \n    for i in range(0,n) : \n        sum += (2*i+1)*(2*i+1)*(2*i+1) \n    return sum", "entry_point": "cube_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 28\n    assert candidate(3) == 153\n    assert candidate(4) == 496\n\n", "language": "python", "description": "Write a python function to find the cube sum of first n odd natural numbers."}
{"task_id": "MBPP/838", "prompt": "\n\ndef min_Swaps(s1,s2) :\n    \"\"\"\n    Write a python function to find minimum number swaps required to make two binary strings equal.\n    >>> min_Swaps(\"0011\",\"1111\")\n    1\n    >>> min_Swaps(\"00011\",\"01001\")\n    2\n    >>> min_Swaps(\"111\",\"111\")\n    0\n    \"\"\"\n", "canonical_solution": "      \n    c0 = 0; c1 = 0;  \n    for i in range(len(s1)) :  \n        if (s1[i] == '0' and s2[i] == '1') : \n            c0 += 1;    \n        elif (s1[i] == '1' and s2[i] == '0') : \n            c1 += 1;  \n    result = c0 // 2 + c1 // 2;  \n    if (c0 % 2 == 0 and c1 % 2 == 0) : \n        return result;  \n    elif ((c0 + c1) % 2 == 0) : \n        return result + 2;  \n    else : \n        return -1;  ", "entry_point": "min_Swaps", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"0011\",\"1111\") == 1\n    assert candidate(\"00011\",\"01001\") == 2\n    assert candidate(\"111\",\"111\") == 0\n\n", "language": "python", "description": "Write a python function to find minimum number swaps required to make two binary strings equal."}
{"task_id": "MBPP/839", "prompt": "\n\ndef sort_tuple(tup):\n\t\"\"\"\n\tWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\t>>> sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")])\n\t[('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n\t>>> sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")])\n\t[('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\n\t>>> sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")])\n\t[('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]\n\t\"\"\"\n", "canonical_solution": "\t \n\tn = len(tup) \n\tfor i in range(n): \n\t\tfor j in range(n-i-1): \n\t\t\tif tup[j][0] > tup[j + 1][0]: \n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \n\treturn tup", "entry_point": "sort_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n    assert candidate([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\n    assert candidate([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]\n\n", "language": "python", "description": "Write a function to sort the tuples alphabetically by the first item of each tuple."}
{"task_id": "MBPP/840", "prompt": "\n\ndef Check_Solution(a,b,c):\n    \"\"\"\n    Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n    >>> Check_Solution(2,0,-1)\n    \"Yes\"\n    >>> Check_Solution(1,-5,6)\n    \"No\"\n    >>> Check_Solution(2,0,2)\n    \"Yes\"\n    \"\"\"\n", "canonical_solution": "      \n    if b == 0:  \n        return (\"Yes\")  \n    else: \n        return (\"No\")  ", "entry_point": "Check_Solution", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2,0,-1) == \"Yes\"\n    assert candidate(1,-5,6) == \"No\"\n    assert candidate(2,0,2) == \"Yes\"\n\n", "language": "python", "description": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not."}
{"task_id": "MBPP/841", "prompt": "\n\ndef get_inv_count(arr, n):\n\t\"\"\"\n\tWrite a function to count the number of inversions in the given array.\n\t>>> get_inv_count([1, 20, 6, 4, 5], 5)\n\t5\n\t>>> get_inv_count([8, 4, 2, 1], 4)\n\t6\n\t>>> get_inv_count([3, 1, 2], 3)\n\t2\n\t\"\"\"\n", "canonical_solution": "\t \n\tinv_count = 0\n\tfor i in range(n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif (arr[i] > arr[j]): \n\t\t\t\tinv_count += 1\n\treturn inv_count ", "entry_point": "get_inv_count", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 20, 6, 4, 5], 5) == 5\n    assert candidate([8, 4, 2, 1], 4) == 6\n    assert candidate([3, 1, 2], 3) == 2\n\n", "language": "python", "description": "Write a function to count the number of inversions in the given array."}
{"task_id": "MBPP/842", "prompt": "\n\ndef get_odd_occurence(arr, arr_size):\n  \"\"\"\n  Write a function to find the number which occurs for odd number of times in the given array.\n  >>> get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n  5\n  >>> get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7)\n  3\n  >>> get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7)\n  5\n  \"\"\"\n", "canonical_solution": "  \n  for i in range(0, arr_size):\n    count = 0\n    for j in range(0, arr_size):\n      if arr[i] == arr[j]:\n        count += 1\n    if (count % 2 != 0):\n      return arr[i]\n  return -1", "entry_point": "get_odd_occurence", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\n    assert candidate([1, 2, 3, 2, 3, 1, 3], 7) == 3\n    assert candidate([5, 7, 2, 7, 5, 2, 5], 7) == 5\n\n", "language": "python", "description": "Write a function to find the number which occurs for odd number of times in the given array."}
{"task_id": "MBPP/843", "prompt": "\n\ndef nth_super_ugly_number(n, primes):\n    \"\"\"\n    Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n    >>> nth_super_ugly_number(12,[2,7,13,19])\n    32\n    >>> nth_super_ugly_number(10,[2,7,13,19])\n    26\n    >>> nth_super_ugly_number(100,[2,7,13,19])\n    5408\n    \"\"\"\n", "canonical_solution": "    import heapq\n    \n    uglies = [1]\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]", "entry_point": "nth_super_ugly_number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12,[2,7,13,19])==32\n    assert candidate(10,[2,7,13,19])==26\n    assert candidate(100,[2,7,13,19])==5408\n\n", "language": "python", "description": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm."}
{"task_id": "MBPP/844", "prompt": "\n\ndef get_Number(n, k):\n    \"\"\"\n    Write a python function to find the kth element in an array containing odd elements first and then even elements.\n    >>> get_Number(8,5)\n    2\n    >>> get_Number(7,2)\n    3\n    >>> get_Number(5,2)\n    3\n    \"\"\"\n", "canonical_solution": "     \n    arr = [0] * n; \n    i = 0; \n    odd = 1; \n    while (odd <= n):   \n        arr[i] = odd; \n        i += 1; \n        odd += 2;\n    even = 2; \n    while (even <= n): \n        arr[i] = even; \n        i += 1;\n        even += 2; \n    return arr[k - 1]; ", "entry_point": "get_Number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8,5) == 2\n    assert candidate(7,2) == 3\n    assert candidate(5,2) == 3\n\n", "language": "python", "description": "Write a python function to find the kth element in an array containing odd elements first and then even elements."}
{"task_id": "MBPP/845", "prompt": "\n\ndef find_Digits(n):\n    \"\"\"\n    Write a python function to count the number of digits in factorial of a given number.\n    >>> find_Digits(7)\n    4\n    >>> find_Digits(5)\n    3\n    >>> find_Digits(4)\n    2\n    \"\"\"\n", "canonical_solution": "    import math \n     \n    if (n < 0): \n        return 0;\n    if (n <= 1): \n        return 1; \n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \n    return math.floor(x) + 1; ", "entry_point": "find_Digits", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(7) == 4\n    assert candidate(5) == 3\n    assert candidate(4) == 2\n\n", "language": "python", "description": "Write a python function to count the number of digits in factorial of a given number."}
{"task_id": "MBPP/846", "prompt": "\n\ndef find_platform(arr, dep, n):\n    \"\"\"\n    Write a function to find the minimum number of platforms required for a railway/bus station.\n    >>> find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)\n    3\n    >>> find_platform([100,200,300,400],[700,800,900,1000],4)\n    4\n    >>> find_platform([5,6,7,8],[4,3,2,1],4)\n    1\n    \"\"\"\n", "canonical_solution": "     \n    arr.sort() \n    dep.sort() \n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n): \n        if (arr[i] <= dep[j]):           \n            plat_needed+= 1\n            i+= 1\n        elif (arr[i] > dep[j]):           \n            plat_needed-= 1\n            j+= 1\n        if (plat_needed > result):  \n            result = plat_needed           \n    return result", "entry_point": "find_platform", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\n    assert candidate([100,200,300,400],[700,800,900,1000],4)==4\n    assert candidate([5,6,7,8],[4,3,2,1],4)==1\n\n", "language": "python", "description": "Write a function to find the minimum number of platforms required for a railway/bus station."}
{"task_id": "MBPP/847", "prompt": "\n\ndef lcopy(xs):\n  \"\"\"\n  Write a python function to copy a list from a singleton tuple.\n  >>> lcopy([1, 2, 3])\n  [1, 2, 3]\n  >>> lcopy([4, 8, 2, 10, 15, 18])\n  [4, 8, 2, 10, 15, 18]\n  >>> lcopy([4, 5, 6])\n  [4, 5, 6]\n  \"\"\"\n", "canonical_solution": "  \n  return xs[:]\n", "entry_point": "lcopy", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == [1, 2, 3]\n    assert candidate([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\n    assert candidate([4, 5, 6]) == [4, 5, 6]\n\n\n", "language": "python", "description": "Write a python function to copy a list from a singleton tuple."}
{"task_id": "MBPP/848", "prompt": "\n\ndef area_trapezium(base1,base2,height):\n \"\"\"\n Write a function to find the area of a trapezium.\n >>> area_trapezium(6,9,4)\n 30\n >>> area_trapezium(10,20,30)\n 450\n >>> area_trapezium(15,25,35)\n 700\n \"\"\"\n", "canonical_solution": " \n area = 0.5 * (base1 + base2) * height\n return area", "entry_point": "area_trapezium", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6,9,4)==30\n    assert candidate(10,20,30)==450\n    assert candidate(15,25,35)==700\n\n", "language": "python", "description": "Write a function to find the area of a trapezium."}
{"task_id": "MBPP/849", "prompt": "\n\ndef Sum(N):\n    \"\"\"\n    Write a python function to find sum of all prime divisors of a given number.\n    >>> Sum(60)\n    10\n    >>> Sum(39)\n    16\n    >>> Sum(40)\n    7\n    \"\"\"\n", "canonical_solution": "     \n    SumOfPrimeDivisors = [0]*(N + 1)   \n    for i in range(2,N + 1) : \n        if (SumOfPrimeDivisors[i] == 0) : \n            for j in range(i,N + 1,i) : \n                SumOfPrimeDivisors[j] += i           \n    return SumOfPrimeDivisors[N] ", "entry_point": "Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(60) == 10\n    assert candidate(39) == 16\n    assert candidate(40) == 7\n\n", "language": "python", "description": "Write a python function to find sum of all prime divisors of a given number."}
{"task_id": "MBPP/850", "prompt": "\n\ndef is_triangleexists(a,b,c):\n    \"\"\"\n    Write a function to check if a triangle of positive area is possible with the given angles.\n    >>> is_triangleexists(50,60,70)\n    True\n    >>> is_triangleexists(90,45,45)\n    True\n    >>> is_triangleexists(150,30,70)\n    False\n    \"\"\"\n", "canonical_solution": "     \n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \n            return True \n        else:\n            return False\n    else:\n        return False", "entry_point": "is_triangleexists", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50,60,70)==True\n    assert candidate(90,45,45)==True\n    assert candidate(150,30,70)==False\n\n", "language": "python", "description": "Write a function to check if a triangle of positive area is possible with the given angles."}
{"task_id": "MBPP/851", "prompt": "\n\ndef Sum_of_Inverse_Divisors(N,Sum):\n    \"\"\"\n    Write a python function to find sum of inverse of divisors.\n    >>> Sum_of_Inverse_Divisors(6,12)\n    2\n    >>> Sum_of_Inverse_Divisors(9,13)\n    1.44\n    >>> Sum_of_Inverse_Divisors(1,4)\n    4\n    \"\"\"\n", "canonical_solution": "     \n    ans = float(Sum)*1.0 /float(N);  \n    return round(ans,2); ", "entry_point": "Sum_of_Inverse_Divisors", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6,12) == 2\n    assert candidate(9,13) == 1.44\n    assert candidate(1,4) == 4\n\n", "language": "python", "description": "Write a python function to find sum of inverse of divisors."}
{"task_id": "MBPP/852", "prompt": "\n\ndef remove_negs(num_list):\n    \"\"\"\n    Write a python function to remove negative numbers from a list.\n    >>> remove_negs([1,-2,3,-4])\n    [1,3]\n    >>> remove_negs([1,2,3,-4])\n    [1,2,3]\n    >>> remove_negs([4,5,-6,7,-8])\n    [4,5,7]\n    \"\"\"\n", "canonical_solution": "     \n    for item in num_list: \n        if item < 0: \n           num_list.remove(item) \n    return num_list", "entry_point": "remove_negs", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,-2,3,-4]) == [1,3]\n    assert candidate([1,2,3,-4]) == [1,2,3]\n    assert candidate([4,5,-6,7,-8]) == [4,5,7]\n\n", "language": "python", "description": "Write a python function to remove negative numbers from a list."}
{"task_id": "MBPP/853", "prompt": "\n\ndef sum_of_odd_Factors(n):\n    \"\"\"\n    Write a python function to find sum of odd factors of a number.\n    >>> sum_of_odd_Factors(30)\n    24\n    >>> sum_of_odd_Factors(18)\n    13\n    >>> sum_of_odd_Factors(2)\n    1\n    \"\"\"\n", "canonical_solution": "    import math\n     \n    res = 1\n    while n % 2 == 0: \n        n = n // 2 \n    for i in range(3,int(math.sqrt(n) + 1)): \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0: \n            count+=1 \n            n = n // i \n            curr_term *= i \n            curr_sum += curr_term    \n        res *= curr_sum  \n    if n >= 2: \n        res *= (1 + n) \n    return res ", "entry_point": "sum_of_odd_Factors", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(30) == 24\n    assert candidate(18) == 13\n    assert candidate(2) == 1\n\n", "language": "python", "description": "Write a python function to find sum of odd factors of a number."}
{"task_id": "MBPP/854", "prompt": "\n\ndef raw_heap(rawheap):\n  \"\"\"\n  Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n  >>> raw_heap([25, 44, 68, 21, 39, 23, 89])\n  [21, 25, 23, 44, 39, 68, 89]\n  >>> raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])\n  [14, 25, 22, 25, 35, 65, 75, 85, 58]\n  >>> raw_heap([4, 5, 6, 2])\n  [2, 4, 6, 5]\n  \"\"\"\n", "canonical_solution": "  import heapq as hq\n  \n  hq.heapify(rawheap)\n  return rawheap", "entry_point": "raw_heap", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\n    assert candidate([4, 5, 6, 2])==[2, 4, 6, 5]\n\n", "language": "python", "description": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm."}
{"task_id": "MBPP/855", "prompt": "\n\ndef check_Even_Parity(x):\n    \"\"\"\n    Write a python function to check for even parity of a given number.\n    >>> check_Even_Parity(10)\n    True\n    >>> check_Even_Parity(11)\n    False\n    >>> check_Even_Parity(18)\n    True\n    \"\"\"\n", "canonical_solution": "     \n    parity = 0\n    while (x != 0): \n        x = x & (x - 1) \n        parity += 1\n    if (parity % 2 == 0): \n        return True\n    else: \n        return False", "entry_point": "check_Even_Parity", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(18) == True\n\n", "language": "python", "description": "Write a python function to check for even parity of a given number."}
{"task_id": "MBPP/856", "prompt": "\n\ndef find_Min_Swaps(arr,n) :\n    \"\"\"\n    Write a python function to find minimum adjacent swaps required to sort binary array.\n    >>> find_Min_Swaps([1,0,1,0],4)\n    3\n    >>> find_Min_Swaps([0,1,0],3)\n    1\n    >>> find_Min_Swaps([0,0,1,1,0],5)\n    2\n    \"\"\"\n", "canonical_solution": "     \n    noOfZeroes = [0] * n \n    count = 0 \n    noOfZeroes[n - 1] = 1 - arr[n - 1] \n    for i in range(n-2,-1,-1) : \n        noOfZeroes[i] = noOfZeroes[i + 1] \n        if (arr[i] == 0) : \n            noOfZeroes[i] = noOfZeroes[i] + 1\n    for i in range(0,n) : \n        if (arr[i] == 1) : \n            count = count + noOfZeroes[i] \n    return count ", "entry_point": "find_Min_Swaps", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,0,1,0],4) == 3\n    assert candidate([0,1,0],3) == 1\n    assert candidate([0,0,1,1,0],5) == 2\n\n", "language": "python", "description": "Write a python function to find minimum adjacent swaps required to sort binary array."}
{"task_id": "MBPP/857", "prompt": "\n\ndef listify_list(list1):\n  \"\"\"\n  Write a function to list out the list of given strings individually using map function.\n  >>> listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])\n  [['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\n  >>> listify_list(['python'])\n  [['p', 'y', 't', 'h', 'o', 'n']]\n  >>> listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])\n  [[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]\n  \"\"\"\n", "canonical_solution": "  \n  result = list(map(list,list1)) \n  return result ", "entry_point": "listify_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\n    assert candidate(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\n    assert candidate([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]\n\n", "language": "python", "description": "Write a function to list out the list of given strings individually using map function."}
{"task_id": "MBPP/858", "prompt": "\n\ndef count_list(input_list):\n    \"\"\"\n    Write a function to count number of lists in a given list of lists and square the count.\n    >>> count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    25\n    >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )\n    16\n    >>> count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])\n    9\n    \"\"\"\n", "canonical_solution": "     \n    return (len(input_list))**2", "entry_point": "count_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\n    assert candidate([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9\n\n", "language": "python", "description": "Write a function to count number of lists in a given list of lists and square the count."}
{"task_id": "MBPP/859", "prompt": "\n\ndef sub_lists(my_list):\n\t\"\"\"\n\tWrite a function to generate all sublists of a given list.\n\t>>> sub_lists([10, 20, 30, 40])\n\t[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n\t>>> sub_lists(['X', 'Y', 'Z'])\n\t[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\n\t>>> sub_lists([1,2,3])\n\t[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]\n\t\"\"\"\n", "canonical_solution": "\tfrom itertools import combinations\n\t\n\tsubs = []\n\tfor i in range(0, len(my_list)+1):\n\t  temp = [list(x) for x in combinations(my_list, i)]\n\t  if len(temp)>0:\n\t    subs.extend(temp)\n\treturn subs", "entry_point": "sub_lists", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n    assert candidate(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\n    assert candidate([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]\n\n", "language": "python", "description": "Write a function to generate all sublists of a given list."}
{"task_id": "MBPP/860", "prompt": "\n\ndef check_alphanumeric(string):\n\t\"\"\"\n\tWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\t>>> check_alphanumeric(\"dawood@\")\n\t'Discard'\n\t>>> check_alphanumeric(\"skdmsam326\")\n\t'Accept'\n\t>>> check_alphanumeric(\"cooltricks@\")\n\t'Discard'\n\t\"\"\"\n", "canonical_solution": "\timport re \n\tregex = '[a-zA-z0-9]$'\n\t \n\tif(re.search(regex, string)): \n\t\treturn (\"Accept\") \n\telse: \n\t\treturn (\"Discard\") ", "entry_point": "check_alphanumeric", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"dawood@\") == 'Discard'\n    assert candidate(\"skdmsam326\") == 'Accept'\n    assert candidate(\"cooltricks@\") == 'Discard'\n\n", "language": "python", "description": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex."}
{"task_id": "MBPP/861", "prompt": "\n\ndef anagram_lambda(texts,str):\n  \"\"\"\n  Write a function to find all anagrams of a string in a given list of strings using lambda function.\n  >>> anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")\n  ['bcda', 'cbda', 'adcb']\n  >>> anagram_lambda([\"recitals\",\" python\"], \"articles\" )\n  [\"recitals\"]\n  >>> anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")\n  [\" keep\"]\n  \"\"\"\n", "canonical_solution": "  from collections import Counter \n  \n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \n  return result", "entry_point": "anagram_lambda", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\n    assert candidate([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\n    assert candidate([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]\n\n", "language": "python", "description": "Write a function to find all anagrams of a string in a given list of strings using lambda function."}
{"task_id": "MBPP/862", "prompt": "\n\ndef n_common_words(text,n):\n  \"\"\"\n  Write a function to find the occurrences of n most common words in a given text.\n  >>> n_common_words(\"python is a programming language\",1)\n  [('python', 1)]\n  >>> n_common_words(\"python is a programming language\",1)\n  [('python', 1)]\n  >>> n_common_words(\"python is a programming language\",5)\n  [('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]\n  \"\"\"\n", "canonical_solution": "  from collections import Counter\n  import re\n  \n  words = re.findall('\\w+',text)\n  n_common_words= Counter(words).most_common(n)\n  return list(n_common_words)", "entry_point": "n_common_words", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"python is a programming language\",1)==[('python', 1)]\n    assert candidate(\"python is a programming language\",1)==[('python', 1)]\n    assert candidate(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]\n\n", "language": "python", "description": "Write a function to find the occurrences of n most common words in a given text."}
{"task_id": "MBPP/863", "prompt": "\n\ndef find_longest_conseq_subseq(arr, n):\n\t\"\"\"\n\tWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\t>>> find_longest_conseq_subseq([1, 2, 2, 3], 4)\n\t3\n\t>>> find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7)\n\t4\n\t>>> find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11)\n\t5\n\t\"\"\"\n", "canonical_solution": "\t \n\tans = 0\n\tcount = 0\n\tarr.sort() \n\tv = [] \n\tv.append(arr[0]) \n\tfor i in range(1, n): \n\t\tif (arr[i] != arr[i - 1]): \n\t\t\tv.append(arr[i]) \n\tfor i in range(len(v)): \n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount = 1\n\t\tans = max(ans, count) \n\treturn ans ", "entry_point": "find_longest_conseq_subseq", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, 3], 4) == 3\n    assert candidate([1, 9, 3, 10, 4, 20, 2], 7) == 4\n    assert candidate([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5\n\n", "language": "python", "description": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers."}
{"task_id": "MBPP/864", "prompt": "\n\ndef palindrome_lambda(texts):\n  \"\"\"\n  Write a function to find palindromes in a given list of strings using lambda function.\n  >>> palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n  ['php', 'aaa']\n  >>> palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])\n  ['abba', 'aba']\n  >>> palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])\n  ['abbccbba', 'abba', 'aba']\n  \"\"\"\n", "canonical_solution": "  \n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n  return result", "entry_point": "palindrome_lambda", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\n    assert candidate([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\n    assert candidate([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']\n\n", "language": "python", "description": "Write a function to find palindromes in a given list of strings using lambda function."}
{"task_id": "MBPP/865", "prompt": "\n\ndef ntimes_list(nums,n):\n    \"\"\"\n    Write a function to print n-times a list using map function.\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7],3)\n    [3, 6, 9, 12, 15, 18, 21]\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7],4)\n    [4, 8, 12, 16, 20, 24, 28]\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7],10)\n    [10, 20, 30, 40, 50, 60, 70]\n    \"\"\"\n", "canonical_solution": "    \n    result = map(lambda x:n*x, nums) \n    return list(result)", "entry_point": "ntimes_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\n    assert candidate([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\n    assert candidate([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]\n\n", "language": "python", "description": "Write a function to print n-times a list using map function."}
{"task_id": "MBPP/866", "prompt": "\n\ndef check_monthnumb(monthname2):\n  \"\"\"\n  Write a function to check whether the given month name contains 31 days or not.\n  >>> check_monthnumb(\"February\")\n  False\n  >>> check_monthnumb(\"January\")\n  True\n  >>> check_monthnumb(\"March\")\n  True\n  \"\"\"\n", "canonical_solution": "  \n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\n    return True\n  else:\n    return False", "entry_point": "check_monthnumb", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"February\")==False\n    assert candidate(\"January\")==True\n    assert candidate(\"March\")==True\n\n", "language": "python", "description": "Write a function to check whether the given month name contains 31 days or not."}
{"task_id": "MBPP/867", "prompt": "\n\ndef min_Num(arr,n):\n    \"\"\"\n    Write a python function to add a minimum number such that the sum of array becomes even.\n    >>> min_Num([1,2,3,4,5,6,7,8,9],9)\n    1\n    >>> min_Num([1,2,3,4,5,6,7,8],8)\n    2\n    >>> min_Num([1,2,3],3)\n    2\n    \"\"\"\n", "canonical_solution": "      \n    odd = 0\n    for i in range(n): \n        if (arr[i] % 2): \n            odd += 1 \n    if (odd % 2): \n        return 1\n    return 2", "entry_point": "min_Num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8,9],9) == 1\n    assert candidate([1,2,3,4,5,6,7,8],8) == 2\n    assert candidate([1,2,3],3) == 2\n\n", "language": "python", "description": "Write a python function to add a minimum number such that the sum of array becomes even."}
{"task_id": "MBPP/868", "prompt": "\n\ndef length_Of_Last_Word(a):\n    \"\"\"\n    Write a python function to find the length of the last word in a given string.\n    >>> length_Of_Last_Word(\"python language\")\n    8\n    >>> length_Of_Last_Word(\"PHP\")\n    3\n    >>> length_Of_Last_Word(\"\")\n    0\n    \"\"\"\n", "canonical_solution": "     \n    l = 0\n    x = a.strip() \n    for i in range(len(x)): \n        if x[i] == \" \": \n            l = 0\n        else: \n            l += 1\n    return l ", "entry_point": "length_Of_Last_Word", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"python language\") == 8\n    assert candidate(\"PHP\") == 3\n    assert candidate(\"\") == 0\n\n", "language": "python", "description": "Write a python function to find the length of the last word in a given string."}
{"task_id": "MBPP/869", "prompt": "\n\ndef remove_list_range(list1, leftrange, rigthrange):\n   \"\"\"\n   Write a function to remove sublists from a given list of lists, which are outside a given range.\n   >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)\n   [[13, 14, 15, 17]]\n   >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)\n   [[2], [1, 2, 3]]\n   >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)\n   [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\n   \"\"\"\n", "canonical_solution": "   \n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\n   return result", "entry_point": "remove_list_range", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\n\n", "language": "python", "description": "Write a function to remove sublists from a given list of lists, which are outside a given range."}
{"task_id": "MBPP/870", "prompt": "\n\ndef sum_positivenum(nums):\n  \"\"\"\n  Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n  >>> sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n  48\n  >>> sum_positivenum([10,15,-14,13,-18,12,-20])\n  50\n  >>> sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])\n  522\n  \"\"\"\n", "canonical_solution": "  \n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\n  return sum(sum_positivenum)", "entry_point": "sum_positivenum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\n    assert candidate([10,15,-14,13,-18,12,-20])==50\n    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522\n\n", "language": "python", "description": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function."}
{"task_id": "MBPP/871", "prompt": "\n\ndef are_Rotations(string1,string2):\n    \"\"\"\n    Write a python function to check whether the given strings are rotations of each other or not.\n    >>> are_Rotations(\"abc\",\"cba\")\n    False\n    >>> are_Rotations(\"abcd\",\"cdba\")\n    False\n    >>> are_Rotations(\"abacd\",\"cdaba\")\n    True\n    \"\"\"\n", "canonical_solution": "     \n    size1 = len(string1) \n    size2 = len(string2) \n    temp = '' \n    if size1 != size2: \n        return False\n    temp = string1 + string1 \n    if (temp.count(string2)> 0): \n        return True\n    else: \n        return False", "entry_point": "are_Rotations", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"abc\",\"cba\") == False\n    assert candidate(\"abcd\",\"cdba\") == False\n    assert candidate(\"abacd\",\"cdaba\") == True\n\n", "language": "python", "description": "Write a python function to check whether the given strings are rotations of each other or not."}
{"task_id": "MBPP/872", "prompt": "\n\ndef check_subset(list1,list2):\n    \"\"\"\n    Write a function to check if a nested list is a subset of another nested list.\n    >>> check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])\n    True\n    >>> check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])\n    True\n    >>> check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])\n    False\n    \"\"\"\n", "canonical_solution": "     \n    return all(map(list1.__contains__,list2)) ", "entry_point": "check_subset", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\n    assert candidate([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\n    assert candidate([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False\n\n", "language": "python", "description": "Write a function to check if a nested list is a subset of another nested list."}
{"task_id": "MBPP/873", "prompt": "\n\ndef fibonacci(n):\n  \"\"\"\n  Write a function to solve the fibonacci sequence using recursion.\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  \"\"\"\n", "canonical_solution": "  \n  if n == 1 or n == 2:\n    return 1\n  else:\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "entry_point": "fibonacci", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(7) == 13\n    assert candidate(8) == 21\n    assert candidate(9) == 34\n\n", "language": "python", "description": "Write a function to solve the fibonacci sequence using recursion."}
{"task_id": "MBPP/874", "prompt": "\n\ndef check_Concat(str1,str2):\n    \"\"\"\n    Write a python function to check if the string is a concatenation of another string.\n    >>> check_Concat(\"abcabcabc\",\"abc\")\n    True\n    >>> check_Concat(\"abcab\",\"abc\")\n    False\n    >>> check_Concat(\"aba\",\"ab\")\n    False\n    \"\"\"\n", "canonical_solution": "    \n    N = len(str1)\n    M = len(str2)\n    if (N % M != 0):\n        return False\n    for i in range(N):\n        if (str1[i] != str2[i % M]):\n            return False         \n    return True", "entry_point": "check_Concat", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"abcabcabc\",\"abc\") == True\n    assert candidate(\"abcab\",\"abc\") == False\n    assert candidate(\"aba\",\"ab\") == False\n\n", "language": "python", "description": "Write a python function to check if the string is a concatenation of another string."}
{"task_id": "MBPP/875", "prompt": "\n\ndef min_difference(test_list):\n  \"\"\"\n  Write a function to find the minimum difference in the tuple pairs of given tuples.\n  >>> min_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n  1\n  >>> min_difference([(4, 6), (12, 8), (11, 4), (2, 13)])\n  2\n  >>> min_difference([(5, 17), (3, 9), (12, 5), (3, 24)])\n  6\n  \"\"\"\n", "canonical_solution": "  \n  temp = [abs(b - a) for a, b in test_list]\n  res = min(temp)\n  return (res) ", "entry_point": "min_difference", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\n    assert candidate([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\n    assert candidate([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6\n\n", "language": "python", "description": "Write a function to find the minimum difference in the tuple pairs of given tuples."}
{"task_id": "MBPP/876", "prompt": "\n\ndef lcm(x, y):\n   \"\"\"\n   Write a python function to find lcm of two positive integers.\n   >>> lcm(4,6)\n   12\n   >>> lcm(15,17)\n   255\n   >>> lcm(2,6)\n   6\n   \"\"\"\n", "canonical_solution": "   \n   if x > y:\n       z = x\n   else:\n       z = y\n   while(True):\n       if((z % x == 0) and (z % y == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm", "entry_point": "lcm", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4,6) == 12\n    assert candidate(15,17) == 255\n    assert candidate(2,6) == 6\n\n", "language": "python", "description": "Write a python function to find lcm of two positive integers."}
{"task_id": "MBPP/877", "prompt": "\n\ndef sort_String(str) :\n    \"\"\"\n    Write a python function to sort the given string.\n    >>> sort_String(\"cba\")\n    \"abc\"\n    >>> sort_String(\"data\")\n    \"aadt\"\n    >>> sort_String(\"zxy\")\n    \"xyz\"\n    \"\"\"\n", "canonical_solution": "     \n    str = ''.join(sorted(str)) \n    return (str) ", "entry_point": "sort_String", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"cba\") == \"abc\"\n    assert candidate(\"data\") == \"aadt\"\n    assert candidate(\"zxy\") == \"xyz\"\n\n", "language": "python", "description": "Write a python function to sort the given string."}
{"task_id": "MBPP/878", "prompt": "\n\ndef check_tuples(test_tuple, K):\n  \"\"\"\n  Write a function to check if the given tuple contains only k elements.\n  >>> check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5])\n  True\n  >>> check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6])\n  True\n  >>> check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1])\n  False\n  \"\"\"\n", "canonical_solution": "  \n  res = all(ele in K for ele in test_tuple)\n  return (res) ", "entry_point": "check_tuples", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\n    assert candidate((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\n    assert candidate((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False\n\n", "language": "python", "description": "Write a function to check if the given tuple contains only k elements."}
{"task_id": "MBPP/879", "prompt": "\n\ndef text_match(text):\n  \"\"\"\n  Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n  >>> text_match(\"aabbbbd\")\n  'Not matched!'\n  >>> text_match(\"aabAbbbc\")\n  'Not matched!'\n  >>> text_match(\"accddbbjjjb\")\n  'Found a match!'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  patterns = 'a.*?b$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')", "entry_point": "text_match", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"aabbbbd\") == 'Not matched!'\n    assert candidate(\"aabAbbbc\") == 'Not matched!'\n    assert candidate(\"accddbbjjjb\") == 'Found a match!'\n\n", "language": "python", "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex."}
{"task_id": "MBPP/880", "prompt": "\n\ndef Check_Solution(a,b,c) :\n    \"\"\"\n    Write a python function to find number of solutions in quadratic equation.\n    >>> Check_Solution(2,5,2)\n    \"2 solutions\"\n    >>> Check_Solution(1,1,1)\n    \"No solutions\"\n    >>> Check_Solution(1,2,1)\n    \"1 solution\"\n    \"\"\"\n", "canonical_solution": "     \n    if ((b*b) - (4*a*c)) > 0 : \n        return (\"2 solutions\") \n    elif ((b*b) - (4*a*c)) == 0 : \n        return (\"1 solution\") \n    else : \n        return (\"No solutions\") ", "entry_point": "Check_Solution", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2,5,2) == \"2 solutions\"\n    assert candidate(1,1,1) == \"No solutions\"\n    assert candidate(1,2,1) == \"1 solution\"\n\n", "language": "python", "description": "Write a python function to find number of solutions in quadratic equation."}
{"task_id": "MBPP/881", "prompt": "\n\ndef sum_even_odd(list1):\n    \"\"\"\n    Write a function to find the sum of first even and odd number of a given list.\n    >>> sum_even_odd([1,3,5,7,4,1,6,8])\n    5\n    >>> sum_even_odd([1,2,3,4,5,6,7,8,9,10])\n    3\n    >>> sum_even_odd([1,5,7,9,10])\n    11\n    \"\"\"\n", "canonical_solution": "    \n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even+first_odd)", "entry_point": "sum_even_odd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8])==5\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==3\n    assert candidate([1,5,7,9,10])==11\n\n", "language": "python", "description": "Write a function to find the sum of first even and odd number of a given list."}
{"task_id": "MBPP/882", "prompt": "\n\ndef parallelogram_perimeter(b,h):\n  \"\"\"\n  Write a function to caluclate perimeter of a parallelogram.\n  >>> parallelogram_perimeter(10,20)\n  400\n  >>> parallelogram_perimeter(15,20)\n  600\n  >>> parallelogram_perimeter(8,9)\n  144\n  \"\"\"\n", "canonical_solution": "  \n  perimeter=2*(b*h)\n  return perimeter", "entry_point": "parallelogram_perimeter", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,20)==400\n    assert candidate(15,20)==600\n    assert candidate(8,9)==144\n\n", "language": "python", "description": "Write a function to caluclate perimeter of a parallelogram."}
{"task_id": "MBPP/883", "prompt": "\n\ndef div_of_nums(nums,m,n):\n \"\"\"\n Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n >>> div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)\n [ 152,44]\n >>> div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)\n [10]\n >>> div_of_nums([10,15,14,13,18,12,20],10,5)\n [10,20]\n \"\"\"\n", "canonical_solution": " \n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \n return result", "entry_point": "div_of_nums", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\n    assert candidate([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\n    assert candidate([10,15,14,13,18,12,20],10,5)==[10,20]\n\n", "language": "python", "description": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function."}
{"task_id": "MBPP/884", "prompt": "\n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    Write a python function to check whether all the bits are within a given range or not.\n    >>> all_Bits_Set_In_The_Given_Range(10,2,1)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(5,2,4)\n    False\n    >>> all_Bits_Set_In_The_Given_Range(22,2,3)\n    True\n    \"\"\"\n", "canonical_solution": "     \n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \n    new_num = n & num \n    if (num == new_num): \n        return True\n    return False", "entry_point": "all_Bits_Set_In_The_Given_Range", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,2,1) == True \n    assert candidate(5,2,4) == False\n    assert candidate(22,2,3) == True \n\n", "language": "python", "description": "Write a python function to check whether all the bits are within a given range or not."}
{"task_id": "MBPP/885", "prompt": "\n\ndef is_Isomorphic(str1,str2):\n    \"\"\"\n    Write a python function to check whether the two given strings are isomorphic to each other or not.\n    >>> is_Isomorphic(\"paper\",\"title\")\n    True\n    >>> is_Isomorphic(\"ab\",\"ba\")\n    True\n    >>> is_Isomorphic(\"ab\",\"aa\")\n    False\n    \"\"\"\n", "canonical_solution": "              \n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False", "entry_point": "is_Isomorphic", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"paper\",\"title\") == True\n    assert candidate(\"ab\",\"ba\") == True\n    assert candidate(\"ab\",\"aa\") == False\n\n", "language": "python", "description": "Write a python function to check whether the two given strings are isomorphic to each other or not."}
{"task_id": "MBPP/886", "prompt": "\n\ndef sum_num(numbers):\n    \"\"\"\n    Write a function to add all the numbers in a list and divide it with the length of the list.\n    >>> sum_num((8, 2, 3, 0, 7))\n    4.0\n    >>> sum_num((-10,-20,-30))\n    -20.0\n    >>> sum_num((19,15,18))\n    17.333333333333332\n    \"\"\"\n", "canonical_solution": "    \n    total = 0\n    for x in numbers:\n        total += x\n    return total/len(numbers) ", "entry_point": "sum_num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((8, 2, 3, 0, 7))==4.0\n    assert candidate((-10,-20,-30))==-20.0\n    assert candidate((19,15,18))==17.333333333333332\n\n", "language": "python", "description": "Write a function to add all the numbers in a list and divide it with the length of the list."}
{"task_id": "MBPP/887", "prompt": "\n\ndef is_odd(n) :\n    \"\"\"\n    Write a python function to check whether the given number is odd or not using bitwise operator.\n    >>> is_odd(5)\n    True\n    >>> is_odd(6)\n    False\n    >>> is_odd(7)\n    True\n    \"\"\"\n", "canonical_solution": "     \n    if (n^1 == n-1) :\n        return True; \n    else :\n        return False; ", "entry_point": "is_odd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == True\n    assert candidate(6) == False\n    assert candidate(7) == True\n\n", "language": "python", "description": "Write a python function to check whether the given number is odd or not using bitwise operator."}
{"task_id": "MBPP/888", "prompt": "\n\ndef substract_elements(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to substract the elements of the given nested tuples.\n  >>> substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n  ((-5, -4), (1, -4), (1, 8), (-6, 7))\n  >>> substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4)))\n  ((-6, -4), (0, -4), (1, 8), (-6, 7))\n  >>> substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5)))\n  ((7, -4), (1, -4), (6, 8), (-2, 7))\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "entry_point": "substract_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\n    assert candidate(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\n    assert candidate(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))\n\n", "language": "python", "description": "Write a function to substract the elements of the given nested tuples."}
{"task_id": "MBPP/889", "prompt": "\n\ndef reverse_list_lists(lists):\n    \"\"\"\n    Write a function to reverse each list in a given list of lists.\n    >>> reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\n    [[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n    >>> reverse_list_lists([[1,2],[2,3],[3,4]])\n    [[2,1],[3,2],[4,3]]\n    >>> reverse_list_lists([[10,20],[30,40]])\n    [[20,10],[40,30]]\n    \"\"\"\n", "canonical_solution": "    \n    for l in lists:\n        l.sort(reverse = True)\n    return lists ", "entry_point": "reverse_list_lists", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n    assert candidate([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\n    assert candidate([[10,20],[30,40]])==[[20,10],[40,30]]\n\n", "language": "python", "description": "Write a function to reverse each list in a given list of lists."}
{"task_id": "MBPP/890", "prompt": "\n\ndef find_Extra(arr1,arr2,n) :\n    \"\"\"\n    Write a python function to find the index of an extra element present in one sorted array.\n    >>> find_Extra([1,2,3,4],[1,2,3],3)\n    3\n    >>> find_Extra([2,4,6,8,10],[2,4,6,8],4)\n    4\n    >>> find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5)\n    5\n    \"\"\"\n", "canonical_solution": "     \n    for i in range(0, n) : \n        if (arr1[i] != arr2[i]) : \n            return i \n    return n ", "entry_point": "find_Extra", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4],[1,2,3],3) == 3\n    assert candidate([2,4,6,8,10],[2,4,6,8],4) == 4\n    assert candidate([1,3,5,7,9,11],[1,3,5,7,9],5) == 5\n\n", "language": "python", "description": "Write a python function to find the index of an extra element present in one sorted array."}
{"task_id": "MBPP/891", "prompt": "\n\ndef same_Length(A,B):\n    \"\"\"\n    Write a python function to check whether the given two numbers have same number of digits or not.\n    >>> same_Length(12,1)\n    False\n    >>> same_Length(2,2)\n    True\n    >>> same_Length(10,20)\n    True\n    \"\"\"\n", "canonical_solution": "     \n    while (A > 0 and B > 0): \n        A = A / 10; \n        B = B / 10; \n    if (A == 0 and B == 0): \n        return True; \n    return False; ", "entry_point": "same_Length", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12,1) == False\n    assert candidate(2,2) == True\n    assert candidate(10,20) == True\n\n", "language": "python", "description": "Write a python function to check whether the given two numbers have same number of digits or not."}
{"task_id": "MBPP/892", "prompt": "\n\ndef remove_spaces(text):\n \"\"\"\n Write a function to remove multiple spaces in a string.\n >>> remove_spaces('python  program')\n ('python program')\n >>> remove_spaces('python   programming    language')\n ('python programming language')\n >>> remove_spaces('python                     program')\n ('python program')\n \"\"\"\n", "canonical_solution": " import re\n \n return (re.sub(' +',' ',text))", "entry_point": "remove_spaces", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('python  program')==('python program')\n    assert candidate('python   programming    language')==('python programming language')\n    assert candidate('python                     program')==('python program')\n\n", "language": "python", "description": "Write a function to remove multiple spaces in a string."}
{"task_id": "MBPP/893", "prompt": "\n\ndef Extract(lst):\n    \"\"\"\n    Write a python function to get the last element of each sublist.\n    >>> Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n    [3, 5, 9]\n    >>> Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']])\n    ['z', 'm', 'b', 'v']\n    >>> Extract([[1, 2, 3], [4, 5]])\n    [3, 5]\n    \"\"\"\n", "canonical_solution": "     \n    return [item[-1] for item in lst] ", "entry_point": "Extract", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\n    assert candidate([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\n    assert candidate([[1, 2, 3], [4, 5]]) == [3, 5]\n\n", "language": "python", "description": "Write a python function to get the last element of each sublist."}
{"task_id": "MBPP/894", "prompt": "\n\ndef float_to_tuple(test_str):\n  \"\"\"\n  Write a function to convert the given string of float type into tuple.\n  >>> float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\")\n  (1.2, 1.3, 2.3, 2.4, 6.5)\n  >>> float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\")\n  (2.3, 2.4, 5.6, 5.4, 8.9)\n  >>> float_to_tuple(\"0.3, 0.5, 7.8, 9.4\")\n  (0.3, 0.5, 7.8, 9.4)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(map(float, test_str.split(', ')))\n  return (res) ", "entry_point": "float_to_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\n    assert candidate(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\n    assert candidate(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)\n\n", "language": "python", "description": "Write a function to convert the given string of float type into tuple."}
{"task_id": "MBPP/895", "prompt": "\n\ndef max_sum_subseq(A):\n    \"\"\"\n    Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n    >>> max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6])\n    26\n    >>> max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7])\n    28\n    >>> max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21])\n    44\n    \"\"\"\n", "canonical_solution": "    \n    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]", "entry_point": "max_sum_subseq", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\n    assert candidate([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\n    assert candidate([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44\n\n", "language": "python", "description": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements."}
{"task_id": "MBPP/896", "prompt": "\n\ndef sort_list_last(tuples):\n  \"\"\"\n  Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n  >>> sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])\n  [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]\n  >>> sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])\n  [(1,2), (3,5), (4,7), (9,8), (7,9)]\n  >>> sort_list_last([(20,50), (10,20), (40,40)])\n  [(10,20),(40,40),(20,50)]\n  \"\"\"\n", "canonical_solution": "  def last(n):\n     return n[-1]\n  \n  return sorted(tuples, key=last)", "entry_point": "sort_list_last", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \n    assert candidate([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \n    assert candidate([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] \n\n", "language": "python", "description": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples."}
{"task_id": "MBPP/897", "prompt": "\n\ndef is_Word_Present(sentence,word):\n    \"\"\"\n    Write a python function to check whether the word is present in a given sentence or not.\n    >>> is_Word_Present(\"machine learning\",\"machine\")\n    True\n    >>> is_Word_Present(\"easy\",\"fun\")\n    False\n    >>> is_Word_Present(\"python language\",\"code\")\n    False\n    \"\"\"\n", "canonical_solution": "     \n    s = sentence.split(\" \") \n    for i in s:  \n        if (i == word): \n            return True\n    return False", "entry_point": "is_Word_Present", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"machine learning\",\"machine\") == True\n    assert candidate(\"easy\",\"fun\") == False\n    assert candidate(\"python language\",\"code\") == False\n\n", "language": "python", "description": "Write a python function to check whether the word is present in a given sentence or not."}
{"task_id": "MBPP/898", "prompt": "\n\ndef extract_elements(numbers, n):\n    \"\"\"\n    Write a function to extract specified number of elements from a given list, which follow each other continuously.\n    >>> extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)\n    [1, 4]\n    >>> extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)\n    [4]\n    >>> extract_elements([0,0,0,0,0],5)\n    [0]\n    \"\"\"\n", "canonical_solution": "    from itertools import groupby \n    \n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \n    return result", "entry_point": "extract_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\n    assert candidate([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\n    assert candidate([0,0,0,0,0],5)==[0]\n\n", "language": "python", "description": "Write a function to extract specified number of elements from a given list, which follow each other continuously."}
{"task_id": "MBPP/899", "prompt": "\n\ndef check(arr,n):\n    \"\"\"\n    Write a python function to check whether an array can be sorted or not by picking only the corner elements.\n    >>> check([3,2,1,2,3,4],6)\n    True\n    >>> check([2,1,4,5,1],5)\n    True\n    >>> check([1,2,2,1,2,3],6)\n    True\n    \"\"\"\n", "canonical_solution": "     \n    g = 0 \n    for i in range(1,n): \n        if (arr[i] - arr[i - 1] > 0 and g == 1): \n            return False\n        if (arr[i] - arr[i] < 0): \n            g = 1\n    return True", "entry_point": "check", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3,2,1,2,3,4],6) == True\n    assert candidate([2,1,4,5,1],5) == True\n    assert candidate([1,2,2,1,2,3],6) == True\n\n", "language": "python", "description": "Write a python function to check whether an array can be sorted or not by picking only the corner elements."}
{"task_id": "MBPP/900", "prompt": "\n\ndef match_num(string):\n    \"\"\"\n    Write a function where a string will start with a specific number.\n    >>> match_num('5-2345861')\n    True\n    >>> match_num('6-2345861')\n    False\n    >>> match_num('78910')\n    False\n    \"\"\"\n", "canonical_solution": "    import re\n    \n    text = re.compile(r\"^5\")\n    if text.match(string):\n        return True\n    else:\n        return False", "entry_point": "match_num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('5-2345861')==True\n    assert candidate('6-2345861')==False\n    assert candidate('78910')==False\n\n", "language": "python", "description": "Write a function where a string will start with a specific number."}
{"task_id": "MBPP/901", "prompt": "\n\ndef smallest_multiple(n):\n    \"\"\"\n    Write a function to find the smallest multiple of the first n numbers.\n    >>> smallest_multiple(13)\n    360360\n    >>> smallest_multiple(2)\n    2\n    >>> smallest_multiple(1)\n    1\n    \"\"\"\n", "canonical_solution": "    \n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i", "entry_point": "smallest_multiple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(13)==360360\n    assert candidate(2)==2\n    assert candidate(1)==1\n\n", "language": "python", "description": "Write a function to find the smallest multiple of the first n numbers."}
{"task_id": "MBPP/902", "prompt": "\n\ndef add_dict(d1,d2):\n   \"\"\"\n   Write a function to combine two dictionaries by adding values for common keys.\n   >>> add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})\n   ({'b': 400, 'd': 400, 'a': 400, 'c': 300})\n   >>> add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})\n   ({'b': 1300, 'd': 900, 'a': 1000, 'c': 900})\n   >>> add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})\n   ({'b': 1800, 'd': 1800, 'a': 1800})\n   \"\"\"\n", "canonical_solution": "   from collections import Counter\n   \n   add_dict = Counter(d1) + Counter(d2)\n   return add_dict", "entry_point": "add_dict", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \n    assert candidate({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \n    assert candidate({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})\n\n", "language": "python", "description": "Write a function to combine two dictionaries by adding values for common keys."}
{"task_id": "MBPP/903", "prompt": "\n\ndef count_Unset_Bits(n) :\n    \"\"\"\n    Write a python function to count the total unset bits from 1 to n.\n    >>> count_Unset_Bits(2)\n    1\n    >>> count_Unset_Bits(5)\n    4\n    >>> count_Unset_Bits(14)\n    17\n    \"\"\"\n", "canonical_solution": "      \n    cnt = 0;  \n    for i in range(1,n + 1) : \n        temp = i;  \n        while (temp) :  \n            if (temp % 2 == 0) : \n                cnt += 1;  \n            temp = temp // 2;  \n    return cnt;  ", "entry_point": "count_Unset_Bits", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(5) == 4\n    assert candidate(14) == 17\n\n", "language": "python", "description": "Write a python function to count the total unset bits from 1 to n."}
{"task_id": "MBPP/904", "prompt": "\n\ndef even_num(x):\n  \"\"\"\n  Write a function to return true if the given number is even else return false.\n  >>> even_num(13.5)\n  False\n  >>> even_num(0)\n  True\n  >>> even_num(-9)\n  False\n  \"\"\"\n", "canonical_solution": "  \n  if x%2==0:\n     return True\n  else:\n    return False", "entry_point": "even_num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(13.5)==False\n    assert candidate(0)==True\n    assert candidate(-9)==False\n\n", "language": "python", "description": "Write a function to return true if the given number is even else return false."}
{"task_id": "MBPP/905", "prompt": "\n\ndef sum_of_square(n):\n   \"\"\"\n   Write a python function to find the sum of squares of binomial co-efficients.\n   >>> sum_of_square(4)\n   70\n   >>> sum_of_square(5)\n   252\n   >>> sum_of_square(2)\n   6\n   \"\"\"\n", "canonical_solution": "   def factorial(start,end): \n       res = 1 \n       for i in range(start,end + 1): \n           res *= i      \n       return res \n    \n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ", "entry_point": "sum_of_square", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4) == 70\n    assert candidate(5) == 252\n    assert candidate(2) == 6\n\n", "language": "python", "description": "Write a python function to find the sum of squares of binomial co-efficients."}
{"task_id": "MBPP/906", "prompt": "\n\ndef extract_date(url):\n        \"\"\"\n        Write a function to extract year, month and date from a url by using regex.\n        >>> extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\")\n        [('2016', '09', '02')]\n        >>> extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\")\n        [('2020', '11', '03')]\n        >>> extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\")\n        [('2020', '12', '29')]\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)", "entry_point": "extract_date", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\n    assert candidate(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\n    assert candidate(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]\n\n", "language": "python", "description": "Write a function to extract year, month and date from a url by using regex."}
{"task_id": "MBPP/907", "prompt": "\n\ndef lucky_num(n):\n \"\"\"\n Write a function to print the first n lucky numbers.\n >>> lucky_num(10)\n [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]\n >>> lucky_num(5)\n [1, 3, 7, 9, 13]\n >>> lucky_num(8)\n [1, 3, 7, 9, 13, 15, 21, 25]\n \"\"\"\n", "canonical_solution": " \n List=range(-1,n*n+9,2)\n i=2\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\n return List[1:n+1]", "entry_point": "lucky_num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \n    assert candidate(5)==[1, 3, 7, 9, 13]\n    assert candidate(8)==[1, 3, 7, 9, 13, 15, 21, 25]\n\n", "language": "python", "description": "Write a function to print the first n lucky numbers."}
{"task_id": "MBPP/908", "prompt": "\n\ndef find_fixed_point(arr, n):\n\t\"\"\"\n\tWrite a function to find the fixed point in the given array.\n\t>>> find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9)\n\t3\n\t>>> find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8)\n\t-1\n\t>>> find_fixed_point([0, 2, 5, 8, 17],5)\n\t0\n\t\"\"\"\n", "canonical_solution": "\t \n\tfor i in range(n): \n\t\tif arr[i] is i: \n\t\t\treturn i \n\treturn -1", "entry_point": "find_fixed_point", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\n    assert candidate([0, 2, 5, 8, 17],5) == 0\n\n", "language": "python", "description": "Write a function to find the fixed point in the given array."}
{"task_id": "MBPP/909", "prompt": "\n\ndef previous_palindrome(num):\n    \"\"\"\n    Write a function to find the previous palindrome of a specified number.\n    >>> previous_palindrome(99)\n    88\n    >>> previous_palindrome(1221)\n    1111\n    >>> previous_palindrome(120)\n    111\n    \"\"\"\n", "canonical_solution": "    \n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x", "entry_point": "previous_palindrome", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(99)==88\n    assert candidate(1221)==1111\n    assert candidate(120)==111\n\n", "language": "python", "description": "Write a function to find the previous palindrome of a specified number."}
{"task_id": "MBPP/910", "prompt": "\n\ndef check_date(m, d, y):\n    \"\"\"\n    Write a function to validate a gregorian date.\n    >>> check_date(11,11,2002)\n    True\n    >>> check_date(13,11,2002)\n    False\n    >>> check_date('11','11','2002')\n    True\n    \"\"\"\n", "canonical_solution": "    import datetime\n    \n    try:\n        m, d, y = map(int, (m, d, y))\n        datetime.date(y, m, d)\n        return True\n    except ValueError:\n        return False", "entry_point": "check_date", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(11,11,2002)==True\n    assert candidate(13,11,2002)==False\n    assert candidate('11','11','2002')==True\n\n", "language": "python", "description": "Write a function to validate a gregorian date."}
{"task_id": "MBPP/911", "prompt": "\n\ndef maximum_product(nums):\n    \"\"\"\n    Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n    >>> maximum_product( [12, 74, 9, 50, 61, 41])\n    225700\n    >>> maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])\n    414375\n    >>> maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n    2520\n    \"\"\"\n", "canonical_solution": "    \n    import heapq\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])", "entry_point": "maximum_product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate( [12, 74, 9, 50, 61, 41])==225700\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520\n\n", "language": "python", "description": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm."}
{"task_id": "MBPP/912", "prompt": "\n\ndef lobb_num(n, m):\n\t\"\"\"\n\tWrite a function to find ln, m lobb number.\n\t>>> lobb_num(5, 3)\n\t35\n\t>>> lobb_num(3, 2)\n\t5\n\t>>> lobb_num(4, 2)\n\t20\n\t\"\"\"\n", "canonical_solution": "\tdef binomial_coeff(n, k): \n\t\tC = [[0 for j in range(k + 1)] \n\t\t\t\tfor i in range(n + 1)] \n\t\tfor i in range(0, n + 1): \n\t\t\tfor j in range(0, min(i, k) + 1): \n\t\t\t\tif (j == 0 or j == i): \n\t\t\t\t\tC[i][j] = 1\n\t\t\t\telse: \n\t\t\t\t\tC[i][j] = (C[i - 1][j - 1] \n\t\t\t\t\t\t\t\t+ C[i - 1][j]) \n\t\treturn C[n][k] \n\t \n\treturn (((2 * m + 1) *\n\t\tbinomial_coeff(2 * n, m + n)) \n\t\t\t\t\t/ (m + n + 1))", "entry_point": "lobb_num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 35\n    assert candidate(3, 2) == 5\n    assert candidate(4, 2) == 20\n\n", "language": "python", "description": "Write a function to find ln, m lobb number."}
{"task_id": "MBPP/913", "prompt": "\n\ndef end_num(string):\n    \"\"\"\n    Write a function to check for a number at the end of a string.\n    >>> end_num('abcdef')\n    False\n    >>> end_num('abcdef7')\n    True\n    >>> end_num('abc')\n    False\n    \"\"\"\n", "canonical_solution": "    import re\n    \n    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False", "entry_point": "end_num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('abcdef')==False\n    assert candidate('abcdef7')==True\n    assert candidate('abc')==False\n\n", "language": "python", "description": "Write a function to check for a number at the end of a string."}
{"task_id": "MBPP/914", "prompt": "\n\ndef is_Two_Alter(s):\n    \"\"\"\n    Write a python function to check whether the given string is made up of two alternating characters or not.\n    >>> is_Two_Alter(\"abab\")\n    True\n    >>> is_Two_Alter(\"aaaa\")\n    False\n    >>> is_Two_Alter(\"xyz\")\n    False\n    \"\"\"\n", "canonical_solution": "      \n    for i in range (len( s) - 2) : \n        if (s[i] != s[i + 2]) : \n            return False\n    if (s[0] == s[1]): \n        return False\n    return True", "entry_point": "is_Two_Alter", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"abab\") == True\n    assert candidate(\"aaaa\") == False\n    assert candidate(\"xyz\") == False\n\n", "language": "python", "description": "Write a python function to check whether the given string is made up of two alternating characters or not."}
{"task_id": "MBPP/915", "prompt": "\n\ndef rearrange_numbs(array_nums):\n  \"\"\"\n  Write a function to rearrange positive and negative numbers in a given array using lambda function.\n  >>> rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])\n  [2, 5, 7, 8, 9, -10, -3, -1]\n  >>> rearrange_numbs([10,15,14,13,-18,12,-20])\n  [10, 12, 13, 14, 15, -20, -18]\n  >>> rearrange_numbs([-20,20,-10,10,-30,30])\n  [10, 20, 30, -30, -20, -10]\n  \"\"\"\n", "canonical_solution": "  \n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\n  return result ", "entry_point": "rearrange_numbs", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\n    assert candidate([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\n    assert candidate([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]\n\n", "language": "python", "description": "Write a function to rearrange positive and negative numbers in a given array using lambda function."}
{"task_id": "MBPP/916", "prompt": "\n\ndef find_triplet_array(A, arr_size, sum):\n\t\"\"\"\n\tWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\t>>> find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22)\n\t(4, 10, 8)\n\t>>> find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24)\n\t(12, 3, 9)\n\t>>> find_triplet_array([1, 2, 3, 4, 5], 5, 9)\n\t(1, 3, 5)\n\t\"\"\"\n", "canonical_solution": "\t \n\tfor i in range( 0, arr_size-2): \n\t\tfor j in range(i + 1, arr_size-1): \n\t\t\tfor k in range(j + 1, arr_size): \n\t\t\t\tif A[i] + A[j] + A[k] == sum: \n\t\t\t\t\treturn  A[i],A[j],A[k] \n\t\t\t\t\treturn True\n\treturn False", "entry_point": "find_triplet_array", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\n    assert candidate([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\n    assert candidate([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)\n\n", "language": "python", "description": "Write a function to find if there is a triplet in the array whose sum is equal to a given value."}
{"task_id": "MBPP/917", "prompt": "\n\ndef text_uppercase_lowercase(text):\n        \"\"\"\n        Write a function to find the sequences of one upper case letter followed by lower case letters.\n        >>> text_uppercase_lowercase(\"AaBbGg\")\n        ('Found a match!')\n        >>> text_uppercase_lowercase(\"aA\")\n        ('Not matched!')\n        >>> text_uppercase_lowercase(\"PYTHON\")\n        ('Not matched!')\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        patterns = '[A-Z]+[a-z]+$'\n        if re.search(patterns, text):\n                return 'Found a match!'\n        else:\n                return ('Not matched!')", "entry_point": "text_uppercase_lowercase", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"AaBbGg\")==('Found a match!')\n    assert candidate(\"aA\")==('Not matched!')\n    assert candidate(\"PYTHON\")==('Not matched!')\n\n", "language": "python", "description": "Write a function to find the sequences of one upper case letter followed by lower case letters."}
{"task_id": "MBPP/918", "prompt": "\n\ndef coin_change(S, m, n):\n    \"\"\"\n    Write a function to count coin change.\n    >>> coin_change([1, 2, 3],3,4)\n    4\n    >>> coin_change([4,5,6,7,8,9],6,9)\n    2\n    >>> coin_change([4,5,6,7,8,9],6,4)\n    1\n    \"\"\"\n", "canonical_solution": "     \n    table = [[0 for x in range(m)] for x in range(n+1)] \n    for i in range(m): \n        table[0][i] = 1\n    for i in range(1, n+1): \n        for j in range(m): \n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\n            y = table[i][j-1] if j >= 1 else 0 \n            table[i][j] = x + y   \n    return table[n][m-1] ", "entry_point": "coin_change", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3],3,4)==4\n    assert candidate([4,5,6,7,8,9],6,9)==2\n    assert candidate([4,5,6,7,8,9],6,4)==1\n\n", "language": "python", "description": "Write a function to count coin change."}
{"task_id": "MBPP/919", "prompt": "\n\ndef multiply_list(items):\n    \"\"\"\n    Write a python function to multiply all items in the list.\n    >>> multiply_list([1,-2,3])\n    -6\n    >>> multiply_list([1,2,3,4])\n    24\n    >>> multiply_list([3,1,2,3])\n    18\n    \"\"\"\n", "canonical_solution": "    \n    tot = 1\n    for x in items:\n        tot *= x\n    return tot", "entry_point": "multiply_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,-2,3]) == -6\n    assert candidate([1,2,3,4]) == 24\n    assert candidate([3,1,2,3]) == 18\n\n", "language": "python", "description": "Write a python function to multiply all items in the list."}
{"task_id": "MBPP/920", "prompt": "\n\ndef remove_tuple(test_list):\n  \"\"\"\n  Write a function to remove all tuples with all none values in the given tuple list.\n  >>> remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] )\n  '[(None, 2), (3, 4), (12, 3)]'\n  >>> remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] )\n  '[(3, 6), (17, 3), (None, 1)]'\n  >>> remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] )\n  '[(1, 2), (2, None), (3, None), (24, 3)]'\n  \"\"\"\n", "canonical_solution": "  \n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\n  return (str(res)) ", "entry_point": "remove_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\n    assert candidate([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\n    assert candidate([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'\n\n", "language": "python", "description": "Write a function to remove all tuples with all none values in the given tuple list."}
{"task_id": "MBPP/921", "prompt": "\n\ndef chunk_tuples(test_tup, N):\n  \"\"\"\n  Write a function to perform chunking of tuples each of size n.\n  >>> chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3)\n  [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\n  >>> chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2)\n  [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\n  >>> chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4)\n  [(11, 14, 16, 17), (19, 21, 22, 25)]\n  \"\"\"\n", "canonical_solution": "  \n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\n  return (res) ", "entry_point": "chunk_tuples", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\n    assert candidate((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\n    assert candidate((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]\n\n", "language": "python", "description": "Write a function to perform chunking of tuples each of size n."}
{"task_id": "MBPP/922", "prompt": "\n\ndef max_product(arr):\n    \"\"\"\n    Write a function to find a pair with the highest product from a given array of integers.\n    >>> max_product([1, 2, 3, 4, 7, 0, 8, 4])\n    (7, 8)\n    >>> max_product([0, -1, -2, -4, 5, 0, -6])\n    (-4, -6)\n    >>> max_product([1, 3, 5, 6, 8, 9])\n    (8,9)\n    \"\"\"\n", "canonical_solution": "     \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return None     \n    x = arr[0]; y = arr[1]    \n    for i in range(0, arr_len): \n        for j in range(i + 1, arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y   ", "entry_point": "max_product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\n    assert candidate([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\n    assert candidate([1, 3, 5, 6, 8, 9])==(8,9)\n\n", "language": "python", "description": "Write a function to find a pair with the highest product from a given array of integers."}
{"task_id": "MBPP/923", "prompt": "\n\ndef super_seq(X, Y, m, n):\n\t\"\"\"\n\tWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\t>>> super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n\t9\n\t>>> super_seq(\"feek\", \"eke\", 4, 3)\n\t5\n\t>>> super_seq(\"PARRT\", \"RTA\", 5, 3)\n\t6\n\t\"\"\"\n", "canonical_solution": "\t\n\tif (not m):\n\t\treturn n\n\tif (not n):\n\t\treturn m\n\tif (X[m - 1] == Y[n - 1]):\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))", "entry_point": "super_seq", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\n    assert candidate(\"feek\", \"eke\", 4, 3) == 5\n    assert candidate(\"PARRT\", \"RTA\", 5, 3) == 6\n\n", "language": "python", "description": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences."}
{"task_id": "MBPP/924", "prompt": "\n\ndef max_of_two( x, y ):\n    \"\"\"\n    Write a function to find maximum of two numbers.\n    >>> max_of_two(10,20)\n    20\n    >>> max_of_two(19,15)\n    19\n    >>> max_of_two(-10,-20)\n    -10\n    \"\"\"\n", "canonical_solution": "    \n    if x > y:\n        return x\n    return y", "entry_point": "max_of_two", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,20)==20\n    assert candidate(19,15)==19\n    assert candidate(-10,-20)==-10\n\n", "language": "python", "description": "Write a function to find maximum of two numbers."}
{"task_id": "MBPP/925", "prompt": "\n\ndef mutiple_tuple(nums):\n    \"\"\"\n    Write a python function to calculate the product of all the numbers of a given tuple.\n    >>> mutiple_tuple((4, 3, 2, 2, -1, 18))\n    -864\n    >>> mutiple_tuple((1,2,3))\n    6\n    >>> mutiple_tuple((-2,-4,-6))\n    -48\n    \"\"\"\n", "canonical_solution": "    \n    temp = list(nums)\n    product = 1 \n    for x in temp:\n        product *= x\n    return product", "entry_point": "mutiple_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((4, 3, 2, 2, -1, 18)) == -864\n    assert candidate((1,2,3)) == 6\n    assert candidate((-2,-4,-6)) == -48\n\n", "language": "python", "description": "Write a python function to calculate the product of all the numbers of a given tuple."}
{"task_id": "MBPP/926", "prompt": "\n\ndef rencontres_number(n, m):\n\t\"\"\"\n\tWrite a function to find n-th rencontres number.\n\t>>> rencontres_number(7, 2)\n\t924\n\t>>> rencontres_number(3, 0)\n\t2\n\t>>> rencontres_number(3, 1)\n\t3\n\t\"\"\"\n", "canonical_solution": "\tdef binomial_coeffi(n, k): \n\t\tif (k == 0 or k == n): \n\t\t\treturn 1\n\t\treturn (binomial_coeffi(n - 1, k - 1) \n\t\t\t+ binomial_coeffi(n - 1, k)) \n\t \n\tif (n == 0 and m == 0): \n\t\treturn 1\n\tif (n == 1 and m == 0): \n\t\treturn 0\n\tif (m == 0): \n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))", "entry_point": "rencontres_number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(7, 2) == 924\n    assert candidate(3, 0) == 2\n    assert candidate(3, 1) == 3\n\n", "language": "python", "description": "Write a function to find n-th rencontres number."}
{"task_id": "MBPP/927", "prompt": "\n\ndef max_height(node):\n\t\"\"\"\n\tWrite a function to calculate the height of the given binary tree.\n\t>>> max_height(root)\n\t3\n\t>>> max_height(root1)\n\t5\n\t>>> max_height(root2)\n\t4\n\t\"\"\"\n", "canonical_solution": "\tclass Node: \n\t\tdef __init__(self, data): \n\t\t\tself.data = data \n\t\t\tself.left = None\n\t\t\tself.right = None\n\t \n\tif node is None: \n\t\treturn 0 ; \n\telse : \n\t\tleft_height = max_height(node.left) \n\t\tright_height = max_height(node.right) \n\t\tif (left_height > right_height): \n\t\t\treturn left_height+1\n\t\telse: \n\t\t\treturn right_height+1", "entry_point": "max_height", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(root) == 3\n    assert candidate(root1) == 5 \n    assert candidate(root2) == 4\n\n", "language": "python", "description": "Write a function to calculate the height of the given binary tree."}
{"task_id": "MBPP/928", "prompt": "\n\ndef change_date_format(dt):\n        \"\"\"\n        Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n        >>> change_date_format('2026-01-02')\n        '02-01-2026'\n        >>> change_date_format('2021-01-04')\n        '04-01-2021'\n        >>> change_date_format('2030-06-06')\n        '06-06-2030'\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n        return change_date_format(dt)", "entry_point": "change_date_format", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('2026-01-02')=='02-01-2026'\n    assert candidate('2021-01-04')=='04-01-2021'\n    assert candidate('2030-06-06')=='06-06-2030'\n\n", "language": "python", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format."}
{"task_id": "MBPP/929", "prompt": "\n\ndef count_tuplex(tuplex,value):\n  \"\"\"\n  Write a function to count repeated items of a tuple.\n  >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)\n  3\n  >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)\n  2\n  >>> count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)\n  4\n  \"\"\"\n", "canonical_solution": "    \n  count = tuplex.count(value)\n  return count", "entry_point": "count_tuplex", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\n    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\n    assert candidate((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4\n\n", "language": "python", "description": "Write a function to count repeated items of a tuple."}
{"task_id": "MBPP/930", "prompt": "\n\ndef text_match(text):\n        \"\"\"\n        Write a function that matches a string that has an a followed by zero or more b's by using regex.\n        >>> text_match(\"msb\")\n        'Not matched!'\n        >>> text_match(\"a0c\")\n        'Found a match!'\n        >>> text_match(\"abbc\")\n        'Found a match!'\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return ('Found a match!')\n        else:\n                return ('Not matched!')", "entry_point": "text_match", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"msb\") == 'Not matched!'\n    assert candidate(\"a0c\") == 'Found a match!'\n    assert candidate(\"abbc\") == 'Found a match!'\n\n", "language": "python", "description": "Write a function that matches a string that has an a followed by zero or more b's by using regex."}
{"task_id": "MBPP/931", "prompt": "\n\ndef sum_series(number):\n \"\"\"\n Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n >>> sum_series(7)\n 784\n >>> sum_series(5)\n 225\n >>> sum_series(15)\n 14400\n \"\"\"\n", "canonical_solution": " import math \n \n total = 0\n total = math.pow((number * (number + 1)) /2, 2)\n return total", "entry_point": "sum_series", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(7)==784\n    assert candidate(5)==225\n    assert candidate(15)==14400\n\n", "language": "python", "description": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3."}
{"task_id": "MBPP/932", "prompt": "\n\ndef remove_duplic_list(l):\n    \"\"\"\n    Write a function to remove duplicate words from a given list of strings.\n    >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])\n    ['Python', 'Exercises', 'Practice', 'Solution']\n    >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])\n    ['Python', 'Exercises', 'Practice', 'Solution', 'Java']\n    >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])\n    ['Python', 'Exercises', 'Practice', 'Solution','C++','C']\n    \"\"\"\n", "canonical_solution": "    \n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp", "entry_point": "remove_duplic_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']\n\n", "language": "python", "description": "Write a function to remove duplicate words from a given list of strings."}
{"task_id": "MBPP/933", "prompt": "\n\ndef camel_to_snake(text):\n  \"\"\"\n  Write a function to convert camel case string to snake case string by using regex.\n  >>> camel_to_snake('GoogleAssistant')\n  'google_assistant'\n  >>> camel_to_snake('ChromeCast')\n  'chrome_cast'\n  >>> camel_to_snake('QuadCore')\n  'quad_core'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "entry_point": "camel_to_snake", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('GoogleAssistant') == 'google_assistant'\n    assert candidate('ChromeCast') == 'chrome_cast'\n    assert candidate('QuadCore') == 'quad_core'\n\n", "language": "python", "description": "Write a function to convert camel case string to snake case string by using regex."}
{"task_id": "MBPP/934", "prompt": "\n\ndef dealnnoy_num(n, m):\n\t\"\"\"\n\tWrite a function to find the nth delannoy number.\n\t>>> dealnnoy_num(3, 4)\n\t129\n\t>>> dealnnoy_num(3, 3)\n\t63\n\t>>> dealnnoy_num(4, 5)\n\t681\n\t\"\"\"\n", "canonical_solution": "\t \n\tif (m == 0 or n == 0) : \n\t\treturn 1\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)", "entry_point": "dealnnoy_num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 4) == 129\n    assert candidate(3, 3) == 63\n    assert candidate(4, 5) == 681\n\n", "language": "python", "description": "Write a function to find the nth delannoy number."}
{"task_id": "MBPP/935", "prompt": "\n\ndef series_sum(number):\n \"\"\"\n Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n >>> series_sum(6)\n 91\n >>> series_sum(7)\n 140\n >>> series_sum(12)\n 650\n \"\"\"\n", "canonical_solution": " \n total = 0\n total = (number * (number + 1) * (2 * number + 1)) / 6\n return total", "entry_point": "series_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6)==91\n    assert candidate(7)==140\n    assert candidate(12)==650\n\n", "language": "python", "description": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2."}
{"task_id": "MBPP/936", "prompt": "\n\ndef re_arrange_tuples(test_list, ord_list):\n  \"\"\"\n  Write a function to re-arrange the given tuples based on the given ordered list.\n  >>> re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3])\n  [(1, 9), (4, 3), (2, 10), (3, 2)]\n  >>> re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3])\n  [(3, 11), (4, 3), (2, 10), (3, 11)]\n  >>> re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6])\n  [(2, 4), (5, 7), (3, 8), (6, 3)]\n  \"\"\"\n", "canonical_solution": "  \n  temp = dict(test_list)\n  res = [(key, temp[key]) for key in ord_list]\n  return (res) ", "entry_point": "re_arrange_tuples", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\n    assert candidate([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\n    assert candidate([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]\n\n", "language": "python", "description": "Write a function to re-arrange the given tuples based on the given ordered list."}
{"task_id": "MBPP/937", "prompt": "\n\ndef max_char(str1):\n    \"\"\"\n    Write a function to count the most common character in a given string.\n    >>> max_char(\"hello world\")\n    ('l')\n    >>> max_char(\"hello \")\n    ('l')\n    >>> max_char(\"python pr\")\n    ('p')\n    \"\"\"\n", "canonical_solution": "    from collections import Counter \n    \n    temp = Counter(str1) \n    max_char = max(temp, key = temp.get)\n    return max_char", "entry_point": "max_char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"hello world\")==('l')\n    assert candidate(\"hello \")==('l')\n    assert candidate(\"python pr\")==('p')\n\n", "language": "python", "description": "Write a function to count the most common character in a given string."}
{"task_id": "MBPP/938", "prompt": "\n\ndef find_closet(A, B, C, p, q, r):\n\t\"\"\"\n\tWrite a function to find three closest elements from three sorted arrays.\n\t>>> find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2)\n\t(10, 15, 10)\n\t>>> find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5)\n\t(24, 22, 23)\n\t>>> find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2)\n\t(11, 16, 11)\n\t\"\"\"\n", "canonical_solution": "\timport sys \n\t\n\t \n\tdiff = sys.maxsize \n\tres_i = 0\n\tres_j = 0\n\tres_k = 0\n\ti = 0\n\tj = 0\n\tk = 0\n\twhile(i < p and j < q and k < r): \n\t\tminimum = min(A[i], min(B[j], C[k])) \n\t\tmaximum = max(A[i], max(B[j], C[k])); \n\t\tif maximum-minimum < diff: \n\t\t\tres_i = i \n\t\t\tres_j = j \n\t\t\tres_k = k \n\t\t\tdiff = maximum - minimum; \n\t\tif diff == 0: \n\t\t\tbreak\n\t\tif A[i] == minimum: \n\t\t\ti = i+1\n\t\telif B[j] == minimum: \n\t\t\tj = j+1\n\t\telse: \n\t\t\tk = k+1\n\treturn A[res_i],B[res_j],C[res_k]", "entry_point": "find_closet", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\n    assert candidate([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\n    assert candidate([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)\n\n", "language": "python", "description": "Write a function to find three closest elements from three sorted arrays."}
{"task_id": "MBPP/939", "prompt": "\n\ndef sorted_models(models):\n \"\"\"\n Write a function to sort a list of dictionaries using lambda function.\n >>> sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])\n [{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\n >>> sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\n ([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\n >>> sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])\n ([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])\n \"\"\"\n", "canonical_solution": " \n sorted_models = sorted(models, key = lambda x: x['color'])\n return sorted_models", "entry_point": "sorted_models", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\n    assert candidate([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\n    assert candidate([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])\n\n", "language": "python", "description": "Write a function to sort a list of dictionaries using lambda function."}
{"task_id": "MBPP/940", "prompt": "\n\ndef heap_sort(arr):\n    \"\"\"\n    Write a function to sort the given array by using heap sort.\n    >>> heap_sort([12, 2, 4, 5, 2, 3])\n    [2, 2, 3, 4, 5, 12]\n    >>> heap_sort([32, 14, 5, 6, 7, 19])\n    [5, 6, 7, 14, 19, 32]\n    >>> heap_sort([21, 15, 29, 78, 65])\n    [15, 21, 29, 65, 78]\n    \"\"\"\n", "canonical_solution": "    \n    heapify(arr)  \n    end = len(arr) - 1\n    while end > 0:\n        arr[end], arr[0] = arr[0], arr[end]\n        shift_down(arr, 0, end - 1)\n        end -= 1\n    return arr\n\ndef heapify(arr):\n    start = len(arr) // 2\n    while start >= 0:\n        shift_down(arr, start, len(arr) - 1)\n        start -= 1\ndef shift_down(arr, start, end):\n    root = start\n    while root * 2 + 1 <= end:\n        child = root * 2 + 1\n        if child + 1 <= end and arr[child] < arr[child + 1]:\n            child += 1\n        if child <= end and arr[root] < arr[child]:\n            arr[root], arr[child] = arr[child], arr[root]\n            root = child\n        else:\n            return\n", "entry_point": "heap_sort", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\n    assert candidate([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\n    assert candidate([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]\n\n", "language": "python", "description": "Write a function to sort the given array by using heap sort."}
{"task_id": "MBPP/941", "prompt": "\n\ndef count_elim(num):\n  \"\"\"\n  Write a function to count the elements in a list until an element is a tuple.\n  >>> count_elim([10,20,30,(10,20),40])\n  3\n  >>> count_elim([10,(20,30),(10,20),40])\n  1\n  >>> count_elim([(10,(20,30,(10,20),40))])\n  0\n  \"\"\"\n", "canonical_solution": "  \n  count_elim = 0\n  for n in num:\n    if isinstance(n, tuple):\n        break\n    count_elim += 1\n  return count_elim", "entry_point": "count_elim", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10,20,30,(10,20),40])==3\n    assert candidate([10,(20,30),(10,20),40])==1\n    assert candidate([(10,(20,30,(10,20),40))])==0\n\n", "language": "python", "description": "Write a function to count the elements in a list until an element is a tuple."}
{"task_id": "MBPP/942", "prompt": "\n\ndef check_element(test_tup, check_list):\n  \"\"\"\n  Write a function to check if any list element is present in the given list.\n  >>> check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11])\n  True\n  >>> check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9])\n  True\n  >>> check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6])\n  False\n  \"\"\"\n", "canonical_solution": "  \n  res = False\n  for ele in check_list:\n    if ele in test_tup:\n      res = True\n      break\n  return (res) ", "entry_point": "check_element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\n    assert candidate((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\n    assert candidate((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False\n\n", "language": "python", "description": "Write a function to check if any list element is present in the given list."}
{"task_id": "MBPP/943", "prompt": "\n\ndef combine_lists(num1,num2):\n  \"\"\"\n  Write a function to combine two given sorted lists using heapq module.\n  >>> combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])\n  [1,2,3,5,5,6,7,8,9,11]\n  >>> combine_lists([1,3,7],[2,4,6])\n  [1,2,3,4,6,7]\n  \"\"\"\n", "canonical_solution": "  from heapq import merge\n  \n  combine_lists=list(merge(num1, num2))\n  return combine_lists", "entry_point": "combine_lists", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\n    assert candidate([1,3,7],[2,4,6])==[1,2,3,4,6,7]\n\n", "language": "python", "description": "Write a function to combine two given sorted lists using heapq module."}
{"task_id": "MBPP/944", "prompt": "\n\ndef num_position(text):\n \"\"\"\n Write a function to separate and print the numbers and their position of a given string.\n >>> num_position(\"there are 70 flats in this apartment\")\n 10\n >>> num_position(\"every adult have 32 teeth\")\n 17\n >>> num_position(\"isha has 79 chocolates in her bag\")\n 9\n \"\"\"\n", "canonical_solution": " import re\n \n for m in re.finditer(\"\\d+\", text):\n    return m.start()", "entry_point": "num_position", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"there are 70 flats in this apartment\")==10\n    assert candidate(\"every adult have 32 teeth\")==17\n    assert candidate(\"isha has 79 chocolates in her bag\")==9\n\n", "language": "python", "description": "Write a function to separate and print the numbers and their position of a given string."}
{"task_id": "MBPP/945", "prompt": "\n\ndef tuple_to_set(t):\n  \"\"\"\n  Write a function to convert the given tuples into set.\n  >>> tuple_to_set(('x', 'y', 'z') )\n  {'y', 'x', 'z'}\n  >>> tuple_to_set(('a', 'b', 'c') )\n  {'c', 'a', 'b'}\n  >>> tuple_to_set(('z', 'd', 'e') )\n  {'d', 'e', 'z'}\n  \"\"\"\n", "canonical_solution": "  \n  s = set(t)\n  return (s) ", "entry_point": "tuple_to_set", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(('x', 'y', 'z') ) == {'y', 'x', 'z'}\n    assert candidate(('a', 'b', 'c') ) == {'c', 'a', 'b'}\n    assert candidate(('z', 'd', 'e') ) == {'d', 'e', 'z'}\n\n", "language": "python", "description": "Write a function to convert the given tuples into set."}
{"task_id": "MBPP/946", "prompt": "\n\ndef most_common_elem(s,a):\n  \"\"\"\n  Write a function to find the most common elements and their counts of a specified text.\n  >>> most_common_elem('lkseropewdssafsdfafkpwe',3)\n  [('s', 4), ('e', 3), ('f', 3)]\n  >>> most_common_elem('lkseropewdssafsdfafkpwe',2)\n  [('s', 4), ('e', 3)]\n  >>> most_common_elem('lkseropewdssafsdfafkpwe',7)\n  [('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]\n  \"\"\"\n", "canonical_solution": "  from collections import Counter \n  \n  most_common_elem=Counter(s).most_common(a)\n  return most_common_elem", "entry_point": "most_common_elem", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \n    assert candidate('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\n    assert candidate('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]\n\n", "language": "python", "description": "Write a function to find the most common elements and their counts of a specified text."}
{"task_id": "MBPP/947", "prompt": "\n\ndef len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the shortest word.\n    >>> len_log([\"win\",\"lose\",\"great\"])\n    3\n    >>> len_log([\"a\",\"ab\",\"abc\"])\n    1\n    >>> len_log([\"12\",\"12\",\"1234\"])\n    2\n    \"\"\"\n", "canonical_solution": "    \n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min", "entry_point": "len_log", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"win\",\"lose\",\"great\"]) == 3\n    assert candidate([\"a\",\"ab\",\"abc\"]) == 1\n    assert candidate([\"12\",\"12\",\"1234\"]) == 2\n\n", "language": "python", "description": "Write a python function to find the length of the shortest word."}
{"task_id": "MBPP/948", "prompt": "\n\ndef get_item(tup1,index):\n  \"\"\"\n  Write a function to get an item of a tuple.\n  >>> get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)\n  ('e')\n  >>> get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)\n  ('u')\n  >>> get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)\n  ('r')\n  \"\"\"\n", "canonical_solution": "  \n  item = tup1[index]\n  return item", "entry_point": "get_item", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')\n\n", "language": "python", "description": "Write a function to get an item of a tuple."}
{"task_id": "MBPP/949", "prompt": "\n\ndef sort_list(test_list):\n  \"\"\"\n  Write a function to sort the given tuple list basis the total digits in tuple.\n  >>> sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] )\n  '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\n  >>> sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] )\n  '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\n  >>> sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] )\n  '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'\n  \"\"\"\n", "canonical_solution": "  def count_digs(tup):\n    return sum([len(str(ele)) for ele in tup ]) \n  \n  test_list.sort(key = count_digs)\n  return (str(test_list))", "entry_point": "sort_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\n    assert candidate([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\n    assert candidate([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'\n\n", "language": "python", "description": "Write a function to sort the given tuple list basis the total digits in tuple."}
{"task_id": "MBPP/950", "prompt": "\n\ndef chinese_zodiac(year):\n \"\"\"\n Write a function to display sign of the chinese zodiac for given year.\n >>> chinese_zodiac(1997)\n ('Ox')\n >>> chinese_zodiac(1998)\n ('Tiger')\n >>> chinese_zodiac(1994)\n ('Dog')\n \"\"\"\n", "canonical_solution": " \n if (year - 2000) % 12 == 0:\n     sign = 'Dragon'\n elif (year - 2000) % 12 == 1:\n     sign = 'Snake'\n elif (year - 2000) % 12 == 2:\n     sign = 'Horse'\n elif (year - 2000) % 12 == 3:\n     sign = 'sheep'\n elif (year - 2000) % 12 == 4:\n     sign = 'Monkey'\n elif (year - 2000) % 12 == 5:\n     sign = 'Rooster'\n elif (year - 2000) % 12 == 6:\n     sign = 'Dog'\n elif (year - 2000) % 12 == 7:\n     sign = 'Pig'\n elif (year - 2000) % 12 == 8:\n     sign = 'Rat'\n elif (year - 2000) % 12 == 9:\n     sign = 'Ox'\n elif (year - 2000) % 12 == 10:\n     sign = 'Tiger'\n else:\n     sign = 'Hare'\n return sign", "entry_point": "chinese_zodiac", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1997)==('Ox')\n    assert candidate(1998)==('Tiger')\n    assert candidate(1994)==('Dog')\n\n", "language": "python", "description": "Write a function to display sign of the chinese zodiac for given year."}
{"task_id": "MBPP/951", "prompt": "\n\ndef max_similar_indices(test_list1, test_list2):\n  \"\"\"\n  Write a function to find the maximum of similar indices in two lists of tuples.\n  >>> max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)])\n  [(5, 4), (8, 10), (8, 14)]\n  >>> max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)])\n  [(6, 5), (9, 11), (9, 15)]\n  >>> max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)])\n  [(7, 6), (10, 12), (10, 16)]\n  \"\"\"\n", "canonical_solution": "  \n  res = [(max(x[0], y[0]), max(x[1], y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return (res) ", "entry_point": "max_similar_indices", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\n    assert candidate([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\n    assert candidate([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]\n\n", "language": "python", "description": "Write a function to find the maximum of similar indices in two lists of tuples."}
{"task_id": "MBPP/952", "prompt": "\n\ndef nCr_mod_p(n, r, p):\n\t\"\"\"\n\tWrite a function to compute the value of ncr mod p.\n\t>>> nCr_mod_p(10, 2, 13)\n\t6\n\t>>> nCr_mod_p(11, 3, 14)\n\t11\n\t>>> nCr_mod_p(18, 14, 19)\n\t1\n\t\"\"\"\n", "canonical_solution": "\t \n\tif (r > n- r): \n\t\tr = n - r \n\tC = [0 for i in range(r + 1)] \n\tC[0] = 1 \n\tfor i in range(1, n + 1): \n\t\tfor j in range(min(i, r), 0, -1): \n\t\t\tC[j] = (C[j] + C[j-1]) % p \n\treturn C[r] ", "entry_point": "nCr_mod_p", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10, 2, 13) == 6\n    assert candidate(11, 3, 14) == 11\n    assert candidate(18, 14, 19) == 1\n\n", "language": "python", "description": "Write a function to compute the value of ncr mod p."}
{"task_id": "MBPP/953", "prompt": "\n\ndef subset(ar, n):\n    \"\"\"\n    Write a python function to find the minimun number of subsets with distinct elements.\n    >>> subset([1, 2, 3, 4],4)\n    1\n    >>> subset([5, 6, 9, 3, 4, 3, 4],7)\n    2\n    >>> subset([1, 2, 3 ],3)\n    1\n    \"\"\"\n", "canonical_solution": "     \n    res = 0\n    ar.sort() \n    for i in range(0, n) : \n        count = 1\n        for i in range(n - 1): \n            if ar[i] == ar[i + 1]: \n                count+=1\n            else: \n                break \n        res = max(res, count)  \n    return res ", "entry_point": "subset", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4],4) == 1\n    assert candidate([5, 6, 9, 3, 4, 3, 4],7) == 2\n    assert candidate([1, 2, 3 ],3) == 1\n\n", "language": "python", "description": "Write a python function to find the minimun number of subsets with distinct elements."}
{"task_id": "MBPP/954", "prompt": "\n\ndef profit_amount(actual_cost,sale_amount):\n \"\"\"\n Write a function that gives profit amount if the given amount has profit else return none.\n >>> profit_amount(1500,1200)\n 300\n >>> profit_amount(100,200)\n None\n >>> profit_amount(2000,5000)\n None\n \"\"\"\n", "canonical_solution": "  \n if(actual_cost > sale_amount):\n    amount = actual_cost - sale_amount\n    return amount\n else:\n    return None", "entry_point": "profit_amount", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1500,1200)==300\n    assert candidate(100,200)==None\n    assert candidate(2000,5000)==None\n\n", "language": "python", "description": "Write a function that gives profit amount if the given amount has profit else return none."}
{"task_id": "MBPP/955", "prompt": "\n\ndef is_abundant(n):\n    \"\"\"\n    Write a function to find out, if the given number is abundant.\n    >>> is_abundant(12)\n    True\n    >>> is_abundant(13)\n    False\n    >>> is_abundant(9)\n    False\n    \"\"\"\n", "canonical_solution": "    \n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n", "entry_point": "is_abundant", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12)==True\n    assert candidate(13)==False\n    assert candidate(9)==False\n\n", "language": "python", "description": "Write a function to find out, if the given number is abundant."}
{"task_id": "MBPP/956", "prompt": "\n\ndef split_list(text):\n  \"\"\"\n  Write a function to split the given string at uppercase letters by using regex.\n  >>> split_list(\"LearnToBuildAnythingWithGoogle\")\n  ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\n  >>> split_list(\"ApmlifyingTheBlack+DeveloperCommunity\")\n  ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\n  >>> split_list(\"UpdateInTheGoEcoSystem\")\n  ['Update', 'In', 'The', 'Go', 'Eco', 'System']\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  return (re.findall('[A-Z][^A-Z]*', text))", "entry_point": "split_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\n    assert candidate(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\n    assert candidate(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']\n\n", "language": "python", "description": "Write a function to split the given string at uppercase letters by using regex."}
{"task_id": "MBPP/957", "prompt": "\n\ndef get_First_Set_Bit_Pos(n):\n     \"\"\"\n     Write a python function to get the position of rightmost set bit.\n     >>> get_First_Set_Bit_Pos(12)\n     3\n     >>> get_First_Set_Bit_Pos(18)\n     2\n     >>> get_First_Set_Bit_Pos(16)\n     5\n     \"\"\"\n", "canonical_solution": "     import math\n     \n     return math.log2(n&-n)+1", "entry_point": "get_First_Set_Bit_Pos", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12) == 3\n    assert candidate(18) == 2\n    assert candidate(16) == 5\n\n", "language": "python", "description": "Write a python function to get the position of rightmost set bit."}
{"task_id": "MBPP/958", "prompt": "\n\ndef int_to_roman( num):\n        \"\"\"\n        Write a function to convert an integer into a roman numeral.\n        >>> int_to_roman(1)\n        (\"I\")\n        >>> int_to_roman(50)\n        (\"L\")\n        >>> int_to_roman(4)\n        (\"IV\")\n        \"\"\"\n", "canonical_solution": "        \n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num", "entry_point": "int_to_roman", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1)==(\"I\")\n    assert candidate(50)==(\"L\")\n    assert candidate(4)==(\"IV\")\n\n", "language": "python", "description": "Write a function to convert an integer into a roman numeral."}
{"task_id": "MBPP/959", "prompt": "\n\ndef Average(lst):\n    \"\"\"\n    Write a python function to find the average of a list.\n    >>> Average([15, 9, 55, 41, 35, 20, 62, 49])\n    35.75\n    >>> Average([4, 5, 1, 2, 9, 7, 10, 8])\n    5.75\n    >>> Average([1,2,3])\n    2\n    \"\"\"\n", "canonical_solution": "     \n    return sum(lst) / len(lst) ", "entry_point": "Average", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\n    assert candidate([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\n    assert candidate([1,2,3]) == 2\n\n", "language": "python", "description": "Write a python function to find the average of a list."}
{"task_id": "MBPP/960", "prompt": "\n\ndef get_noOfways(n):\n    \"\"\"\n    Write a function to solve tiling problem.\n    >>> get_noOfways(4)\n    3\n    >>> get_noOfways(3)\n    2\n    >>> get_noOfways(5)\n    5\n    \"\"\"\n", "canonical_solution": "    \n    if (n == 0):\n        return 0;\n    if (n == 1):\n        return 1; \n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "entry_point": "get_noOfways", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4)==3\n    assert candidate(3)==2\n    assert candidate(5)==5\n\n", "language": "python", "description": "Write a function to solve tiling problem."}
{"task_id": "MBPP/961", "prompt": "\n\ndef roman_to_int(s):\n        \"\"\"\n        Write a function to convert a roman numeral to an integer.\n        >>> roman_to_int('MMMCMLXXXVI')\n        3986\n        >>> roman_to_int('MMMM')\n        4000\n        >>> roman_to_int('C')\n        100\n        \"\"\"\n", "canonical_solution": "        \n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n        for i in range(len(s)):\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n            else:\n                int_val += rom_val[s[i]]\n        return int_val", "entry_point": "roman_to_int", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('MMMCMLXXXVI')==3986\n    assert candidate('MMMM')==4000\n    assert candidate('C')==100\n\n", "language": "python", "description": "Write a function to convert a roman numeral to an integer."}
{"task_id": "MBPP/962", "prompt": "\n\ndef sum_Even(l,r):\n    \"\"\"\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    >>> sum_Even(2,5)\n    6\n    >>> sum_Even(3,8)\n    18\n    >>> sum_Even(4,6)\n    10\n    \"\"\"\n", "canonical_solution": "    def sum_Natural(n): \n        sum = (n * (n + 1)) \n        return int(sum) \n     \n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ", "entry_point": "sum_Even", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2,5) == 6\n    assert candidate(3,8) == 18\n    assert candidate(4,6) == 10\n\n", "language": "python", "description": "Write a python function to find the sum of all even natural numbers within the range l and r."}
{"task_id": "MBPP/963", "prompt": "\n\ndef discriminant_value(x,y,z):\n    \"\"\"\n    Write a function to calculate the discriminant value.\n    >>> discriminant_value(4,8,2)\n    (\"Two solutions\",32)\n    >>> discriminant_value(5,7,9)\n    (\"no real solution\",-131)\n    >>> discriminant_value(0,0,9)\n    (\"one solution\",0)\n    \"\"\"\n", "canonical_solution": "    \n    discriminant = (y**2) - (4*x*z)\n    if discriminant > 0:\n        return (\"Two solutions\",discriminant)\n    elif discriminant == 0:\n        return (\"one solution\",discriminant)\n    elif discriminant < 0:\n        return (\"no real solution\",discriminant)", "entry_point": "discriminant_value", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4,8,2)==(\"Two solutions\",32)\n    assert candidate(5,7,9)==(\"no real solution\",-131)\n    assert candidate(0,0,9)==(\"one solution\",0)\n\n", "language": "python", "description": "Write a function to calculate the discriminant value."}
{"task_id": "MBPP/964", "prompt": "\n\ndef word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is even or not.\n    >>> word_len(\"program\")\n    False\n    >>> word_len(\"solution\")\n    True\n    >>> word_len(\"data\")\n    True\n    \"\"\"\n", "canonical_solution": "     \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2==0: \n            return True  \n        else:\n          return False", "entry_point": "word_len", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"program\") == False\n    assert candidate(\"solution\") == True\n    assert candidate(\"data\") == True\n\n", "language": "python", "description": "Write a python function to check whether the length of the word is even or not."}
{"task_id": "MBPP/965", "prompt": "\n\ndef camel_to_snake(text):\n        \"\"\"\n        Write a function to convert camel case string to snake case string.\n        >>> camel_to_snake('PythonProgram')\n        ('python_program')\n        >>> camel_to_snake('pythonLanguage')\n        ('python_language')\n        >>> camel_to_snake('ProgrammingLanguage')\n        ('programming_language')\n        \"\"\"\n", "canonical_solution": "        \n        import re\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "entry_point": "camel_to_snake", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('PythonProgram')==('python_program')\n    assert candidate('pythonLanguage')==('python_language')\n    assert candidate('ProgrammingLanguage')==('programming_language')\n\n", "language": "python", "description": "Write a function to convert camel case string to snake case string."}
{"task_id": "MBPP/966", "prompt": "\n\ndef remove_empty(tuple1):\n \"\"\"\n Write a function to remove an empty tuple from a list of tuples.\n >>> remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])\n [('',), ('a', 'b'), ('a', 'b', 'c'), 'd']\n >>> remove_empty([(), (), ('',), (\"python\"), (\"program\")])\n [('',), (\"python\"), (\"program\")]\n >>> remove_empty([(), (), ('',), (\"java\")])\n [('',),(\"java\") ]\n \"\"\"\n", "canonical_solution": "  #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n   tuple1 = [t for t in tuple1 if t]\n   return tuple1", "entry_point": "remove_empty", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \n    assert candidate([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \n    assert candidate([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  \n\n", "language": "python", "description": "Write a function to remove an empty tuple from a list of tuples."}
{"task_id": "MBPP/967", "prompt": "\n\ndef check(string):\n  \"\"\"\n  Write a python function to accept the strings which contains all vowels.\n  >>> check(\"SEEquoiaL\")\n  'accepted'\n  >>> check('program')\n  \"not accepted\"\n  >>> check('fine')\n  \"not accepted\"\n  \"\"\"\n", "canonical_solution": "   \n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \n    return ('accepted') \n  else: \n    return (\"not accepted\") ", "entry_point": "check", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"SEEquoiaL\") == 'accepted'\n    assert candidate('program') == \"not accepted\"\n    assert candidate('fine') == \"not accepted\"\n\n", "language": "python", "description": "Write a python function to accept the strings which contains all vowels."}
{"task_id": "MBPP/968", "prompt": "\n\ndef floor_Max(A,B,N):\n    \"\"\"\n    Write a python function to find maximum possible value for the given periodic function.\n    >>> floor_Max(11,10,9)\n    9\n    >>> floor_Max(5,7,4)\n    2\n    >>> floor_Max(2,2,1)\n    1\n    \"\"\"\n", "canonical_solution": "    \n    x = min(B - 1,N)\n    return (A*x) // B", "entry_point": "floor_Max", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(11,10,9) == 9\n    assert candidate(5,7,4) == 2\n    assert candidate(2,2,1) == 1\n\n", "language": "python", "description": "Write a python function to find maximum possible value for the given periodic function."}
{"task_id": "MBPP/969", "prompt": "\n\ndef join_tuples(test_list):\n  \"\"\"\n  Write a function to join the tuples if they have similar initial elements.\n  >>> join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] )\n  [(5, 6, 7), (6, 8, 10), (7, 13)]\n  >>> join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] )\n  [(6, 7, 8), (7, 9, 11), (8, 14)]\n  >>> join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] )\n  [(7, 8, 9), (8, 10, 12), (9, 15)]\n  \"\"\"\n", "canonical_solution": "  \n  res = []\n  for sub in test_list:\n    if res and res[-1][0] == sub[0]:\n      res[-1].extend(sub[1:])\n    else:\n      res.append([ele for ele in sub])\n  res = list(map(tuple, res))\n  return (res) ", "entry_point": "join_tuples", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\n    assert candidate([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\n    assert candidate([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]\n\n", "language": "python", "description": "Write a function to join the tuples if they have similar initial elements."}
{"task_id": "MBPP/970", "prompt": "\n\ndef min_of_two( x, y ):\n    \"\"\"\n    Write a function to find minimum of two numbers.\n    >>> min_of_two(10,20)\n    10\n    >>> min_of_two(19,15)\n    15\n    >>> min_of_two(-10,-20)\n    -20\n    \"\"\"\n", "canonical_solution": "    \n    if x < y:\n        return x\n    return y", "entry_point": "min_of_two", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,20)==10\n    assert candidate(19,15)==15\n    assert candidate(-10,-20)==-20\n\n", "language": "python", "description": "Write a function to find minimum of two numbers."}
{"task_id": "MBPP/971", "prompt": "\n\ndef maximum_segments(n, a, b, c) :\n\t\"\"\"\n\tWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\t>>> maximum_segments(7, 5, 2, 5)\n\t2\n\t>>> maximum_segments(17, 2, 1, 3)\n\t17\n\t>>> maximum_segments(18, 16, 3, 6)\n\t6\n\t\"\"\"\n", "canonical_solution": "\t \n\tdp = [-1] * (n + 10) \n\tdp[0] = 0\n\tfor i in range(0, n) : \n\t\tif (dp[i] != -1) : \n\t\t\tif(i + a <= n ): \n\t\t\t\tdp[i + a] = max(dp[i] + 1, \n\t\t\t\t\t\t\tdp[i + a]) \n\t\t\tif(i + b <= n ): \n\t\t\t\tdp[i + b] = max(dp[i] + 1, \n\t\t\t\t\t\t\tdp[i + b]) \n\t\t\tif(i + c <= n ): \n\t\t\t\tdp[i + c] = max(dp[i] + 1, \n\t\t\t\t\t\t\tdp[i + c]) \n\treturn dp[n]", "entry_point": "maximum_segments", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(7, 5, 2, 5) == 2\n    assert candidate(17, 2, 1, 3) == 17\n    assert candidate(18, 16, 3, 6) == 6\n\n", "language": "python", "description": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n."}
{"task_id": "MBPP/972", "prompt": "\n\ndef concatenate_nested(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to concatenate the given two tuples to a nested tuple.\n  >>> concatenate_nested((3, 4), (5, 6))\n  (3, 4, 5, 6)\n  >>> concatenate_nested((1, 2), (3, 4))\n  (1, 2, 3, 4)\n  >>> concatenate_nested((4, 5), (6, 8))\n  (4, 5, 6, 8)\n  \"\"\"\n", "canonical_solution": "  \n  res = test_tup1 + test_tup2\n  return (res) ", "entry_point": "concatenate_nested", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((3, 4), (5, 6)) == (3, 4, 5, 6)\n    assert candidate((1, 2), (3, 4)) == (1, 2, 3, 4)\n    assert candidate((4, 5), (6, 8)) == (4, 5, 6, 8)\n\n", "language": "python", "description": "Write a function to concatenate the given two tuples to a nested tuple."}
{"task_id": "MBPP/973", "prompt": "\n\ndef left_rotate(s,d):\n    \"\"\"\n    Write a python function to left rotate the string.\n    >>> left_rotate(\"python\",2)\n    \"thonpy\"\n    >>> left_rotate(\"bigdata\",3 )\n    \"databig\"\n    >>> left_rotate(\"hadoop\",1 )\n    \"adooph\"\n    \"\"\"\n", "canonical_solution": "    \n    tmp = s[d : ] + s[0 : d]\n    return tmp  ", "entry_point": "left_rotate", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"python\",2) == \"thonpy\"   \n    assert candidate(\"bigdata\",3 ) == \"databig\" \n    assert candidate(\"hadoop\",1 ) == \"adooph\" \n\n", "language": "python", "description": "Write a python function to left rotate the string."}
{"task_id": "MBPP/974", "prompt": "\n\ndef min_sum_path(A):\n\t\"\"\"\n\tWrite a function to find the minimum total path sum in the given triangle.\n\t>>> min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]])\n\t6\n\t>>> min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]])\n\t10\n\t>>> min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]])\n\t9\n\t\"\"\"\n", "canonical_solution": "\t \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\tfor i in range(len(A[n])): \n\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tmemo[j] = A[i][j] + min(memo[j], \n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \n\treturn memo[0]", "entry_point": "min_sum_path", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\n    assert candidate([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \n    assert candidate([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9\n\n", "language": "python", "description": "Write a function to find the minimum total path sum in the given triangle."}
