{"task_id": "MBPP/244", "prompt": "\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    >>> next_Perfect_Square(35)\n    36\n    >>> next_Perfect_Square(6)\n    9\n    >>> next_Perfect_Square(9)\n    16\n    \"\"\"\n", "canonical_solution": "    import math  \n     \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ", "entry_point": "next_Perfect_Square", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(35) == 36\n    assert candidate(6) == 9\n    assert candidate(9) == 16\n\n", "language": "python", "description": "Write a python function to find the next perfect square greater than a given number."}
{"task_id": "MBPP/245", "prompt": "\n\ndef max_sum(arr, n):\n\t\"\"\"\n\tWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\t>>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)\n\t194\n\t>>> max_sum([80, 60, 30, 40, 20, 10], 6)\n\t210\n\t>>> max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8)\n\t138\n\t\"\"\"\n", "canonical_solution": "\t \n\tMSIBS = arr[:] \n\tfor i in range(n): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, n + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum", "entry_point": "max_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n    assert candidate([80, 60, 30, 40, 20, 10], 6) == 210\n    assert candidate([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138\n\n", "language": "python", "description": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array."}
{"task_id": "MBPP/246", "prompt": "\n\ndef babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    >>> babylonian_squareroot(10)\n    3.162277660168379\n    >>> babylonian_squareroot(2)\n    1.414213562373095\n    >>> babylonian_squareroot(9)\n    3.0\n    \"\"\"\n", "canonical_solution": "    \n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;", "entry_point": "babylonian_squareroot", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10)==3.162277660168379\n    assert candidate(2)==1.414213562373095\n    assert candidate(9)==3.0\n\n", "language": "python", "description": "Write a function for computing square roots using the babylonian method."}
{"task_id": "MBPP/247", "prompt": "\n\ndef lps(str):\n\t\"\"\"\n\tWrite a function to find the longest palindromic subsequence in the given string.\n\t>>> lps(\"TENS FOR TENS\")\n\t5\n\t>>> lps(\"CARDIO FOR CARDS\")\n\t7\n\t>>> lps(\"PART OF THE JOURNEY IS PART\")\n\t9\n\t\"\"\"\n", "canonical_solution": "\t \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]", "entry_point": "lps", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"TENS FOR TENS\") == 5 \n    assert candidate(\"CARDIO FOR CARDS\") == 7\n    assert candidate(\"PART OF THE JOURNEY IS PART\") == 9 \n\n", "language": "python", "description": "Write a function to find the longest palindromic subsequence in the given string."}
{"task_id": "MBPP/248", "prompt": "\n\ndef harmonic_sum(n):\n  \"\"\"\n  Write a function to calculate the harmonic sum of n-1.\n  >>> harmonic_sum(7)\n  2.5928571428571425\n  >>> harmonic_sum(4)\n  2.083333333333333\n  >>> harmonic_sum(19)\n  3.547739657143682\n  \"\"\"\n", "canonical_solution": "  \n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ", "entry_point": "harmonic_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(7) == 2.5928571428571425\n    assert candidate(4) == 2.083333333333333\n    assert candidate(19) == 3.547739657143682\n\n", "language": "python", "description": "Write a function to calculate the harmonic sum of n-1."}
{"task_id": "MBPP/249", "prompt": "\n\ndef intersection_array(array_nums1,array_nums2):\n \"\"\"\n Write a function to find the intersection of two arrays using lambda function.\n >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])\n [1, 2, 8, 9]\n >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])\n [3,5,7,9]\n >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])\n [10]\n \"\"\"\n", "canonical_solution": " \n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result", "entry_point": "intersection_array", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]\n\n", "language": "python", "description": "Write a function to find the intersection of two arrays using lambda function."}
{"task_id": "MBPP/250", "prompt": "\n\ndef count_X(tup, x):\n    \"\"\"\n    Write a python function to count the occcurences of an element in a tuple.\n    >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4)\n    0\n    >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10)\n    3\n    >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8)\n    4\n    \"\"\"\n", "canonical_solution": "     \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ", "entry_point": "count_X", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n\n", "language": "python", "description": "Write a python function to count the occcurences of an element in a tuple."}
{"task_id": "MBPP/251", "prompt": "\n\ndef insert_element(list,element):\n \"\"\"\n Write a function to insert an element before each element of a list.\n >>> insert_element(['Red', 'Green', 'Black'] ,'c')\n ['c', 'Red', 'c', 'Green', 'c', 'Black']\n >>> insert_element(['python', 'java'] ,'program')\n ['program', 'python', 'program', 'java']\n >>> insert_element(['happy', 'sad'] ,'laugh')\n ['laugh', 'happy', 'laugh', 'sad']\n \"\"\"\n", "canonical_solution": " \n list = [v for elt in list for v in (element, elt)]\n return list", "entry_point": "insert_element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n    assert candidate(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \n    assert candidate(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] \n\n", "language": "python", "description": "Write a function to insert an element before each element of a list."}
{"task_id": "MBPP/252", "prompt": "\n\ndef convert(numbers):\n  \"\"\"\n  Write a python function to convert complex numbers to polar coordinates.\n  >>> convert(1)\n  (1.0, 0.0)\n  >>> convert(4)\n  (4.0,0.0)\n  >>> convert(5)\n  (5.0,0.0)\n  \"\"\"\n", "canonical_solution": "  import cmath  \n      \n  num = cmath.polar(numbers)  \n  return (num) ", "entry_point": "convert", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == (1.0, 0.0)\n    assert candidate(4) == (4.0,0.0)\n    assert candidate(5) == (5.0,0.0)\n\n", "language": "python", "description": "Write a python function to convert complex numbers to polar coordinates."}
{"task_id": "MBPP/253", "prompt": "\n\ndef count_integer(list1):\n    \"\"\"\n    Write a python function to count integers from a given list.\n    >>> count_integer([1,2,'abc',1.2])\n    2\n    >>> count_integer([1,2,3])\n    3\n    >>> count_integer([1,1.2,4,5.1])\n    2\n    \"\"\"\n", "canonical_solution": "    \n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr", "entry_point": "count_integer", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,'abc',1.2]) == 2\n    assert candidate([1,2,3]) == 3\n    assert candidate([1,1.2,4,5.1]) == 2\n\n", "language": "python", "description": "Write a python function to count integers from a given list."}
{"task_id": "MBPP/254", "prompt": "\n\ndef words_ae(text):\n \"\"\"\n Write a function to find all words starting with 'a' or 'e' in a given string.\n >>> words_ae(\"python programe\")\n ['ame']\n >>> words_ae(\"python programe language\")\n ['ame','anguage']\n >>> words_ae(\"assert statement\")\n ['assert', 'atement']\n \"\"\"\n", "canonical_solution": " import re\n \n list = re.findall(\"[ae]\\w+\", text)\n return list", "entry_point": "words_ae", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"python programe\")==['ame']\n    assert candidate(\"python programe language\")==['ame','anguage']\n    assert candidate(\"assert statement\")==['assert', 'atement']\n\n", "language": "python", "description": "Write a function to find all words starting with 'a' or 'e' in a given string."}
{"task_id": "MBPP/255", "prompt": "\n\ndef combinations_colors(l, n):\n    \"\"\"\n    Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n    >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)\n    [('Red',), ('Green',), ('Blue',)]\n    >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)\n    [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)\n    [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n    \"\"\"\n", "canonical_solution": "    from itertools import combinations_with_replacement \n    \n    return list(combinations_with_replacement(l,n))", "entry_point": "combinations_colors", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n\n", "language": "python", "description": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions."}
{"task_id": "MBPP/256", "prompt": "\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function to count the number of prime numbers less than a given non-negative number.\n    >>> count_Primes_nums(5)\n    2\n    >>> count_Primes_nums(10)\n    4\n    >>> count_Primes_nums(100)\n    25\n    \"\"\"\n", "canonical_solution": "    \n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr", "entry_point": "count_Primes_nums", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 2\n    assert candidate(10) == 4\n    assert candidate(100) == 25\n\n", "language": "python", "description": "Write a python function to count the number of prime numbers less than a given non-negative number."}
{"task_id": "MBPP/257", "prompt": "\n\ndef swap_numbers(a,b):\n \"\"\"\n Write a function to swap two numbers.\n >>> swap_numbers(10,20)\n (20,10)\n >>> swap_numbers(15,17)\n (17,15)\n >>> swap_numbers(100,200)\n (200,100)\n \"\"\"\n", "canonical_solution": " \n temp = a\n a = b\n b = temp\n return (a,b)", "entry_point": "swap_numbers", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,20)==(20,10)\n    assert candidate(15,17)==(17,15)\n    assert candidate(100,200)==(200,100)\n\n", "language": "python", "description": "Write a function to swap two numbers."}
{"task_id": "MBPP/258", "prompt": "\n\ndef count_odd(array_nums):\n   \"\"\"\n   Write a function to find number of odd elements in the given list using lambda function.\n   >>> count_odd([1, 2, 3, 5, 7, 8, 10])\n   4\n   >>> count_odd([10,15,14,13,-18,12,-20])\n   2\n   >>> count_odd([1, 2, 4, 8, 9])\n   2\n   \"\"\"\n", "canonical_solution": "   \n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   return count_odd", "entry_point": "count_odd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 10])==4\n    assert candidate([10,15,14,13,-18,12,-20])==2\n    assert candidate([1, 2, 4, 8, 9])==2\n\n", "language": "python", "description": "Write a function to find number of odd elements in the given list using lambda function."}
{"task_id": "MBPP/259", "prompt": "\n\ndef maximize_elements(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to maximize the given two tuples.\n  >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n  ((6, 7), (4, 9), (2, 9), (7, 10))\n  >>> maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n  ((7, 8), (5, 10), (3, 10), (8, 11))\n  >>> maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n  ((8, 9), (6, 11), (4, 11), (9, 12))\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "entry_point": "maximize_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n\n", "language": "python", "description": "Write a function to maximize the given two tuples."}
{"task_id": "MBPP/260", "prompt": "\n\ndef newman_prime(n):\n\t\"\"\"\n\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\t>>> newman_prime(3)\n\t7\n\t>>> newman_prime(4)\n\t17\n\t>>> newman_prime(5)\n\t41\n\t\"\"\"\n", "canonical_solution": "\t \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "entry_point": "newman_prime", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3) == 7 \n    assert candidate(4) == 17\n    assert candidate(5) == 41\n\n", "language": "python", "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number."}
{"task_id": "MBPP/261", "prompt": "\n\ndef division_elements(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perform mathematical division operation across the given tuples.\n  >>> division_elements((10, 4, 6, 9),(5, 2, 3, 3))\n  (2, 2, 2, 3)\n  >>> division_elements((12, 6, 8, 16),(6, 3, 4, 4))\n  (2, 2, 2, 4)\n  >>> division_elements((20, 14, 36, 18),(5, 7, 6, 9))\n  (4, 2, 6, 2)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "entry_point": "division_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert candidate((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert candidate((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n\n", "language": "python", "description": "Write a function to perform mathematical division operation across the given tuples."}
{"task_id": "MBPP/262", "prompt": "\n\ndef split_two_parts(list1, L):\n    \"\"\"\n    Write a function to split a given list into two parts where the length of the first part of the list is given.\n    >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n    ([1, 1, 2], [3, 4, 4, 5, 1])\n    >>> split_two_parts(['a', 'b', 'c', 'd'],2)\n    (['a', 'b'], ['c', 'd'])\n    >>> split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)\n    (['p', 'y', 't', 'h'], ['o', 'n'])\n    \"\"\"\n", "canonical_solution": "    \n    return list1[:L], list1[L:]", "entry_point": "split_two_parts", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert candidate(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n\n", "language": "python", "description": "Write a function to split a given list into two parts where the length of the first part of the list is given."}
{"task_id": "MBPP/263", "prompt": "\n\ndef merge_dict(d1,d2):\n \"\"\"\n Write a function to merge two dictionaries.\n >>> merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})\n {'x': 300, 'y': 200, 'a': 100, 'b': 200}\n >>> merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})\n {'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\n >>> merge_dict({'a':10,'b':20},{'x':30,'y':40})\n {'x':30,'y':40,'a':10,'b':20}\n \"\"\"\n", "canonical_solution": " \n d = d1.copy()\n d.update(d2)\n return d", "entry_point": "merge_dict", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n    assert candidate({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\n    assert candidate({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}\n\n", "language": "python", "description": "Write a function to merge two dictionaries."}
{"task_id": "MBPP/264", "prompt": "\n\ndef dog_age(h_age):\n \"\"\"\n Write a function to calculate a dog's age in dog's years.\n >>> dog_age(12)\n 61\n >>> dog_age(15)\n 73\n >>> dog_age(24)\n 109\n \"\"\"\n", "canonical_solution": " \n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age", "entry_point": "dog_age", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12)==61\n    assert candidate(15)==73\n    assert candidate(24)==109\n\n", "language": "python", "description": "Write a function to calculate a dog's age in dog's years."}
{"task_id": "MBPP/265", "prompt": "\n\ndef list_split(S, step):\n    \"\"\"\n    Write a function to split a list for every nth element.\n    >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)\n    [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    >>> list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)\n    [[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\n    >>> list_split(['python','java','C','C++','DBMS','SQL'],2)\n    [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n    \"\"\"\n", "canonical_solution": "    \n    return [S[i::step] for i in range(step)]", "entry_point": "list_split", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n    assert candidate([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \n    assert candidate(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] \n\n", "language": "python", "description": "Write a function to split a list for every nth element."}
{"task_id": "MBPP/266", "prompt": "\n\ndef lateralsurface_cube(l):\n  \"\"\"\n  Write a function to find the lateral surface area of a cube.\n  >>> lateralsurface_cube(5)\n  100\n  >>> lateralsurface_cube(9)\n  324\n  >>> lateralsurface_cube(10)\n  400\n  \"\"\"\n", "canonical_solution": "  \n  LSA = 4 * (l * l)\n  return LSA", "entry_point": "lateralsurface_cube", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5)==100\n    assert candidate(9)==324\n    assert candidate(10)==400\n\n", "language": "python", "description": "Write a function to find the lateral surface area of a cube."}
{"task_id": "MBPP/267", "prompt": "\n\ndef square_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of squares of first n odd natural numbers.\n    >>> square_Sum(2)\n    10\n    >>> square_Sum(3)\n    35\n    >>> square_Sum(4)\n    84\n    \"\"\"\n", "canonical_solution": "      \n    return int(n*(4*n*n-1)/3) ", "entry_point": "square_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 10\n    assert candidate(3) == 35\n    assert candidate(4) == 84\n\n", "language": "python", "description": "Write a python function to find the sum of squares of first n odd natural numbers."}
{"task_id": "MBPP/268", "prompt": "\n\ndef find_star_num(n):\n\t\"\"\"\n\tWrite a function to find the n'th star number.\n\t>>> find_star_num(3)\n\t37\n\t>>> find_star_num(4)\n\t73\n\t>>> find_star_num(5)\n\t121\n\t\"\"\"\n", "canonical_solution": "\t \n\treturn (6 * n * (n - 1) + 1) ", "entry_point": "find_star_num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3) == 37\n    assert candidate(4) == 73\n    assert candidate(5) == 121\n\n", "language": "python", "description": "Write a function to find the n'th star number."}
{"task_id": "MBPP/269", "prompt": "\n\ndef ascii_value(k):\n  \"\"\"\n  Write a function to find the ascii value of a character.\n  >>> ascii_value('A')\n  65\n  >>> ascii_value('R')\n  82\n  >>> ascii_value('S')\n  83\n  \"\"\"\n", "canonical_solution": "  \n  ch=k\n  return ord(ch)", "entry_point": "ascii_value", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('A')==65\n    assert candidate('R')==82\n    assert candidate('S')==83\n\n", "language": "python", "description": "Write a function to find the ascii value of a character."}
{"task_id": "MBPP/270", "prompt": "\n\ndef sum_even_and_even_index(arr,n):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions.\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8],6)\n    30\n    >>> sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10)\n    26\n    >>> sum_even_and_even_index([5, 6, 12, 1],4)\n    12\n    \"\"\"\n", "canonical_solution": "      \n    i = 0\n    sum = 0\n    for i in range(0,n,2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum", "entry_point": "sum_even_and_even_index", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 6, 12, 1, 18, 8],6) == 30\n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\n    assert candidate([5, 6, 12, 1],4) == 12\n\n", "language": "python", "description": "Write a python function to find the sum of even numbers at even positions."}
{"task_id": "MBPP/271", "prompt": "\n\ndef even_Power_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of fifth power of first n even natural numbers.\n    >>> even_Power_Sum(2)\n    1056\n    >>> even_Power_Sum(3)\n    8832\n    >>> even_Power_Sum(1)\n    32\n    \"\"\"\n", "canonical_solution": "     \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ", "entry_point": "even_Power_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1056\n    assert candidate(3) == 8832\n    assert candidate(1) == 32\n\n", "language": "python", "description": "Write a python function to find the sum of fifth power of first n even natural numbers."}
{"task_id": "MBPP/272", "prompt": "\n\ndef rear_extract(test_list):\n  \"\"\"\n  Write a function to perfom the rear element extraction from list of tuples records.\n  >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n  [21, 20, 19]\n  >>> rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)])\n  [36, 25, 45]\n  >>> rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)])\n  [14, 36, 56]\n  \"\"\"\n", "canonical_solution": "  \n  res = [lis[-1] for lis in test_list]\n  return (res) ", "entry_point": "rear_extract", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n\n", "language": "python", "description": "Write a function to perfom the rear element extraction from list of tuples records."}
{"task_id": "MBPP/273", "prompt": "\n\ndef substract_elements(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to substract the contents of one tuple with corresponding index of other tuple.\n  >>> substract_elements((10, 4, 5), (2, 5, 18))\n  (8, -1, -13)\n  >>> substract_elements((11, 2, 3), (24, 45 ,16))\n  (-13, -43, -13)\n  >>> substract_elements((7, 18, 9), (10, 11, 12))\n  (-3, 7, -3)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ", "entry_point": "substract_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\n", "language": "python", "description": "Write a function to substract the contents of one tuple with corresponding index of other tuple."}
{"task_id": "MBPP/274", "prompt": "\n\ndef even_binomial_Coeff_Sum( n):\n    \"\"\"\n    Write a python function to find sum of even index binomial coefficients.\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    >>> even_binomial_Coeff_Sum(6)\n    32\n    >>> even_binomial_Coeff_Sum(2)\n    2\n    \"\"\"\n", "canonical_solution": "    import math  \n     \n    return (1 << (n - 1)) ", "entry_point": "even_binomial_Coeff_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4) == 8\n    assert candidate(6) == 32\n    assert candidate(2) == 2\n\n", "language": "python", "description": "Write a python function to find sum of even index binomial coefficients."}
{"task_id": "MBPP/275", "prompt": "\n\ndef get_Position(a,n,m):\n    \"\"\"\n    Write a python function to find the position of the last removed element from the given array.\n    >>> get_Position([2,5,4],3,2)\n    2\n    >>> get_Position([4,3],2,2)\n    2\n    >>> get_Position([1,2,3,4],4,1)\n    4\n    \"\"\"\n", "canonical_solution": "    import math as mt \n     \n    for i in range(n): \n        a[i] = (a[i] // m + (a[i] % m != 0))  \n    result,maxx = -1,-1\n    for i in range(n - 1,-1,-1): \n        if (maxx < a[i]): \n            maxx = a[i] \n            result = i \n    return result + 1", "entry_point": "get_Position", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([2,5,4],3,2) == 2\n    assert candidate([4,3],2,2) == 2\n    assert candidate([1,2,3,4],4,1) == 4\n\n", "language": "python", "description": "Write a python function to find the position of the last removed element from the given array."}
{"task_id": "MBPP/276", "prompt": "\n\ndef volume_cylinder(r,h):\n  \"\"\"\n  Write a function to find the volume of a cylinder.\n  >>> volume_cylinder(10,5)\n  1570.7500000000002\n  >>> volume_cylinder(4,5)\n  251.32000000000002\n  >>> volume_cylinder(4,10)\n  502.64000000000004\n  \"\"\"\n", "canonical_solution": "  \n  volume=3.1415*r*r*h\n  return volume", "entry_point": "volume_cylinder", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,5)==1570.7500000000002\n    assert candidate(4,5)==251.32000000000002\n    assert candidate(4,10)==502.64000000000004\n\n", "language": "python", "description": "Write a function to find the volume of a cylinder."}
{"task_id": "MBPP/277", "prompt": "\n\ndef dict_filter(dict,n):\n \"\"\"\n Write a function to filter a dictionary based on values.\n >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)\n {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)\n { 'Alden Cantrell': 180, 'Pierre Cox': 190}\n >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)\n { 'Pierre Cox': 190}\n \"\"\"\n", "canonical_solution": " \n result = {key:value for (key, value) in dict.items() if value >=n}\n return result", "entry_point": "dict_filter", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n\n", "language": "python", "description": "Write a function to filter a dictionary based on values."}
{"task_id": "MBPP/278", "prompt": "\n\ndef count_first_elements(test_tup):\n  \"\"\"\n  Write a function to find the element count that occurs before the record in the given tuple.\n  >>> count_first_elements((1, 5, 7, (4, 6), 10) )\n  3\n  >>> count_first_elements((2, 9, (5, 7), 11) )\n  2\n  >>> count_first_elements((11, 15, 5, 8, (2, 3), 8) )\n  4\n  \"\"\"\n", "canonical_solution": "  \n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ", "entry_point": "count_first_elements", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10) ) == 3\n    assert candidate((2, 9, (5, 7), 11) ) == 2\n    assert candidate((11, 15, 5, 8, (2, 3), 8) ) == 4\n\n", "language": "python", "description": "Write a function to find the element count that occurs before the record in the given tuple."}
{"task_id": "MBPP/279", "prompt": "\n\ndef is_num_decagonal(n):\n\t\"\"\"\n\tWrite a function to find the nth decagonal number.\n\t>>> is_num_decagonal(3)\n\t27\n\t>>> is_num_decagonal(7)\n\t175\n\t>>> is_num_decagonal(10)\n\t370\n\t\"\"\"\n", "canonical_solution": "\t \n\treturn 4 * n * n - 3 * n ", "entry_point": "is_num_decagonal", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3) == 27\n    assert candidate(7) == 175\n    assert candidate(10) == 370\n\n", "language": "python", "description": "Write a function to find the nth decagonal number."}
{"task_id": "MBPP/280", "prompt": "\n\ndef sequential_search(dlist, item):\n    \"\"\"\n    Write a function to search an element in the given array by using sequential search.\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],31)\n    (True, 3)\n    >>> sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61)\n    (True, 7)\n    >>> sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48)\n    (True, 6)\n    \"\"\"\n", "canonical_solution": "    \n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos", "entry_point": "sequential_search", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n\n", "language": "python", "description": "Write a function to search an element in the given array by using sequential search."}
{"task_id": "MBPP/281", "prompt": "\n\ndef all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    >>> all_unique([1,2,3])\n    True\n    >>> all_unique([1,2,1,2])\n    False\n    >>> all_unique([1,2,3,4,5])\n    True\n    \"\"\"\n", "canonical_solution": "    \n    if len(test_list) > len(set(test_list)):\n        return False\n    return True", "entry_point": "all_unique", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3]) == True\n    assert candidate([1,2,1,2]) == False\n    assert candidate([1,2,3,4,5]) == True\n\n", "language": "python", "description": "Write a python function to check if the elements of a given list are unique or not."}
{"task_id": "MBPP/282", "prompt": "\n\ndef sub_list(nums1,nums2):\n  \"\"\"\n  Write a function to substaract two lists using map and lambda function.\n  >>> sub_list([1, 2, 3],[4,5,6])\n  [-3,-3,-3]\n  >>> sub_list([1,2],[3,4])\n  [-2,-2]\n  >>> sub_list([90,120],[50,70])\n  [40,50]\n  \"\"\"\n", "canonical_solution": "  \n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "entry_point": "sub_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    assert candidate([1,2],[3,4])==[-2,-2]\n    assert candidate([90,120],[50,70])==[40,50]\n\n", "language": "python", "description": "Write a function to substaract two lists using map and lambda function."}
{"task_id": "MBPP/283", "prompt": "\n\ndef validate(n):\n    \"\"\"\n    Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n    >>> validate(1234)\n    True\n    >>> validate(51241)\n    False\n    >>> validate(321)\n    True\n    \"\"\"\n", "canonical_solution": "     \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True", "entry_point": "validate", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1234) == True\n    assert candidate(51241) == False\n    assert candidate(321) == True\n\n", "language": "python", "description": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself."}
{"task_id": "MBPP/284", "prompt": "\n\ndef check_element(list,element):\n  \"\"\"\n  Write a function to check whether all items of a list are equal to a given string.\n  >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')\n  False\n  >>> check_element([1,2,3,4],7)\n  False\n  >>> check_element([\"green\", \"green\", \"green\", \"green\"],'green')\n  True\n  \"\"\"\n", "canonical_solution": "  \n  check_element=all(v== element for v in list)\n  return check_element", "entry_point": "check_element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n    assert candidate([1,2,3,4],7)==False\n    assert candidate([\"green\", \"green\", \"green\", \"green\"],'green')==True\n\n", "language": "python", "description": "Write a function to check whether all items of a list are equal to a given string."}
{"task_id": "MBPP/285", "prompt": "\n\ndef text_match_two_three(text):\n        \"\"\"\n        Write a function that matches a string that has an a followed by two to three 'b'.\n        >>> text_match_two_three(\"ac\")\n        ('Not matched!')\n        >>> text_match_two_three(\"dc\")\n        ('Not matched!')\n        >>> text_match_two_three(\"abbbba\")\n        ('Found a match!')\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "entry_point": "text_match_two_three", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"ac\")==('Not matched!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abbbba\")==('Found a match!')\n\n", "language": "python", "description": "Write a function that matches a string that has an a followed by two to three 'b'."}
{"task_id": "MBPP/286", "prompt": "\n\ndef max_sub_array_sum_repeated(a, n, k):\n\t\"\"\"\n\tWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\t>>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n\t30\n\t>>> max_sub_array_sum_repeated([-1, 10, 20], 3, 2)\n\t59\n\t>>> max_sub_array_sum_repeated([-1, -2, -3], 3, 3)\n\t-1\n\t\"\"\"\n", "canonical_solution": "\t \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "entry_point": "max_sub_array_sum_repeated", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10, 20, -30, -1], 4, 3) == 30\n    assert candidate([-1, 10, 20], 3, 2) == 59\n    assert candidate([-1, -2, -3], 3, 3) == -1\n\n", "language": "python", "description": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times."}
{"task_id": "MBPP/287", "prompt": "\n\ndef square_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of squares of first n even natural numbers.\n    >>> square_Sum(2)\n    20\n    >>> square_Sum(3)\n    56\n    >>> square_Sum(4)\n    120\n    \"\"\"\n", "canonical_solution": "      \n    return int(2*n*(n+1)*(2*n+1)/3)", "entry_point": "square_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 20\n    assert candidate(3) == 56\n    assert candidate(4) == 120\n\n", "language": "python", "description": "Write a python function to find the sum of squares of first n even natural numbers."}
{"task_id": "MBPP/288", "prompt": "\n\ndef modular_inverse(arr, N, P):\n\t\"\"\"\n\tWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\t>>> modular_inverse([ 1, 6, 4, 5 ], 4, 7)\n\t2\n\t>>> modular_inverse([1, 3, 8, 12, 12], 5, 13)\n\t3\n\t>>> modular_inverse([2, 3, 4, 5], 4, 6)\n\t1\n\t\"\"\"\n", "canonical_solution": "\t\n\tcurrent_element = 0\n\tfor i in range(0, N):\n\t\tif ((arr[i] * arr[i]) % P == 1):\n\t\t\tcurrent_element = current_element + 1\n\treturn current_element", "entry_point": "modular_inverse", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([ 1, 6, 4, 5 ], 4, 7) == 2\n    assert candidate([1, 3, 8, 12, 12], 5, 13) == 3\n    assert candidate([2, 3, 4, 5], 4, 6) == 1\n\n", "language": "python", "description": "Write a function to count array elements having modular inverse under given prime number p equal to itself."}
{"task_id": "MBPP/289", "prompt": "\n\ndef odd_Days(N):\n    \"\"\"\n    Write a python function to calculate the number of odd days in a given year.\n    >>> odd_Days(100)\n    5\n    >>> odd_Days(50)\n    6\n    >>> odd_Days(75)\n    2\n    \"\"\"\n", "canonical_solution": "     \n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap \n    if (hund1): \n        ordd += hund1 \n        leap -= hund1 \n    if (hund4): \n        ordd -= hund4 \n        leap += hund4 \n    days = ordd + leap * 2\n    odd = days % 7\n    return odd ", "entry_point": "odd_Days", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(100) == 5\n    assert candidate(50) ==6\n    assert candidate(75) == 2\n\n", "language": "python", "description": "Write a python function to calculate the number of odd days in a given year."}
{"task_id": "MBPP/290", "prompt": "\n\ndef max_length(list1):\n    \"\"\"\n    Write a function to find the list of lists with maximum length.\n    >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (3, [13, 15, 17])\n    >>> max_length([[1], [5, 7], [10, 12, 14,15]])\n    (4, [10, 12, 14,15])\n    >>> max_length([[5], [15,20,25]])\n    (3, [15,20,25])\n    \"\"\"\n", "canonical_solution": "    \n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)", "entry_point": "max_length", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n    assert candidate([[5], [15,20,25]])==(3, [15,20,25])\n\n", "language": "python", "description": "Write a function to find the list of lists with maximum length."}
{"task_id": "MBPP/291", "prompt": "\n\ndef count_no_of_ways(n, k):\n\t\"\"\"\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t>>> count_no_of_ways(2, 4)\n\t16\n\t>>> count_no_of_ways(3, 2)\n\t6\n\t>>> count_no_of_ways(4, 4)\n\t228\n\t\"\"\"\n", "canonical_solution": "\t \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]", "entry_point": "count_no_of_ways", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2, 4) == 16\n    assert candidate(3, 2) == 6\n    assert candidate(4, 4) == 228\n\n", "language": "python", "description": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors."}
{"task_id": "MBPP/292", "prompt": "\n\ndef find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers.\n    >>> find(10,3)\n    3\n    >>> find(4,2)\n    2\n    >>> find(20,5)\n    4\n    \"\"\"\n", "canonical_solution": "      \n    q = n//m \n    return (q)", "entry_point": "find", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,3) == 3\n    assert candidate(4,2) == 2\n    assert candidate(20,5) == 4\n\n", "language": "python", "description": "Write a python function to find quotient of two numbers."}
{"task_id": "MBPP/293", "prompt": "\n\ndef otherside_rightangle(w,h):\n  \"\"\"\n  Write a function to find the third side of a right angled triangle.\n  >>> otherside_rightangle(7,8)\n  10.63014581273465\n  >>> otherside_rightangle(3,4)\n  5\n  >>> otherside_rightangle(7,15)\n  16.55294535724685\n  \"\"\"\n", "canonical_solution": "  import math\n  \n  s=math.sqrt((w*w)+(h*h))\n  return s", "entry_point": "otherside_rightangle", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(7,8)==10.63014581273465\n    assert candidate(3,4)==5\n    assert candidate(7,15)==16.55294535724685\n\n", "language": "python", "description": "Write a function to find the third side of a right angled triangle."}
{"task_id": "MBPP/294", "prompt": "\n\ndef max_val(listval):\n     \"\"\"\n     Write a function to find the maximum value in a given heterogeneous list.\n     >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n     5\n     >>> max_val(['Python', 15, 20, 25])\n     25\n     >>> max_val(['Python', 30, 20, 40, 50, 'version'])\n     50\n     \"\"\"\n", "canonical_solution": "     \n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)", "entry_point": "max_val", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==5\n    assert candidate(['Python', 15, 20, 25])==25\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==50\n\n", "language": "python", "description": "Write a function to find the maximum value in a given heterogeneous list."}
{"task_id": "MBPP/295", "prompt": "\n\ndef sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    >>> sum_div(8)\n    7\n    >>> sum_div(12)\n    16\n    >>> sum_div(7)\n    1\n    \"\"\"\n", "canonical_solution": "    \n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)", "entry_point": "sum_div", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8)==7\n    assert candidate(12)==16\n    assert candidate(7)==1\n\n", "language": "python", "description": "Write a function to return the sum of all divisors of a number."}
{"task_id": "MBPP/296", "prompt": "\n\ndef get_Inv_Count(arr,n):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    >>> get_Inv_Count([1,20,6,4,5],5)\n    5\n    >>> get_Inv_Count([1,2,1],3)\n    1\n    >>> get_Inv_Count([1,2,5,6,1],5)\n    3\n    \"\"\"\n", "canonical_solution": "     \n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ", "entry_point": "get_Inv_Count", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,20,6,4,5],5) == 5\n    assert candidate([1,2,1],3) == 1\n    assert candidate([1,2,5,6,1],5) == 3\n\n", "language": "python", "description": "Write a python function to count inversions in an array."}
{"task_id": "MBPP/297", "prompt": "\n\ndef flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n    [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    >>> flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n    [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    >>> flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n    [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n    \"\"\"\n", "canonical_solution": "    \n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ", "entry_point": "flatten_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n\n", "language": "python", "description": "Write a function to flatten a given nested list structure."}
{"task_id": "MBPP/298", "prompt": "\n\ndef intersection_nested_lists(l1, l2):\n    \"\"\"\n    Write a function to find the nested list elements which are present in another list.\n    >>> intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n    [[12], [7, 11], [1, 5, 8]]\n    >>> intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n    [[], []]\n    >>> intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])\n    [['john'], ['john'], ['john'], []]\n    \"\"\"\n", "canonical_solution": "    \n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result", "entry_point": "intersection_nested_lists", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n    assert candidate([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\n    assert candidate(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]\n\n", "language": "python", "description": "Write a function to find the nested list elements which are present in another list."}
{"task_id": "MBPP/299", "prompt": "\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    >>> max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])\n    ('Juan Whelan', 212)\n    >>> max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])\n    ('Juan Whelan', 72)\n    >>> max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])\n    ('Sabah Colley', 70)\n    \"\"\"\n", "canonical_solution": "    from collections import defaultdict\n    \n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])", "entry_point": "max_aggregate", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert candidate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n    assert candidate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n\n", "language": "python", "description": "Write a function to calculate the maximum aggregate from the list of tuples."}
{"task_id": "MBPP/300", "prompt": "\n\ndef count_binary_seq(n):\n\t\"\"\"\n\tWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\t>>> count_binary_seq(1)\n\t2.0\n\t>>> count_binary_seq(2)\n\t6.0\n\t>>> count_binary_seq(3)\n\t20.0\n\t\"\"\"\n", "canonical_solution": "\t \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ", "entry_point": "count_binary_seq", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2.0\n    assert candidate(2) == 6.0\n    assert candidate(3) == 20.0\n\n", "language": "python", "description": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits."}
{"task_id": "MBPP/301", "prompt": "\n\ndef dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    >>> dict_depth({'a':1, 'b': {'c':'python'}})\n    2\n    >>> dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})\n    3\n    \"\"\"\n", "canonical_solution": "    \n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0", "entry_point": "dict_depth", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'a':1, 'b': {'c': {'d': {}}}})==4\n    assert candidate({'a':1, 'b': {'c':'python'}})==2\n    assert candidate({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n\n", "language": "python", "description": "Write a function to find the depth of a dictionary."}
{"task_id": "MBPP/302", "prompt": "\n\ndef set_Bit_Number(n):\n    \"\"\"\n    Write a python function to find the most significant bit number which is also a set bit.\n    >>> set_Bit_Number(6)\n    4\n    >>> set_Bit_Number(10)\n    8\n    >>> set_Bit_Number(18)\n    16\n    \"\"\"\n", "canonical_solution": "     \n    if (n == 0): \n        return 0; \n    msb = 0; \n    n = int(n / 2); \n    while (n > 0): \n        n = int(n / 2); \n        msb += 1; \n    return (1 << msb)", "entry_point": "set_Bit_Number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == 4\n    assert candidate(10) == 8\n    assert candidate(18) == 16\n\n", "language": "python", "description": "Write a python function to find the most significant bit number which is also a set bit."}
{"task_id": "MBPP/303", "prompt": "\n\ndef solve(a,n):\n    \"\"\"\n    Write a python function to check whether the count of inversion of two types are same or not.\n    >>> solve([1,0,2],3)\n    True\n    >>> solve([1,2,0],3)\n    False\n    >>> solve([1,2,1],3)\n    True\n    \"\"\"\n", "canonical_solution": "    import sys \n       \n    mx = -sys.maxsize - 1\n    for j in range(1,n):  \n        if (mx > a[j]):  \n            return False  \n        mx = max(mx,a[j - 1])    \n    return True", "entry_point": "solve", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,0,2],3) == True\n    assert candidate([1,2,0],3) == False\n    assert candidate([1,2,1],3) == True\n\n", "language": "python", "description": "Write a python function to check whether the count of inversion of two types are same or not."}
{"task_id": "MBPP/304", "prompt": "\n\ndef find_Element(arr,ranges,rotations,index) :\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    >>> find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1)\n    3\n    >>> find_Element([1,2,3,4],[[0,1],[0,2]],1,2)\n    3\n    >>> find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1)\n    1\n    \"\"\"\n", "canonical_solution": "      \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ", "entry_point": "find_Element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    assert candidate([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n    assert candidate([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\n\n", "language": "python", "description": "Write a python function to find element at a given index after number of rotations."}
{"task_id": "MBPP/305", "prompt": "\n\ndef start_withp(words):\n \"\"\"\n Write a function to match two words from a list of words starting with letter 'p'.\n >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n ('Python', 'PHP')\n >>> start_withp([\"Python Programming\",\"Java Programming\"])\n ('Python','Programming')\n >>> start_withp([\"Pqrst Pqr\",\"qrstuv\"])\n ('Pqrst','Pqr')\n \"\"\"\n", "canonical_solution": " import re\n \n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()", "entry_point": "start_withp", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n    assert candidate([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\n    assert candidate([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n\n", "language": "python", "description": "Write a function to match two words from a list of words starting with letter 'p'."}
{"task_id": "MBPP/306", "prompt": "\n\ndef max_sum_increasing_subseq(a, n, index, k):\n\t\"\"\"\n\tWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n\t>>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)\n\t11\n\t>>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5)\n\t7\n\t>>> max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)\n\t71\n\t\"\"\"\n", "canonical_solution": "\t\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]", "entry_point": "max_sum_increasing_subseq", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n\n", "language": "python", "description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i ."}
{"task_id": "MBPP/307", "prompt": "\n\ndef colon_tuplex(tuplex,m,n):\n  \"\"\"\n  Write a function to get a colon of a tuple.\n  >>> colon_tuplex((\"HELLO\", 5, [], True) ,2,50)\n  (\"HELLO\", 5, [50], True)\n  >>> colon_tuplex((\"HELLO\", 5, [], True) ,2,100)\n  ((\"HELLO\", 5, [100],True))\n  >>> colon_tuplex((\"HELLO\", 5, [], True) ,2,500)\n  (\"HELLO\", 5, [500], True)\n  \"\"\"\n", "canonical_solution": "  from copy import deepcopy\n  \n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon", "entry_point": "colon_tuplex", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n    assert candidate((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\n    assert candidate((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)\n\n", "language": "python", "description": "Write a function to get a colon of a tuple."}
{"task_id": "MBPP/308", "prompt": "\n\ndef large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists.\n    >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n    [60, 54, 50]\n    >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)\n    [60, 54, 50, 48]\n    >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)\n    [60, 54, 50, 48, 45]\n    \"\"\"\n", "canonical_solution": "    \n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "entry_point": "large_product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n\n", "language": "python", "description": "Write a function to find the specified number of largest products from two given lists."}
{"task_id": "MBPP/309", "prompt": "\n\ndef maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    >>> maximum(5,10)\n    10\n    >>> maximum(-1,-2)\n    -1\n    >>> maximum(9,7)\n    9\n    \"\"\"\n", "canonical_solution": "       \n    if a >= b: \n        return a \n    else: \n        return b ", "entry_point": "maximum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5,10) == 10\n    assert candidate(-1,-2) == -1\n    assert candidate(9,7) == 9\n\n", "language": "python", "description": "Write a python function to find the maximum of two numbers."}
{"task_id": "MBPP/310", "prompt": "\n\ndef string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple.\n    >>> string_to_tuple(\"python 3.0\")\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    >>> string_to_tuple(\"item1\")\n    ('i', 't', 'e', 'm', '1')\n    >>> string_to_tuple(\"15.10\")\n    ('1', '5', '.', '1', '0')\n    \"\"\"\n", "canonical_solution": "    \n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "entry_point": "string_to_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert candidate(\"item1\")==('i', 't', 'e', 'm', '1')\n    assert candidate(\"15.10\")==('1', '5', '.', '1', '0')\n\n", "language": "python", "description": "Write a function to convert a given string to a tuple."}
{"task_id": "MBPP/311", "prompt": "\n\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    >>> set_left_most_unset_bit(10)\n    14\n    >>> set_left_most_unset_bit(12)\n    14\n    >>> set_left_most_unset_bit(15)\n    15\n    \"\"\"\n", "canonical_solution": "     \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ", "entry_point": "set_left_most_unset_bit", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 14\n    assert candidate(12) == 14\n    assert candidate(15) == 15\n\n", "language": "python", "description": "Write a python function to set the left most unset bit."}
{"task_id": "MBPP/312", "prompt": "\n\ndef volume_cone(r,h):\n  \"\"\"\n  Write a function to find the volume of a cone.\n  >>> volume_cone(5,12)\n  314.15926535897927\n  >>> volume_cone(10,15)\n  1570.7963267948965\n  >>> volume_cone(19,17)\n  6426.651371693521\n  \"\"\"\n", "canonical_solution": "  import math\n  \n  volume = (1.0/3) * math.pi * r * r * h\n  return volume", "entry_point": "volume_cone", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5,12)==314.15926535897927\n    assert candidate(10,15)==1570.7963267948965\n    assert candidate(19,17)==6426.651371693521\n\n", "language": "python", "description": "Write a function to find the volume of a cone."}
{"task_id": "MBPP/313", "prompt": "\n\ndef pos_nos(list1):\n  \"\"\"\n  Write a python function to print positive numbers in a list.\n  >>> pos_nos([-1,-2,1,2])\n  1,2\n  >>> pos_nos([3,4,-5])\n  3,4\n  >>> pos_nos([-2,-3,1])\n  1\n  \"\"\"\n", "canonical_solution": "  \n  for num in list1: \n    if num >= 0: \n       return num ", "entry_point": "pos_nos", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1,-2,1,2]) == 1,2\n    assert candidate([3,4,-5]) == 3,4\n    assert candidate([-2,-3,1]) == 1\n\n", "language": "python", "description": "Write a python function to print positive numbers in a list."}
{"task_id": "MBPP/314", "prompt": "\n\ndef max_sum_rectangular_grid(grid, n) :\n\t\"\"\"\n\tWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\t>>> max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3)\n\t7\n\t>>> max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5)\n\t24\n\t>>> max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5)\n\t81\n\t\"\"\"\n", "canonical_solution": "\t \n\tincl = max(grid[0][0], grid[1][0]) \n\texcl = 0\n\tfor i in range(1, n) : \n\t\texcl_new = max(excl, incl) \n\t\tincl = excl + max(grid[0][i], grid[1][i]) \n\t\texcl = excl_new \n\treturn max(excl, incl)", "entry_point": "max_sum_rectangular_grid", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n    assert candidate([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\n    assert candidate([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81\n\n", "language": "python", "description": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n."}
{"task_id": "MBPP/315", "prompt": "\n\ndef find_Max_Len_Even(str):\n    \"\"\"\n    Write a python function to find the first maximum length of even word.\n    >>> find_Max_Len_Even(\"python language\")\n    \"language\"\n    >>> find_Max_Len_Even(\"maximum even length\")\n    \"length\"\n    >>> find_Max_Len_Even(\"eve\")\n    \"-1\"\n    \"\"\"\n", "canonical_solution": "     \n    n = len(str) \n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while (i < n): \n        if (str[i] == ' '): \n            if (currlen % 2 == 0): \n                if (maxlen < currlen): \n                    maxlen = currlen \n                    st = i - currlen \n            currlen = 0 \n        else : \n            currlen += 1\n        i += 1\n    if (currlen % 2 == 0): \n        if (maxlen < currlen): \n            maxlen = currlen \n            st = i - currlen \n    if (st == -1): \n        return \"-1\" \n    return str[st: st + maxlen] ", "entry_point": "find_Max_Len_Even", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"python language\") == \"language\"\n    assert candidate(\"maximum even length\") == \"length\"\n    assert candidate(\"eve\") == \"-1\"\n\n", "language": "python", "description": "Write a python function to find the first maximum length of even word."}
{"task_id": "MBPP/316", "prompt": "\n\ndef find_last_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    >>> find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    3\n    >>> find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)\n    9\n    >>> find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)\n    6\n    \"\"\"\n", "canonical_solution": "    \n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result ", "entry_point": "find_last_occurrence", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n    assert candidate([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\n    assert candidate([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6\n\n", "language": "python", "description": "Write a function to find the index of the last occurrence of a given number in a sorted array."}
{"task_id": "MBPP/317", "prompt": "\n\ndef modified_encode(alist):\n        \"\"\"\n        Write a function to reflect the modified run-length encoding from a list.\n        >>> modified_encode([1,1,2,3,4,4,5,1])\n        [[2, 1], 2, 3, [2, 4], 5, 1]\n        >>> modified_encode('automatically')\n        ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n        >>> modified_encode('python')\n        ['p', 'y', 't', 'h', 'o', 'n']\n        \"\"\"\n", "canonical_solution": "        from itertools import groupby\n        \n        def ctr_ele(el):\n            if len(el)>1: return [len(el), el[0]]\n            else: return el[0]\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]", "entry_point": "modified_encode", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n    assert candidate('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n    assert candidate('python')==['p', 'y', 't', 'h', 'o', 'n']\n\n", "language": "python", "description": "Write a function to reflect the modified run-length encoding from a list."}
{"task_id": "MBPP/318", "prompt": "\n\ndef max_volume (s):\n    \"\"\"\n    Write a python function to find the maximum volume of a cuboid with given sum of sides.\n    >>> max_volume(8)\n    18\n    >>> max_volume(4)\n    2\n    >>> max_volume(1)\n    0\n    \"\"\"\n", "canonical_solution": "     \n    maxvalue = 0\n    i = 1\n    for i in range(s - 1): \n        j = 1\n        for j in range(s): \n            k = s - i - j \n            maxvalue = max(maxvalue, i * j * k)         \n    return maxvalue ", "entry_point": "max_volume", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8) == 18\n    assert candidate(4) == 2\n    assert candidate(1) == 0\n\n", "language": "python", "description": "Write a python function to find the maximum volume of a cuboid with given sum of sides."}
{"task_id": "MBPP/319", "prompt": "\n\ndef find_long_word(text):\n  \"\"\"\n  Write a function to find all five characters long word in the given string by using regex.\n  >>> find_long_word('Please move back to strem')\n  ['strem']\n  >>> find_long_word('4K Ultra HD streaming player')\n  ['Ultra']\n  >>> find_long_word('Streaming Media Player')\n  ['Media']\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  return (re.findall(r\"\\b\\w{5}\\b\", text))", "entry_point": "find_long_word", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('Please move back to strem') == ['strem']\n    assert candidate('4K Ultra HD streaming player') == ['Ultra']\n    assert candidate('Streaming Media Player') == ['Media']\n\n", "language": "python", "description": "Write a function to find all five characters long word in the given string by using regex."}
{"task_id": "MBPP/320", "prompt": "\n\ndef sum_difference(n):\n    \"\"\"\n    Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    >>> sum_difference(12)\n    5434\n    >>> sum_difference(20)\n    41230\n    >>> sum_difference(54)\n    2151270\n    \"\"\"\n", "canonical_solution": "    \n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n+1):\n        sumofsquares += num * num\n        squareofsum += num\n    squareofsum = squareofsum ** 2\n    return squareofsum - sumofsquares", "entry_point": "sum_difference", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12)==5434\n    assert candidate(20)==41230\n    assert candidate(54)==2151270\n\n", "language": "python", "description": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers."}
{"task_id": "MBPP/321", "prompt": "\n\ndef find_demlo(s):\n\t\"\"\"\n\tWrite a function to find the demlo number for the given number.\n\t>>> find_demlo(\"111111\")\n\t'12345654321'\n\t>>> find_demlo(\"1111\")\n\t'1234321'\n\t>>> find_demlo(\"13333122222\")\n\t'123456789101110987654321'\n\t\"\"\"\n", "canonical_solution": "\t \n\tl = len(s) \n\tres = \"\" \n\tfor i in range(1,l+1): \n\t\tres = res + str(i) \n\tfor i in range(l-1,0,-1): \n\t\tres = res + str(i) \n\treturn res \t", "entry_point": "find_demlo", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"111111\") == '12345654321'\n    assert candidate(\"1111\") == '1234321'\n    assert candidate(\"13333122222\") == '123456789101110987654321'\n\n", "language": "python", "description": "Write a function to find the demlo number for the given number."}
{"task_id": "MBPP/322", "prompt": "\n\ndef position_min(list1):\n    \"\"\"\n    Write a function to find all index positions of the minimum values in a given list.\n    >>> position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])\n    [3,11]\n    >>> position_min([1,2,2,2,4,4,4,5,5,5,5])\n    [0]\n    >>> position_min([2,1,5,6,8,3,4,9,10,11,8,12])\n    [1]\n    \"\"\"\n", "canonical_solution": "    \n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result", "entry_point": "position_min", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==[0]\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==[1]\n\n", "language": "python", "description": "Write a function to find all index positions of the minimum values in a given list."}
{"task_id": "MBPP/323", "prompt": "\n\ndef re_arrange(arr, n):\n\t\"\"\"\n\tWrite a function to re-arrange the given array in alternating positive and negative items.\n\t>>> re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10)\n\t[-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\t>>> re_arrange([1, 2, 3, -4, -1, 4], 6)\n\t[-4, 1, -1, 2, 3, 4]\n\t>>> re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8)\n\t[-4, 4, -3, 7, -9, 9, 77, 5]\n\t\"\"\"\n", "canonical_solution": "\tdef right_rotate(arr, n, out_of_place, cur):\n\t\ttemp = arr[cur]\n\t\tfor i in range(cur, out_of_place, -1):\n\t\t\tarr[i] = arr[i - 1]\n\t\tarr[out_of_place] = temp\n\t\treturn arr\n\t\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index-out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = - 1\n\t\tif (out_of_place == -1):\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\n\t\t\t\tout_of_place = index\n\treturn arr", "entry_point": "re_arrange", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n    assert candidate([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\n    assert candidate([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]\n\n", "language": "python", "description": "Write a function to re-arrange the given array in alternating positive and negative items."}
{"task_id": "MBPP/324", "prompt": "\n\ndef sum_of_alternates(test_tuple):\n  \"\"\"\n  Write a function to extract the sum of alternate chains of tuples.\n  >>> sum_of_alternates((5, 6, 3, 6, 10, 34))\n  (46, 18)\n  >>> sum_of_alternates((1, 2, 3, 4, 5))\n  (6, 9)\n  >>> sum_of_alternates((6, 7, 8, 9, 4, 5))\n  (21, 18)\n  \"\"\"\n", "canonical_solution": "  \n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return ((sum1),(sum2)) ", "entry_point": "sum_of_alternates", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((5, 6, 3, 6, 10, 34)) == (46, 18)\n    assert candidate((1, 2, 3, 4, 5)) == (6, 9)\n    assert candidate((6, 7, 8, 9, 4, 5)) == (21, 18)\n\n", "language": "python", "description": "Write a function to extract the sum of alternate chains of tuples."}
{"task_id": "MBPP/325", "prompt": "\n\ndef get_Min_Squares(n):\n    \"\"\"\n    Write a python function to find the minimum number of squares whose sum is equal to a given number.\n    >>> get_Min_Squares(6)\n    3\n    >>> get_Min_Squares(2)\n    2\n    >>> get_Min_Squares(4)\n    1\n    \"\"\"\n", "canonical_solution": "    \n    if n <= 3:\n        return n;\n    res = n \n    for x in range(1,n + 1):\n        temp = x * x;\n        if temp > n:\n            break\n        else:\n            res = min(res,1 + get_Min_Squares(n  - temp)) \n    return res;", "entry_point": "get_Min_Squares", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == 3\n    assert candidate(2) == 2\n    assert candidate(4) == 1\n\n", "language": "python", "description": "Write a python function to find the minimum number of squares whose sum is equal to a given number."}
{"task_id": "MBPP/326", "prompt": "\n\ndef most_occurrences(test_list):\n  \"\"\"\n  Write a function to get the word with most number of occurrences in the given strings list.\n  >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] )\n  'UTS'\n  >>> most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] )\n  'year'\n  >>> most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] )\n  'can'\n  \"\"\"\n", "canonical_solution": "  from collections import defaultdict \n  \n  \n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res)) ", "entry_point": "most_occurrences", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n    assert candidate([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\n    assert candidate([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'\n\n", "language": "python", "description": "Write a function to get the word with most number of occurrences in the given strings list."}
{"task_id": "MBPP/327", "prompt": "\n\ndef check_isosceles(x,y,z):\n  \"\"\"\n  Write a function to print check if the triangle is isosceles or not.\n  >>> check_isosceles(6,8,12)\n  False\n  >>> check_isosceles(6,6,12)\n  True\n  >>> check_isosceles(6,16,20)\n  False\n  \"\"\"\n", "canonical_solution": "  \n  if x==y or y==z or z==x:\n\t   return True\n  else:\n     return False", "entry_point": "check_isosceles", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6,8,12)==False \n    assert candidate(6,6,12)==True\n    assert candidate(6,16,20)==False\n\n", "language": "python", "description": "Write a function to print check if the triangle is isosceles or not."}
{"task_id": "MBPP/328", "prompt": "\n\ndef rotate_left(list1,m,n):\n  \"\"\"\n  Write a function to rotate a given list by specified number of items to the left direction.\n  >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)\n  [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n  >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)\n  [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n  >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)\n  [6, 7, 8, 9, 10, 1, 2]\n  \"\"\"\n", "canonical_solution": "  \n  result =  list1[m:]+list1[:n]\n  return result", "entry_point": "rotate_left", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]\n\n", "language": "python", "description": "Write a function to rotate a given list by specified number of items to the left direction."}
{"task_id": "MBPP/329", "prompt": "\n\ndef neg_count(list):\n  \"\"\"\n  Write a python function to count negative numbers in a list.\n  >>> neg_count([-1,-2,3,-4,-5])\n  4\n  >>> neg_count([1,2,3])\n  0\n  >>> neg_count([1,2,-3,-10,20])\n  2\n  \"\"\"\n", "canonical_solution": "  \n  neg_count= 0\n  for num in list: \n    if num <= 0: \n      neg_count += 1\n  return neg_count ", "entry_point": "neg_count", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1,-2,3,-4,-5]) == 4\n    assert candidate([1,2,3]) == 0\n    assert candidate([1,2,-3,-10,20]) == 2\n\n", "language": "python", "description": "Write a python function to count negative numbers in a list."}
{"task_id": "MBPP/330", "prompt": "\n\ndef find_char(text):\n  \"\"\"\n  Write a function to find all three, four, five characters long words in the given string by using regex.\n  >>> find_char('For the four consumer complaints contact manager AKR reddy')\n  ['For', 'the', 'four', 'AKR', 'reddy']\n  >>> find_char('Certain service are subject to change MSR')\n  ['are', 'MSR']\n  >>> find_char('Third party legal desclaimers')\n  ['Third', 'party', 'legal']\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))", "entry_point": "find_char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n    assert candidate('Certain service are subject to change MSR') == ['are', 'MSR']\n    assert candidate('Third party legal desclaimers') == ['Third', 'party', 'legal']\n\n", "language": "python", "description": "Write a function to find all three, four, five characters long words in the given string by using regex."}
{"task_id": "MBPP/331", "prompt": "\n\ndef count_unset_bits(n):\n    \"\"\"\n    Write a python function to count unset bits of a given number.\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(4)\n    2\n    >>> count_unset_bits(6)\n    1\n    \"\"\"\n", "canonical_solution": "     \n    count = 0\n    x = 1\n    while(x < n + 1): \n        if ((x & n) == 0): \n            count += 1\n        x = x << 1\n    return count  ", "entry_point": "count_unset_bits", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 2\n    assert candidate(6) == 1\n\n", "language": "python", "description": "Write a python function to count unset bits of a given number."}
{"task_id": "MBPP/332", "prompt": "\n\ndef char_frequency(str1):\n    \"\"\"\n    Write a function to count character frequency of a given string.\n    >>> char_frequency('python')\n    {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    >>> char_frequency('program')\n    {'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n    >>> char_frequency('language')\n    {'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}\n    \"\"\"\n", "canonical_solution": "    \n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict", "entry_point": "char_frequency", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert candidate('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n    assert candidate('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}\n\n", "language": "python", "description": "Write a function to count character frequency of a given string."}
{"task_id": "MBPP/333", "prompt": "\n\ndef Sort(sub_li):\n    \"\"\"\n    Write a python function to sort a list according to the second element in sublist.\n    >>> Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]])\n    [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n    >>> Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]])\n    [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n    >>> Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]])\n    [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]\n    \"\"\"\n", "canonical_solution": "     \n    sub_li.sort(key = lambda x: x[1]) \n    return sub_li ", "entry_point": "Sort", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n    assert candidate([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n    assert candidate([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]\n\n", "language": "python", "description": "Write a python function to sort a list according to the second element in sublist."}
{"task_id": "MBPP/334", "prompt": "\n\ndef check_Validity(a,b,c):\n    \"\"\"\n    Write a python function to check whether the triangle is valid or not if sides are given.\n    >>> check_Validity(1,2,3)\n    False\n    >>> check_Validity(2,3,5)\n    False\n    >>> check_Validity(7,10,5)\n    True\n    \"\"\"\n", "canonical_solution": "      \n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return False\n    else: \n        return True        ", "entry_point": "check_Validity", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,2,3) == False\n    assert candidate(2,3,5) == False\n    assert candidate(7,10,5) == True\n\n", "language": "python", "description": "Write a python function to check whether the triangle is valid or not if sides are given."}
{"task_id": "MBPP/335", "prompt": "\n\ndef ap_sum(a,n,d):\n  \"\"\"\n  Write a function to find the sum of arithmetic progression.\n  >>> ap_sum(1,5,2)\n  25\n  >>> ap_sum(2,6,4)\n  72\n  >>> ap_sum(1,4,5)\n  34\n  \"\"\"\n", "canonical_solution": "  \n  total = (n * (2 * a + (n - 1) * d)) / 2\n  return total", "entry_point": "ap_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,5,2)==25\n    assert candidate(2,6,4)==72\n    assert candidate(1,4,5)==34\n\n", "language": "python", "description": "Write a function to find the sum of arithmetic progression."}
{"task_id": "MBPP/336", "prompt": "\n\ndef check_monthnum(monthname1):\n  \"\"\"\n  Write a function to check whether the given month name contains 28 days or not.\n  >>> check_monthnum(\"February\")\n  True\n  >>> check_monthnum(\"January\")\n  False\n  >>> check_monthnum(\"March\")\n  False\n  \"\"\"\n", "canonical_solution": "  \n  if monthname1 == \"February\":\n    return True\n  else:\n    return False", "entry_point": "check_monthnum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"February\")==True\n    assert candidate(\"January\")==False\n    assert candidate(\"March\")==False\n\n", "language": "python", "description": "Write a function to check whether the given month name contains 28 days or not."}
{"task_id": "MBPP/337", "prompt": "\n\ndef text_match_word(text):\n        \"\"\"\n        Write a function that matches a word at the end of a string, with optional punctuation.\n        >>> text_match_word(\"python.\")\n        ('Found a match!')\n        >>> text_match_word(\"python.\")\n        ('Found a match!')\n        >>> text_match_word(\"  lang  .\")\n        ('Not matched!')\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        patterns = '\\w+\\S*$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'", "entry_point": "text_match_word", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"python.\")==('Found a match!')\n    assert candidate(\"python.\")==('Found a match!')\n    assert candidate(\"  lang  .\")==('Not matched!')\n\n", "language": "python", "description": "Write a function that matches a word at the end of a string, with optional punctuation."}
{"task_id": "MBPP/338", "prompt": "\n\ndef count_Substring_With_Equal_Ends(s):\n    \"\"\"\n    Write a python function to count the number of substrings with same first and last characters.\n    >>> count_Substring_With_Equal_Ends('aba')\n    4\n    >>> count_Substring_With_Equal_Ends('abcab')\n    7\n    >>> count_Substring_With_Equal_Ends('abc')\n    3\n    \"\"\"\n", "canonical_solution": "    def check_Equality(s): \n        return (ord(s[0]) == ord(s[len(s) - 1])); \n     \n    result = 0; \n    n = len(s); \n    for i in range(n):\n        for j in range(1,n-i+1): \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result; ", "entry_point": "count_Substring_With_Equal_Ends", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('aba') == 4\n    assert candidate('abcab') == 7\n    assert candidate('abc') == 3\n\n", "language": "python", "description": "Write a python function to count the number of substrings with same first and last characters."}
{"task_id": "MBPP/339", "prompt": "\n\ndef find_Divisor(x,y):\n    \"\"\"\n    Write a python function to find the maximum occuring divisor in an interval.\n    >>> find_Divisor(2,2)\n    2\n    >>> find_Divisor(2,5)\n    2\n    >>> find_Divisor(5,10)\n    2\n    \"\"\"\n", "canonical_solution": "      \n    if (x==y): \n        return y \n    return 2", "entry_point": "find_Divisor", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2,2) == 2\n    assert candidate(2,5) == 2\n    assert candidate(5,10) == 2\n\n", "language": "python", "description": "Write a python function to find the maximum occuring divisor in an interval."}
{"task_id": "MBPP/340", "prompt": "\n\ndef sum_three_smallest_nums(lst):\n\t\"\"\"\n\tWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\t>>> sum_three_smallest_nums([10,20,30,40,50,60,7])\n\t37\n\t>>> sum_three_smallest_nums([1,2,3,4,5])\n\t6\n\t>>> sum_three_smallest_nums([0,1,2,3,4,5])\n\t6\n\t\"\"\"\n", "canonical_solution": "\t\n\treturn sum(sorted([x for x in lst if x > 0])[:3])", "entry_point": "sum_three_smallest_nums", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10,20,30,40,50,60,7]) == 37\n    assert candidate([1,2,3,4,5]) == 6\n    assert candidate([0,1,2,3,4,5]) == 6\n\n", "language": "python", "description": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers."}
{"task_id": "MBPP/341", "prompt": "\n\ndef set_to_tuple(s):\n  \"\"\"\n  Write a function to convert the given set into tuples.\n  >>> set_to_tuple({1, 2, 3, 4, 5})\n  (1, 2, 3, 4, 5)\n  >>> set_to_tuple({6, 7, 8, 9, 10, 11})\n  (6, 7, 8, 9, 10, 11)\n  >>> set_to_tuple({12, 13, 14, 15, 16})\n  (12, 13, 14, 15, 16)\n  \"\"\"\n", "canonical_solution": "  \n  t = tuple(s)\n  return (t)", "entry_point": "set_to_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n    assert candidate({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\n    assert candidate({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)\n\n", "language": "python", "description": "Write a function to convert the given set into ordered tuples."}
{"task_id": "MBPP/342", "prompt": "\n\ndef find_minimum_range(list):\n    \"\"\"\n    Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    >>> find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])\n    (4, 6)\n    >>> find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]])\n    (4, 7)\n    >>> find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])\n    (5, 7)\n    \"\"\"\n", "canonical_solution": "    from heapq import heappop, heappush\n    class Node:\n        def __init__(self, value, list_num, index):\n            self.value = value\n            self.list_num = list_num\n            self.index = index\n        def __lt__(self, other):\n            return self.value < other.value\n    \n    high = float('-inf')\n    p = (0, float('inf'))\n    pq = []\n    for i in range(len(list)):\n        heappush(pq, Node(list[i][0], i, 0))\n        high = max(high, list[i][0])\n    while True:\n        top = heappop(pq)\n        low = top.value\n        i = top.list_num\n        j = top.index\n        if high - low < p[1] - p[0]:\n            p = (low, high)\n        if j == len(list[i]) - 1:\n            return p\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\n        high = max(high, list[i][j + 1])", "entry_point": "find_minimum_range", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    assert candidate([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\n    assert candidate([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)\n\n", "language": "python", "description": "Write a function to find the smallest range that includes at-least one element from each of the given arrays."}
{"task_id": "MBPP/343", "prompt": "\n\ndef dig_let(s):\n \"\"\"\n Write a function to calculate the number of digits and letters in a string.\n >>> dig_let(\"python\")\n (6,0)\n >>> dig_let(\"program\")\n (7,0)\n >>> dig_let(\"python3.0\")\n (6,2)\n \"\"\"\n", "canonical_solution": " \n d=l=0\n for c in s:\n    if c.isdigit():\n        d=d+1\n    elif c.isalpha():\n        l=l+1\n    else:\n        pass\n return (l,d)", "entry_point": "dig_let", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"python\")==(6,0)\n    assert candidate(\"program\")==(7,0)\n    assert candidate(\"python3.0\")==(6,2)\n\n", "language": "python", "description": "Write a function to calculate the number of digits and letters in a string."}
{"task_id": "MBPP/344", "prompt": "\n\ndef count_Odd_Squares(n,m):\n    \"\"\"\n    Write a python function to find number of elements with odd factors in a given range.\n    >>> count_Odd_Squares(5,100)\n    8\n    >>> count_Odd_Squares(8,65)\n    6\n    >>> count_Odd_Squares(2,5)\n    1\n    \"\"\"\n", "canonical_solution": "     \n    return int(m**0.5) - int((n-1)**0.5) ", "entry_point": "count_Odd_Squares", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5,100) == 8\n    assert candidate(8,65) == 6\n    assert candidate(2,5) == 1\n\n", "language": "python", "description": "Write a python function to find number of elements with odd factors in a given range."}
{"task_id": "MBPP/345", "prompt": "\n\ndef diff_consecutivenums(nums):\n    \"\"\"\n    Write a function to find the difference between two consecutive numbers in a given list.\n    >>> diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])\n    [0, 2, 1, 0, 1, 1, 1]\n    >>> diff_consecutivenums([4, 5, 8, 9, 6, 10])\n    [1, 3, 1, -3, 4]\n    >>> diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])\n    [1, 1, 1, 1, 0, 0, 0, 1, 2]\n    \"\"\"\n", "canonical_solution": "    \n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "entry_point": "diff_consecutivenums", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n    assert candidate([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\n    assert candidate([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]\n\n", "language": "python", "description": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": "MBPP/346", "prompt": "\n\ndef zigzag(n, k):\n\t\"\"\"\n\tWrite a function to find entringer number e(n, k).\n\t>>> zigzag(4, 3)\n\t5\n\t>>> zigzag(4, 2)\n\t4\n\t>>> zigzag(3, 1)\n\t1\n\t\"\"\"\n", "canonical_solution": "\t \n\tif (n == 0 and k == 0): \n\t\treturn 1\n\tif (k == 0): \n\t\treturn 0\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)", "entry_point": "zigzag", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4, 3) == 5\n    assert candidate(4, 2) == 4\n    assert candidate(3, 1) == 1\n\n", "language": "python", "description": "Write a function to find entringer number e(n, k)."}
{"task_id": "MBPP/347", "prompt": "\n\ndef count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    >>> count_Squares(4,3)\n    20\n    >>> count_Squares(1,2)\n    2\n    >>> count_Squares(2,2)\n    5\n    \"\"\"\n", "canonical_solution": "     \n    if (n < m): \n        temp = m \n        m = n \n        n = temp \n    return n * (n + 1) * (3 * m - n + 1) // 6", "entry_point": "count_Squares", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4,3) == 20\n    assert candidate(1,2) == 2\n    assert candidate(2,2) == 5\n\n", "language": "python", "description": "Write a python function to count the number of squares in a rectangle."}
{"task_id": "MBPP/348", "prompt": "\n\ndef find_ways(M):\n\t\"\"\"\n\tWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\t>>> find_ways(4)\n\t2\n\t>>> find_ways(6)\n\t5\n\t>>> find_ways(8)\n\t14\n\t\"\"\"\n", "canonical_solution": "\tdef bin_coff(n, r): \n\t\tval = 1\n\t\tif (r > (n - r)): \n\t\t\tr = (n - r) \n\t\tfor i in range(0, r): \n\t\t\tval *= (n - i) \n\t\t\tval //= (i + 1) \n\t\treturn val \n\t \n\tn = M // 2\n\ta = bin_coff(2 * n, n) \n\tb = a // (n + 1) \n\treturn (b) ", "entry_point": "find_ways", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4) == 2\n    assert candidate(6) == 5\n    assert candidate(8) == 14\n\n", "language": "python", "description": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values."}
{"task_id": "MBPP/349", "prompt": "\n\ndef check(string) :\n    \"\"\"\n    Write a python function to check whether the given string is a binary string or not.\n    >>> check(\"01010101010\")\n    \"Yes\"\n    >>> check(\"name0\")\n    \"No\"\n    >>> check(\"101\")\n    \"Yes\"\n    \"\"\"\n", "canonical_solution": "    \n    p = set(string) \n    s = {'0', '1'} \n    if s == p or p == {'0'} or p == {'1'}: \n        return (\"Yes\") \n    else : \n        return (\"No\") ", "entry_point": "check", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"01010101010\") == \"Yes\"\n    assert candidate(\"name0\") == \"No\"\n    assert candidate(\"101\") == \"Yes\"\n\n", "language": "python", "description": "Write a python function to check whether the given string is a binary string or not."}
{"task_id": "MBPP/350", "prompt": "\n\ndef minimum_Length(s) :\n    \"\"\"\n    Write a python function to minimize the length of the string by removing occurrence of only one character.\n    >>> minimum_Length(\"mnm\")\n    1\n    >>> minimum_Length(\"abcda\")\n    3\n    >>> minimum_Length(\"abcb\")\n    2\n    \"\"\"\n", "canonical_solution": "     \n    maxOcc = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n) : \n        arr[ord(s[i]) -ord('a')] += 1\n    for i in range(26) : \n        if arr[i] > maxOcc : \n            maxOcc = arr[i] \n    return n - maxOcc ", "entry_point": "minimum_Length", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"mnm\") == 1\n    assert candidate(\"abcda\") == 3\n    assert candidate(\"abcb\") == 2\n\n", "language": "python", "description": "Write a python function to minimize the length of the string by removing occurrence of only one character."}
{"task_id": "MBPP/351", "prompt": "\n\ndef first_Element(arr,n,k):\n    \"\"\"\n    Write a python function to find the first element occurring k times in a given array.\n    >>> first_Element([0,1,2,3,4,5],6,1)\n    0\n    >>> first_Element([1,2,1,3,4],5,2)\n    1\n    >>> first_Element([2,3,4,3,5,7,1,2,3,5],10,2)\n    2\n    \"\"\"\n", "canonical_solution": "     \n    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):  \n        if (count_map[arr[i]] == k): \n            return arr[i] \n        i += 1 \n    return -1", "entry_point": "first_Element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([0,1,2,3,4,5],6,1) == 0\n    assert candidate([1,2,1,3,4],5,2) == 1\n    assert candidate([2,3,4,3,5,7,1,2,3,5],10,2) == 2\n\n", "language": "python", "description": "Write a python function to find the first element occurring k times in a given array."}
{"task_id": "MBPP/352", "prompt": "\n\ndef unique_Characters(str):\n    \"\"\"\n    Write a python function to check whether all the characters in a given string are unique.\n    >>> unique_Characters('aba')\n    False\n    >>> unique_Characters('abc')\n    True\n    >>> unique_Characters('abab')\n    False\n    \"\"\"\n", "canonical_solution": "    \n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n            if (str[i] == str[j]):\n                return False;\n    return True;", "entry_point": "unique_Characters", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('aba') == False\n    assert candidate('abc') == True\n    assert candidate('abab') == False\n\n", "language": "python", "description": "Write a python function to check whether all the characters in a given string are unique."}
{"task_id": "MBPP/353", "prompt": "\n\ndef remove_column(list1, n):\n   \"\"\"\n   Write a function to remove a specified column from a given nested list.\n   >>> remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)\n   [[2, 3], [4, 5], [1, 1]]\n   >>> remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)\n   [[1, 2], [-2, 4], [1, -1]]\n   >>> remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)\n   [[3], [7], [3], [15, 17], [7], [11]]\n   \"\"\"\n", "canonical_solution": "   \n   for i in list1: \n    del i[n] \n   return list1", "entry_point": "remove_column", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]\n\n", "language": "python", "description": "Write a function to remove a specified column from a given nested list."}
{"task_id": "MBPP/354", "prompt": "\n\ndef tn_ap(a,n,d):\n  \"\"\"\n  Write a function to find t-nth term of arithemetic progression.\n  >>> tn_ap(1,5,2)\n  9\n  >>> tn_ap(2,6,4)\n  22\n  >>> tn_ap(1,4,5)\n  16\n  \"\"\"\n", "canonical_solution": "  \n  tn = a + (n - 1) * d\n  return tn", "entry_point": "tn_ap", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,5,2)==9\n    assert candidate(2,6,4)==22\n    assert candidate(1,4,5)==16\n\n", "language": "python", "description": "Write a function to find t-nth term of arithemetic progression."}
{"task_id": "MBPP/355", "prompt": "\n\ndef count_Rectangles(radius):\n    \"\"\"\n    Write a python function to count the number of rectangles in a circle of radius r.\n    >>> count_Rectangles(2)\n    8\n    >>> count_Rectangles(1)\n    1\n    >>> count_Rectangles(0)\n    0\n    \"\"\"\n", "canonical_solution": "      \n    rectangles = 0 \n    diameter = 2 * radius \n    diameterSquare = diameter * diameter \n    for a in range(1, 2 * radius):  \n        for b in range(1, 2 * radius): \n            diagnalLengthSquare = (a * a +  b * b)  \n            if (diagnalLengthSquare <= diameterSquare) : \n                rectangles += 1\n    return rectangles ", "entry_point": "count_Rectangles", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 8\n    assert candidate(1) == 1\n    assert candidate(0) == 0\n\n", "language": "python", "description": "Write a python function to count the number of rectangles in a circle of radius r."}
{"task_id": "MBPP/356", "prompt": "\n\ndef find_angle(a,b):\n \"\"\"\n Write a function to find the third angle of a triangle using two angles.\n >>> find_angle(47,89)\n 44\n >>> find_angle(45,95)\n 40\n >>> find_angle(50,40)\n 90\n \"\"\"\n", "canonical_solution": " \n c = 180 - (a + b)\n return c\n", "entry_point": "find_angle", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(47,89)==44\n    assert candidate(45,95)==40\n    assert candidate(50,40)==90\n\n", "language": "python", "description": "Write a function to find the third angle of a triangle using two angles."}
{"task_id": "MBPP/357", "prompt": "\n\ndef find_max(test_list):\n  \"\"\"\n  Write a function to find the maximum element of all the given tuple records.\n  >>> find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n  10\n  >>> find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)])\n  11\n  >>> find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)])\n  12\n  \"\"\"\n", "canonical_solution": "  \n  res = max(int(j) for i in test_list for j in i)\n  return (res) ", "entry_point": "find_max", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12\n\n", "language": "python", "description": "Write a function to find the maximum element of all the given tuple records."}
{"task_id": "MBPP/358", "prompt": "\n\ndef moddiv_list(nums1,nums2):\n  \"\"\"\n  Write a function to find modulo division of two lists using map and lambda function.\n  >>> moddiv_list([4,5,6],[1, 2, 3])\n  [0, 1, 0]\n  >>> moddiv_list([3,2],[1,4])\n  [0, 2]\n  >>> moddiv_list([90,120],[50,70])\n  [40, 50]\n  \"\"\"\n", "canonical_solution": "  \n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)", "entry_point": "moddiv_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([4,5,6],[1, 2, 3])==[0, 1, 0]\n    assert candidate([3,2],[1,4])==[0, 2]\n    assert candidate([90,120],[50,70])==[40, 50]\n\n", "language": "python", "description": "Write a function to find modulo division of two lists using map and lambda function."}
{"task_id": "MBPP/359", "prompt": "\n\ndef Check_Solution(a,b,c):\n    \"\"\"\n    Write a python function to check whether one root of the quadratic equation is twice of the other or not.\n    >>> Check_Solution(1,3,2)\n    \"Yes\"\n    >>> Check_Solution(1,2,3)\n    \"No\"\n    >>> Check_Solution(1,-5,6)\n    \"No\"\n    \"\"\"\n", "canonical_solution": "     \n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n    else: \n        return (\"No\"); ", "entry_point": "Check_Solution", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,3,2) == \"Yes\"\n    assert candidate(1,2,3) == \"No\"\n    assert candidate(1,-5,6) == \"No\"\n\n", "language": "python", "description": "Write a python function to check whether one root of the quadratic equation is twice of the other or not."}
{"task_id": "MBPP/360", "prompt": "\n\ndef get_carol(n):\n\t\"\"\"\n\tWrite a function to find the n\u2019th carol number.\n\t>>> get_carol(2)\n\t7\n\t>>> get_carol(4)\n\t223\n\t>>> get_carol(5)\n\t959\n\t\"\"\"\n", "canonical_solution": "\t \n\tresult = (2**n) - 1\n\treturn result * result - 2", "entry_point": "get_carol", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 7\n    assert candidate(4) == 223\n    assert candidate(5) == 959\n\n", "language": "python", "description": "Write a function to find the n\u2019th carol number."}
{"task_id": "MBPP/361", "prompt": "\n\ndef remove_empty(list1):\n  \"\"\"\n  Write a function to remove empty lists from a given list of lists.\n  >>> remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])\n  ['Red', 'Green', [1, 2], 'Blue']\n  >>> remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])\n  [ 'Green', [1, 2], 'Blue']\n  >>> remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])\n  ['Python', 'programming', 'language']\n  \"\"\"\n", "canonical_solution": "  \n  remove_empty = [x for x in list1 if x]\n  return remove_empty", "entry_point": "remove_empty", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n    assert candidate([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\n    assert candidate([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']\n\n", "language": "python", "description": "Write a function to remove empty lists from a given list of lists."}
{"task_id": "MBPP/362", "prompt": "\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a python function to find the item with maximum occurrences in a given list.\n    >>> max_occurrences([1,2,3,1,2,3,12,4,2])\n    2\n    >>> max_occurrences([1,2,6,7,0,1,0,1,0])\n    1,0\n    >>> max_occurrences([1,2,3,1,2,4,1])\n    1\n    \"\"\"\n", "canonical_solution": "    \n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result", "entry_point": "max_occurrences", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,1,2,3,12,4,2]) ==  2\n    assert candidate([1,2,6,7,0,1,0,1,0]) == 1,0\n    assert candidate([1,2,3,1,2,4,1]) == 1\n\n", "language": "python", "description": "Write a python function to find the item with maximum occurrences in a given list."}
{"task_id": "MBPP/363", "prompt": "\n\ndef add_K_element(test_list, K):\n  \"\"\"\n  Write a function to add the k elements to each element in the tuple.\n  >>> add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)\n  [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n  >>> add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)\n  [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n  >>> add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)\n  [(20, 21, 22), (23, 24, 25), (26, 27, 28)]\n  \"\"\"\n", "canonical_solution": "  \n  res = [tuple(j + K for j in sub ) for sub in test_list]\n  return (res) ", "entry_point": "add_K_element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n    assert candidate([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n    assert candidate([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]\n\n", "language": "python", "description": "Write a function to add the k elements to each element in the tuple."}
{"task_id": "MBPP/364", "prompt": "\n\ndef min_flip_to_make_string_alternate(str):\n\t\"\"\"\n\tWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\t>>> min_flip_to_make_string_alternate(\"0001010111\")\n\t2\n\t>>> min_flip_to_make_string_alternate(\"001\")\n\t1\n\t>>> min_flip_to_make_string_alternate(\"010111011\")\n\t2\n\t\"\"\"\n", "canonical_solution": "\tdef make_flip(ch): \n\t\treturn '1' if (ch == '0') else '0'\n\tdef get_flip_with_starting_charcter(str, expected): \n\t\tflip_count = 0\n\t\tfor i in range(len( str)): \n\t\t\tif (str[i] != expected): \n\t\t\t\tflip_count += 1\n\t\t\texpected = make_flip(expected) \n\t\treturn flip_count \n\t \n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ", "entry_point": "min_flip_to_make_string_alternate", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"0001010111\") == 2\n    assert candidate(\"001\") == 1\n    assert candidate(\"010111011\") == 2 \n\n", "language": "python", "description": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters."}
{"task_id": "MBPP/365", "prompt": "\n\ndef count_Digit(n):\n    \"\"\"\n    Write a python function to count the number of digits of a given number.\n    >>> count_Digit(12345)\n    5\n    >>> count_Digit(11223305)\n    8\n    >>> count_Digit(4123459)\n    7\n    \"\"\"\n", "canonical_solution": "    \n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count", "entry_point": "count_Digit", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12345) == 5\n    assert candidate(11223305) == 8\n    assert candidate(4123459) == 7\n\n", "language": "python", "description": "Write a python function to count the number of digits of a given number."}
{"task_id": "MBPP/366", "prompt": "\n\ndef adjacent_num_product(list_nums):\n    \"\"\"\n    Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n    >>> adjacent_num_product([1,2,3,4,5,6])\n    30\n    >>> adjacent_num_product([1,2,3,4,5])\n    20\n    >>> adjacent_num_product([2,3])\n    6\n    \"\"\"\n", "canonical_solution": "    \n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "entry_point": "adjacent_num_product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6]) == 30\n    assert candidate([1,2,3,4,5]) == 20\n    assert candidate([2,3]) == 6\n\n", "language": "python", "description": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": "MBPP/367", "prompt": "\n\ndef is_tree_balanced(root):\n\t\"\"\"\n\tWrite a function to check if a binary tree is balanced or not.\n\t>>> is_tree_balanced(root)\n\tFalse\n\t>>> is_tree_balanced(root1)\n\tTrue\n\t>>> is_tree_balanced(root2)\n\tFalse\n\t\"\"\"\n", "canonical_solution": "\tclass Node: \n\t\tdef __init__(self, data): \n\t\t\tself.data = data \n\t\t\tself.left = None\n\t\t\tself.right = None\n\tdef get_height(root): \n\t\tif root is None: \n\t\t\treturn 0\n\t\treturn max(get_height(root.left), get_height(root.right)) + 1\n\t \n\tif root is None: \n\t\treturn True\n\tlh = get_height(root.left) \n\trh = get_height(root.right) \n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \n\troot.left) is True and is_tree_balanced( root.right) is True: \n\t\treturn True\n\treturn False", "entry_point": "is_tree_balanced", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(root) == False\n    assert candidate(root1) == True\n    assert candidate(root2) == False \n\n", "language": "python", "description": "Write a function to check if a binary tree is balanced or not."}
{"task_id": "MBPP/368", "prompt": "\n\ndef repeat_tuples(test_tup, N):\n  \"\"\"\n  Write a function to repeat the given tuple n times.\n  >>> repeat_tuples((1, 3), 4)\n  ((1, 3), (1, 3), (1, 3), (1, 3))\n  >>> repeat_tuples((1, 2), 3)\n  ((1, 2), (1, 2), (1, 2))\n  >>> repeat_tuples((3, 4), 5)\n  ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n  \"\"\"\n", "canonical_solution": "  \n  res = ((test_tup, ) * N)\n  return (res) ", "entry_point": "repeat_tuples", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n    assert candidate((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\n    assert candidate((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n\n", "language": "python", "description": "Write a function to repeat the given tuple n times."}
{"task_id": "MBPP/369", "prompt": "\n\ndef lateralsurface_cuboid(l,w,h):\n  \"\"\"\n  Write a function to find the lateral surface area of cuboid\n  >>> lateralsurface_cuboid(8,5,6)\n  156\n  >>> lateralsurface_cuboid(7,9,10)\n  320\n  >>> lateralsurface_cuboid(10,20,30)\n  1800\n  \"\"\"\n", "canonical_solution": "  \n  LSA = 2*h*(l+w)\n  return LSA", "entry_point": "lateralsurface_cuboid", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8,5,6)==156\n    assert candidate(7,9,10)==320\n    assert candidate(10,20,30)==1800\n\n", "language": "python", "description": "Write a function to find the lateral surface area of cuboid"}
{"task_id": "MBPP/370", "prompt": "\n\ndef float_sort(price):\n  \"\"\"\n  Write a function to sort a tuple by its float element.\n  >>> float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])\n  [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\n  >>> float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])\n  [('item3', '20'), ('item1', '15'), ('item2', '10')]\n  >>> float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])\n  [('item3', '14'), ('item2', '10'), ('item1', '5')]\n  \"\"\"\n", "canonical_solution": "  \n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\n  return float_sort", "entry_point": "float_sort", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n    assert candidate([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \n    assert candidate([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] \n\n", "language": "python", "description": "Write a function to sort a tuple by its float element."}
{"task_id": "MBPP/371", "prompt": "\n\ndef smallest_missing(A, left_element, right_element):\n    \"\"\"\n    Write a function to find the smallest missing element in a sorted array.\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)\n    7\n    >>> smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6)\n    3\n    >>> smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)\n    0\n    \"\"\"\n", "canonical_solution": "    \n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)", "entry_point": "smallest_missing", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert candidate([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\n    assert candidate([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0\n\n", "language": "python", "description": "Write a function to find the smallest missing element in a sorted array."}
{"task_id": "MBPP/372", "prompt": "\n\ndef heap_assending(nums):\n  \"\"\"\n  Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n  >>> heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n  [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n  >>> heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])\n  [14, 22, 25, 25, 35, 58, 65, 75, 85]\n  >>> heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \"\"\"\n", "canonical_solution": "  import heapq as hq\n  \n  hq.heapify(nums)\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\n  return s_result", "entry_point": "heap_assending", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n", "language": "python", "description": "Write a function to sort a given list of elements in ascending order using heap queue algorithm."}
{"task_id": "MBPP/373", "prompt": "\n\ndef volume_cuboid(l,w,h):\n  \"\"\"\n  Write a function to find the volume of a cuboid.\n  >>> volume_cuboid(1,2,3)\n  6\n  >>> volume_cuboid(5,7,9)\n  315\n  >>> volume_cuboid(10,15,21)\n  3150\n  \"\"\"\n", "canonical_solution": "  \n  volume=l*w*h\n  return volume", "entry_point": "volume_cuboid", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,2,3)==6\n    assert candidate(5,7,9)==315\n    assert candidate(10,15,21)==3150\n\n", "language": "python", "description": "Write a function to find the volume of a cuboid."}
{"task_id": "MBPP/374", "prompt": "\n\ndef permute_string(str):\n    \"\"\"\n    Write a function to print all permutations of a given string including duplicates.\n    >>> permute_string('ab')\n    ['ab', 'ba']\n    >>> permute_string('abc')\n    ['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n    >>> permute_string('abcd')\n    ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\n    \"\"\"\n", "canonical_solution": "    \n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list", "entry_point": "permute_string", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('ab')==['ab', 'ba']\n    assert candidate('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n    assert candidate('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\n\n", "language": "python", "description": "Write a function to print all permutations of a given string including duplicates."}
{"task_id": "MBPP/375", "prompt": "\n\ndef round_num(n,m):\n    \"\"\"\n    Write a function to round the given number to the nearest multiple of a specific number.\n    >>> round_num(4722,10)\n    4720\n    >>> round_num(1111,5)\n    1110\n    >>> round_num(219,2)\n    218\n    \"\"\"\n", "canonical_solution": "    \n    a = (n //m) * m\n    b = a + m\n    return (b if n - a > b - n else a)", "entry_point": "round_num", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(4722,10)==4720\n    assert candidate(1111,5)==1110\n    assert candidate(219,2)==218\n\n", "language": "python", "description": "Write a function to round the given number to the nearest multiple of a specific number."}
{"task_id": "MBPP/376", "prompt": "\n\ndef remove_replica(test_tup):\n  \"\"\"\n  Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n  >>> remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))\n  (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n  >>> remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))\n  (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n  >>> remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7))\n  (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\n  \"\"\"\n", "canonical_solution": "  \n  temp = set()\n  res = tuple(ele if ele not in temp and not temp.add(ele) \n\t\t\t\telse 'MSP' for ele in test_tup)\n  return (res)", "entry_point": "remove_replica", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    assert candidate((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n    assert candidate((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\n\n", "language": "python", "description": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value."}
{"task_id": "MBPP/377", "prompt": "\n\ndef remove_Char(s,c) :\n    \"\"\"\n    Write a python function to remove all occurrences of a character in a given string.\n    >>> remove_Char(\"aba\",'a')\n    \"b\"\n    >>> remove_Char(\"toggle\",'g')\n    \"tole\"\n    >>> remove_Char(\"aabbc\",'b')\n    \"aac\"\n    \"\"\"\n", "canonical_solution": "      \n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n        s.remove(c) \n        counts -= 1 \n    s = '' . join(s)   \n    return (s) ", "entry_point": "remove_Char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"aba\",'a') == \"b\"\n    assert candidate(\"toggle\",'g') == \"tole\"\n    assert candidate(\"aabbc\",'b') == \"aac\"\n\n", "language": "python", "description": "Write a python function to remove all occurrences of a character in a given string."}
{"task_id": "MBPP/378", "prompt": "\n\ndef move_first(test_list):\n  \"\"\"\n  Write a python function to shift last element to first position in the given list.\n  >>> move_first([1,2,3,4])\n  [4,1,2,3]\n  >>> move_first([0,1,2,3])\n  [3,0,1,2]\n  >>> move_first([9,8,7,1])\n  [1,9,8,7]\n  \"\"\"\n", "canonical_solution": "  \n  test_list = test_list[-1:] + test_list[:-1]  \n  return test_list", "entry_point": "move_first", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4]) == [4,1,2,3]\n    assert candidate([0,1,2,3]) == [3,0,1,2]\n    assert candidate([9,8,7,1]) == [1,9,8,7]\n\n", "language": "python", "description": "Write a python function to shift last element to first position in the given list."}
{"task_id": "MBPP/379", "prompt": "\n\ndef surfacearea_cuboid(l,w,h):\n  \"\"\"\n  Write a function to find the surface area of a cuboid.\n  >>> surfacearea_cuboid(1,2,3)\n  22\n  >>> surfacearea_cuboid(5,7,9)\n  286\n  >>> surfacearea_cuboid(10,15,21)\n  1350\n  \"\"\"\n", "canonical_solution": "  \n  SA = 2*(l*w + l * h + w * h)\n  return SA", "entry_point": "surfacearea_cuboid", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,2,3)==22\n    assert candidate(5,7,9)==286\n    assert candidate(10,15,21)==1350\n\n", "language": "python", "description": "Write a function to find the surface area of a cuboid."}
{"task_id": "MBPP/380", "prompt": "\n\ndef multi_list(rownum,colnum):\n  \"\"\"\n  Write a function to generate a two-dimensional array.\n  >>> multi_list(3,4)\n  [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n  >>> multi_list(5,7)\n  [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n  >>> multi_list(10,15)\n  [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n  \"\"\"\n", "canonical_solution": "  \n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n  for row in range(rownum):\n    for col in range(colnum):\n        multi_list[row][col]= row*col\n  return multi_list\n", "entry_point": "multi_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n    assert candidate(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n    assert candidate(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n\n", "language": "python", "description": "Write a function to generate a two-dimensional array."}
{"task_id": "MBPP/381", "prompt": "\n\ndef index_on_inner_list(list_data, index_no):\n    \"\"\"\n    Write a function to sort a list of lists by a given index of the inner list.\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)\n    [('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)\n    [('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)\n    [('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\n    \"\"\"\n", "canonical_solution": "    from operator import itemgetter\n    \n    result = sorted(list_data, key=itemgetter(index_no))\n    return result", "entry_point": "index_on_inner_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\n\n", "language": "python", "description": "Write a function to sort a list of lists by a given index of the inner list."}
{"task_id": "MBPP/382", "prompt": "\n\ndef find_rotation_count(A):\n    \"\"\"\n    Write a function to find the number of rotations in a circularly sorted array.\n    >>> find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n    3\n    >>> find_rotation_count([8, 9, 10,2, 5, 6])\n    3\n    >>> find_rotation_count([2, 5, 6, 8, 9, 10])\n    0\n    \"\"\"\n", "canonical_solution": "    \n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "entry_point": "find_rotation_count", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n    assert candidate([8, 9, 10,2, 5, 6]) == 3\n    assert candidate([2, 5, 6, 8, 9, 10]) == 0\n\n", "language": "python", "description": "Write a function to find the number of rotations in a circularly sorted array."}
{"task_id": "MBPP/383", "prompt": "\n\ndef even_bit_toggle_number(n) :\n    \"\"\"\n    Write a python function to toggle all odd bits of a given number.\n    >>> even_bit_toggle_number(10)\n    15\n    >>> even_bit_toggle_number(20)\n    1\n    >>> even_bit_toggle_number(30)\n    11\n    \"\"\"\n", "canonical_solution": "     \n    res = 0; count = 0; temp = n    \n    while(temp > 0 ) : \n        if (count % 2 == 0) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res ", "entry_point": "even_bit_toggle_number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 15\n    assert candidate(20) == 1\n    assert candidate(30) == 11\n\n", "language": "python", "description": "Write a python function to toggle all odd bits of a given number."}
{"task_id": "MBPP/384", "prompt": "\n\ndef frequency_Of_Smallest(n,arr):\n    \"\"\"\n    Write a python function to find the frequency of the smallest value in a given array.\n    >>> frequency_Of_Smallest(5,[1,2,3,4,3])\n    1\n    >>> frequency_Of_Smallest(7,[3,1,2,5,6,2,3])\n    1\n    >>> frequency_Of_Smallest(7,[3,3,6,3,7,4,9])\n    3\n    \"\"\"\n", "canonical_solution": "     \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ", "entry_point": "frequency_Of_Smallest", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5,[1,2,3,4,3]) == 1\n    assert candidate(7,[3,1,2,5,6,2,3]) == 1\n    assert candidate(7,[3,3,6,3,7,4,9]) == 3\n\n", "language": "python", "description": "Write a python function to find the frequency of the smallest value in a given array."}
{"task_id": "MBPP/385", "prompt": "\n\ndef get_perrin(n):\n  \"\"\"\n  Write a function to find the n'th perrin number using recursion.\n  >>> get_perrin(9)\n  12\n  >>> get_perrin(4)\n  2\n  >>> get_perrin(6)\n  5\n  \"\"\"\n", "canonical_solution": "  \n  if (n == 0):\n    return 3\n  if (n == 1):\n    return 0\n  if (n == 2):\n    return 2 \n  return get_perrin(n - 2) + get_perrin(n - 3)", "entry_point": "get_perrin", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(9) == 12\n    assert candidate(4) == 2\n    assert candidate(6) == 5\n\n", "language": "python", "description": "Write a function to find the n'th perrin number using recursion."}
{"task_id": "MBPP/386", "prompt": "\n\ndef swap_count(s):\n\t\"\"\"\n\tWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\t>>> swap_count(\"[]][][\")\n\t2\n\t>>> swap_count(\"[[][]]\")\n\t0\n\t>>> swap_count(\"[[][]]][\")\n\t1\n\t\"\"\"\n", "canonical_solution": "\t\n\tchars = s\n\tcount_left = 0\n\tcount_right = 0\n\tswap = 0\n\timbalance = 0; \n\tfor i in range(len(chars)):\n\t\tif chars[i] == '[':\n\t\t\tcount_left += 1\n\t\t\tif imbalance > 0:\n\t\t\t\tswap += imbalance\n\t\t\t\timbalance -= 1\n\t\telif chars[i] == ']':\n\t\t\tcount_right += 1\n\t\t\timbalance = (count_right - count_left) \n\treturn swap", "entry_point": "swap_count", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"[]][][\") == 2\n    assert candidate(\"[[][]]\") == 0\n    assert candidate(\"[[][]]][\") == 1\n\n", "language": "python", "description": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string."}
{"task_id": "MBPP/387", "prompt": "\n\ndef even_or_odd(N):\n    \"\"\"\n    Write a python function to check whether the hexadecimal number is even or odd.\n    >>> even_or_odd(\"AB3454D\")\n    \"Odd\"\n    >>> even_or_odd(\"ABC\")\n    \"Even\"\n    >>> even_or_odd(\"AAD\")\n    \"Odd\"\n    \"\"\"\n", "canonical_solution": "     \n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        N[l-1] =='C'or N[l-1] =='E'): \n        return (\"Even\") \n    else: \n        return (\"Odd\") ", "entry_point": "even_or_odd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"AB3454D\") ==\"Odd\"\n    assert candidate(\"ABC\") == \"Even\"\n    assert candidate(\"AAD\") == \"Odd\"\n\n", "language": "python", "description": "Write a python function to check whether the hexadecimal number is even or odd."}
{"task_id": "MBPP/388", "prompt": "\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    >>> highest_Power_of_2(10)\n    8\n    >>> highest_Power_of_2(19)\n    16\n    >>> highest_Power_of_2(32)\n    32\n    \"\"\"\n", "canonical_solution": "     \n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break; \n    return res; ", "entry_point": "highest_Power_of_2", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n\n", "language": "python", "description": "Write a python function to find the highest power of 2 that is less than or equal to n."}
{"task_id": "MBPP/389", "prompt": "\n\ndef find_lucas(n):\n\t\"\"\"\n\tWrite a function to find the n'th lucas number.\n\t>>> find_lucas(9)\n\t76\n\t>>> find_lucas(4)\n\t7\n\t>>> find_lucas(3)\n\t4\n\t\"\"\"\n", "canonical_solution": "\t \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "entry_point": "find_lucas", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(9) == 76\n    assert candidate(4) == 7\n    assert candidate(3) == 4\n\n", "language": "python", "description": "Write a function to find the n'th lucas number."}
{"task_id": "MBPP/390", "prompt": "\n\ndef add_string(list,string):\n \"\"\"\n Write a function to insert a given string at the beginning of all items in a list.\n >>> add_string([1,2,3,4],'temp{0}')\n ['temp1', 'temp2', 'temp3', 'temp4']\n >>> add_string(['a','b','c','d'], 'python{0}')\n [ 'pythona', 'pythonb', 'pythonc', 'pythond']\n >>> add_string([5,6,7,8],'string{0}')\n ['string5', 'string6', 'string7', 'string8']\n \"\"\"\n", "canonical_solution": " \n add_string=[string.format(i) for i in  list]\n return add_string", "entry_point": "add_string", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert candidate(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    assert candidate([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n\n", "language": "python", "description": "Write a function to insert a given string at the beginning of all items in a list."}
{"task_id": "MBPP/391", "prompt": "\n\ndef convert_list_dictionary(l1, l2, l3):\n     \"\"\"\n     Write a function to convert more than one list to nested dictionary.\n     >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n     [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n     >>> convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])\n     [{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n     >>> convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])\n     [{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n     \"\"\"\n", "canonical_solution": "     \n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "entry_point": "convert_list_dictionary", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    assert candidate([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n    assert candidate([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n\n", "language": "python", "description": "Write a function to convert more than one list to nested dictionary."}
{"task_id": "MBPP/392", "prompt": "\n\ndef get_max_sum (n):\n\t\"\"\"\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\t>>> get_max_sum(60)\n\t106\n\t>>> get_max_sum(10)\n\t12\n\t>>> get_max_sum(2)\n\t2\n\t\"\"\"\n", "canonical_solution": "\t\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]", "entry_point": "get_max_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(60) == 106\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n\n", "language": "python", "description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)."}
{"task_id": "MBPP/393", "prompt": "\n\ndef max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length using lambda function.\n    >>> max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (3, [13, 15, 17])\n    >>> max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])\n    (5,[1,2,3,4,5])\n    >>> max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])\n    (4,[6,7,8,9])\n    \"\"\"\n", "canonical_solution": "    \n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)", "entry_point": "max_length_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n    assert candidate([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])\n\n", "language": "python", "description": "Write a function to find the list with maximum length using lambda function."}
{"task_id": "MBPP/394", "prompt": "\n\ndef check_distinct(test_tup):\n  \"\"\"\n  Write a function to check if given tuple is distinct or not.\n  >>> check_distinct((1, 4, 5, 6, 1, 4))\n  False\n  >>> check_distinct((1, 4, 5, 6))\n  True\n  >>> check_distinct((2, 3, 4, 5, 6))\n  True\n  \"\"\"\n", "canonical_solution": "  \n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res) ", "entry_point": "check_distinct", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 4, 5, 6, 1, 4)) == False\n    assert candidate((1, 4, 5, 6)) == True\n    assert candidate((2, 3, 4, 5, 6)) == True\n\n", "language": "python", "description": "Write a function to check if given tuple is distinct or not."}
{"task_id": "MBPP/395", "prompt": "\n\ndef first_non_repeating_character(str1):\n  \"\"\"\n  Write a python function to find the first non-repeated character in a given string.\n  >>> first_non_repeating_character(\"abcabc\")\n  None\n  >>> first_non_repeating_character(\"abc\")\n  \"a\"\n  >>> first_non_repeating_character(\"ababc\")\n  \"c\"\n  \"\"\"\n", "canonical_solution": "  \n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "entry_point": "first_non_repeating_character", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"abcabc\") == None\n    assert candidate(\"abc\") == \"a\"\n    assert candidate(\"ababc\") == \"c\"\n\n", "language": "python", "description": "Write a python function to find the first non-repeated character in a given string."}
{"task_id": "MBPP/396", "prompt": "\n\ndef check_char(string):\n\t\"\"\"\n\tWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\t>>> check_char(\"abba\")\n\t\"Valid\"\n\t>>> check_char(\"a\")\n\t\"Valid\"\n\t>>> check_char(\"abcd\")\n\t\"Invalid\"\n\t\"\"\"\n", "canonical_solution": "\timport re  \n\tregex = r'^[a-z]$|^([a-z]).*\\1$'\n\t \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ", "entry_point": "check_char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"abba\") == \"Valid\"\n    assert candidate(\"a\") == \"Valid\"\n    assert candidate(\"abcd\") == \"Invalid\"\n\n", "language": "python", "description": "Write a function to check whether the given string starts and ends with the same character or not using regex."}
{"task_id": "MBPP/397", "prompt": "\n\ndef median_numbers(a,b,c):\n \"\"\"\n Write a function to find the median of three specific numbers.\n >>> median_numbers(25,55,65)\n 55.0\n >>> median_numbers(20,10,30)\n 20.0\n >>> median_numbers(15,45,75)\n 45.0\n \"\"\"\n", "canonical_solution": " \n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "entry_point": "median_numbers", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(25,55,65)==55.0\n    assert candidate(20,10,30)==20.0\n    assert candidate(15,45,75)==45.0\n\n", "language": "python", "description": "Write a function to find the median of three specific numbers."}
{"task_id": "MBPP/398", "prompt": "\n\ndef sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    >>> sum_of_digits([10,2,56])\n    14\n    >>> sum_of_digits([[10,20,4,5,'b',70,'a']])\n    19\n    >>> sum_of_digits([10,20,-4,5,-70])\n    19\n    \"\"\"\n", "canonical_solution": "    \n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "entry_point": "sum_of_digits", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10,2,56])==14\n    assert candidate([[10,20,4,5,'b',70,'a']])==19\n    assert candidate([10,20,-4,5,-70])==19\n\n", "language": "python", "description": "Write a function to compute the sum of digits of each number of a given list."}
{"task_id": "MBPP/399", "prompt": "\n\ndef bitwise_xor(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perform the mathematical bitwise xor operation across the given tuples.\n  >>> bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))\n  (15, 6, 5, 10)\n  >>> bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4))\n  (13, 6, 3, 14)\n  >>> bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6))\n  (11, 2, 13, 13)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "entry_point": "bitwise_xor", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n\n", "language": "python", "description": "Write a function to perform the mathematical bitwise xor operation across the given tuples."}
{"task_id": "MBPP/400", "prompt": "\n\ndef extract_freq(test_list):\n  \"\"\"\n  Write a function to extract the frequency of unique tuples in the given list order irrespective.\n  >>> extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] )\n  3\n  >>> extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] )\n  4\n  >>> extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] )\n  4\n  \"\"\"\n", "canonical_solution": "  \n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)", "entry_point": "extract_freq", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4\n\n", "language": "python", "description": "Write a function to extract the frequency of unique tuples in the given list order irrespective."}
{"task_id": "MBPP/401", "prompt": "\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n  >>> add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n  ((7, 10), (7, 14), (3, 10), (8, 13))\n  >>> add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n  ((9, 12), (9, 16), (5, 12), (10, 15))\n  >>> add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n  ((11, 14), (11, 18), (7, 14), (12, 17))\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "entry_point": "add_nested_tuples", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\n", "language": "python", "description": "Write a function to perform index wise addition of tuple elements in the given two nested tuples."}
{"task_id": "MBPP/402", "prompt": "\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Write a function to compute the value of ncr%p.\n    >>> ncr_modp(10,2,13)\n    6\n    >>> ncr_modp(15,12,43)\n    25\n    >>> ncr_modp(17,9,18)\n    10\n    \"\"\"\n", "canonical_solution": "     \n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p   \n    return C[r] ", "entry_point": "ncr_modp", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,2,13)==6\n    assert candidate(15,12,43)==25\n    assert candidate(17,9,18)==10\n\n", "language": "python", "description": "Write a function to compute the value of ncr%p."}
{"task_id": "MBPP/403", "prompt": "\n\ndef is_valid_URL(str):\n\t\"\"\"\n\tWrite a function to check if a url is valid or not using regex.\n\t>>> is_valid_URL(\"https://www.google.com\")\n\tTrue\n\t>>> is_valid_URL(\"https:/www.gmail.com\")\n\tFalse\n\t>>> is_valid_URL(\"https:// www.redit.com\")\n\tFalse\n\t\"\"\"\n", "canonical_solution": "\timport re\n\t\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False", "entry_point": "is_valid_URL", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"https://www.google.com\") == True\n    assert candidate(\"https:/www.gmail.com\") == False\n    assert candidate(\"https:// www.redit.com\") == False\n\n", "language": "python", "description": "Write a function to check if a url is valid or not using regex."}
{"task_id": "MBPP/404", "prompt": "\n\ndef minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    >>> minimum(1,2)\n    1\n    >>> minimum(-5,-4)\n    -5\n    >>> minimum(0,0)\n    0\n    \"\"\"\n", "canonical_solution": "       \n    if a <= b: \n        return a \n    else: \n        return b ", "entry_point": "minimum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(-5,-4) == -5\n    assert candidate(0,0) == 0\n\n", "language": "python", "description": "Write a python function to find the minimum of two numbers."}
{"task_id": "MBPP/405", "prompt": "\n\ndef check_tuplex(tuplex,tuple1):\n  \"\"\"\n  Write a function to check whether an element exists within a tuple.\n  >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')\n  True\n  >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')\n  False\n  >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)\n  True\n  \"\"\"\n", "canonical_solution": "   \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "entry_point": "check_tuplex", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n\n", "language": "python", "description": "Write a function to check whether an element exists within a tuple."}
{"task_id": "MBPP/406", "prompt": "\n\ndef find_Parity(x):\n    \"\"\"\n    Write a python function to find the parity of a given number.\n    >>> find_Parity(12)\n    \"Even Parity\"\n    >>> find_Parity(7)\n    \"Odd Parity\"\n    >>> find_Parity(10)\n    \"Even Parity\"\n    \"\"\"\n", "canonical_solution": "     \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return (\"Odd Parity\"); \n    return (\"Even Parity\"); ", "entry_point": "find_Parity", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12) == \"Even Parity\"\n    assert candidate(7) == \"Odd Parity\"\n    assert candidate(10) == \"Even Parity\"\n\n", "language": "python", "description": "Write a python function to find the parity of a given number."}
{"task_id": "MBPP/407", "prompt": "\n\ndef rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    >>> rearrange_bigger(12)\n    21\n    >>> rearrange_bigger(10)\n    False\n    >>> rearrange_bigger(102)\n    120\n    \"\"\"\n", "canonical_solution": "    \n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False", "entry_point": "rearrange_bigger", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12)==21\n    assert candidate(10)==False\n    assert candidate(102)==120\n\n", "language": "python", "description": "Write a function to create the next bigger number by rearranging the digits of a given number."}
{"task_id": "MBPP/408", "prompt": "\n\ndef k_smallest_pairs(nums1, nums2, k):\n   \"\"\"\n   Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n   >>> k_smallest_pairs([1,3,7],[2,4,6],2)\n   [[1, 2], [1, 4]]\n   >>> k_smallest_pairs([1,3,7],[2,4,6],1)\n   [[1, 2]]\n   >>> k_smallest_pairs([1,3,7],[2,4,6],7)\n   [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n   \"\"\"\n", "canonical_solution": "   import heapq\n   \n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs", "entry_point": "k_smallest_pairs", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n    assert candidate([1,3,7],[2,4,6],1)==[[1, 2]]\n    assert candidate([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\n", "language": "python", "description": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array."}
{"task_id": "MBPP/409", "prompt": "\n\ndef min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n    8\n    >>> min_product_tuple([(10,20), (15,2), (5,10)] )\n    30\n    >>> min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )\n    100\n    \"\"\"\n", "canonical_solution": "    \n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min", "entry_point": "min_product_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert candidate([(10,20), (15,2), (5,10)] )==30\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==100\n\n", "language": "python", "description": "Write a function to find the minimum product from the pairs of tuples within a given list."}
{"task_id": "MBPP/410", "prompt": "\n\ndef min_val(listval):\n     \"\"\"\n     Write a function to find the minimum value in a given heterogeneous list.\n     >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n     2\n     >>> min_val(['Python', 15, 20, 25])\n     15\n     >>> min_val(['Python', 30, 20, 40, 50, 'version'])\n     20\n     \"\"\"\n", "canonical_solution": "     \n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "entry_point": "min_val", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==2\n    assert candidate(['Python', 15, 20, 25])==15\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==20\n\n", "language": "python", "description": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": "MBPP/411", "prompt": "\n\ndef snake_to_camel(word):\n  \"\"\"\n  Write a function to convert the given snake case string to camel case string by using regex.\n  >>> snake_to_camel('android_tv')\n  'AndroidTv'\n  >>> snake_to_camel('google_pixel')\n  'GooglePixel'\n  >>> snake_to_camel('apple_watch')\n  'AppleWatch'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "entry_point": "snake_to_camel", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('android_tv') == 'AndroidTv'\n    assert candidate('google_pixel') == 'GooglePixel'\n    assert candidate('apple_watch') == 'AppleWatch'\n\n", "language": "python", "description": "Write a function to convert the given snake case string to camel case string by using regex."}
{"task_id": "MBPP/412", "prompt": "\n\ndef remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    >>> remove_odd([1,2,3])\n    [2]\n    >>> remove_odd([2,4,6])\n    [2,4,6]\n    >>> remove_odd([10,20,3])\n    [10,20]\n    \"\"\"\n", "canonical_solution": "    \n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l", "entry_point": "remove_odd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3]) == [2]\n    assert candidate([2,4,6]) == [2,4,6]\n    assert candidate([10,20,3]) == [10,20]\n\n", "language": "python", "description": "Write a python function to remove odd numbers from a given list."}
{"task_id": "MBPP/413", "prompt": "\n\ndef extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)\n    ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)\n    [99, 96, 94, 98]\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)\n    [98, 97, 91, 94]\n    \"\"\"\n", "canonical_solution": "    \n    result = [x[n] for x in list1]\n    return result", "entry_point": "extract_nth_element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n\n", "language": "python", "description": "Write a function to extract the nth element from a given list of tuples."}
{"task_id": "MBPP/414", "prompt": "\n\ndef overlapping(list1,list2):\n    \"\"\"\n    Write a python function to check whether the value exists in a sequence or not.\n    >>> overlapping([1,2,3,4,5],[6,7,8,9])\n    False\n    >>> overlapping([1,2,3],[4,5,6])\n    False\n    >>> overlapping([1,4,5],[1,4,5])\n    True\n    \"\"\"\n", "canonical_solution": "      \n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n        d+=1\n    for i in range(0,c): \n        for j in range(0,d): \n            if(list1[i]==list2[j]): \n                return 1\n    return 0", "entry_point": "overlapping", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5],[6,7,8,9]) == False\n    assert candidate([1,2,3],[4,5,6]) == False\n    assert candidate([1,4,5],[1,4,5]) == True\n\n", "language": "python", "description": "Write a python function to check whether the value exists in a sequence or not."}
{"task_id": "MBPP/415", "prompt": "\n\ndef max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    >>> max_Product([1,2,3,4,7,0,8,4])\n    (7,8)\n    >>> max_Product([0,-1,-2,-4,5,0,-6])\n    (-4,-6)\n    >>> max_Product([1,2,3])\n    (2,3)\n    \"\"\"\n", "canonical_solution": "     \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ", "entry_point": "max_Product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,7,0,8,4]) == (7,8)\n    assert candidate([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n    assert candidate([1,2,3]) == (2,3)\n\n", "language": "python", "description": "Write a python function to find a pair with highest product from a given array of integers."}
{"task_id": "MBPP/416", "prompt": "\n\ndef breakSum(n):\n\t\"\"\"\n\tWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\t>>> breakSum(12)\n\t13\n\t>>> breakSum(24)\n\t27\n\t>>> breakSum(23)\n\t23\n\t\"\"\"\n", "canonical_solution": "\tMAX = 1000000\n\t \n\tdp = [0]*(n+1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \n\treturn dp[n]", "entry_point": "breakSum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(12) == 13\n    assert candidate(24) == 27\n    assert candidate(23) == 23\n\n", "language": "python", "description": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number."}
{"task_id": "MBPP/417", "prompt": "\n\ndef group_tuples(Input):\n\t\"\"\"\n\tWrite a function to find common first element in given list of tuple.\n\t>>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n\t[('x', 'y', 'z'), ('w', 't')]\n\t>>> group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')])\n\t[('a', 'b', 'c'), ('d', 'e')]\n\t>>> group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')])\n\t[('f', 'g', 'g'), ('h', 'i')]\n\t\"\"\"\n", "canonical_solution": "\t \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ", "entry_point": "group_tuples", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert candidate([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    assert candidate([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n\n", "language": "python", "description": "Write a function to find common first element in given list of tuple."}
{"task_id": "MBPP/418", "prompt": "\n\ndef Find_Max(lst):\n    \"\"\"\n    Write a python function to find the sublist having maximum length.\n    >>> Find_Max([['A'],['A','B'],['A','B','C']])\n    ['A','B','C']\n    >>> Find_Max([[1],[1,2],[1,2,3]])\n    [1,2,3]\n    >>> Find_Max([[1,1],[1,2,3],[1,5,6,1]])\n    [1,5,6,1]\n    \"\"\"\n", "canonical_solution": "     \n    maxList = max((x) for x in lst) \n    return maxList", "entry_point": "Find_Max", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert candidate([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert candidate([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n\n", "language": "python", "description": "Write a python function to find the sublist having maximum length."}
{"task_id": "MBPP/419", "prompt": "\n\ndef round_and_sum(list1):\n  \"\"\"\n  Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n  >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n  243\n  >>> round_and_sum([5,2,9,24.3,29])\n  345\n  >>> round_and_sum([25.0,56.7,89.2])\n  513\n  \"\"\"\n", "canonical_solution": "  \n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "entry_point": "round_and_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n    assert candidate([5,2,9,24.3,29])==345\n    assert candidate([25.0,56.7,89.2])==513\n\n", "language": "python", "description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list."}
{"task_id": "MBPP/420", "prompt": "\n\ndef cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    >>> cube_Sum(2)\n    72\n    >>> cube_Sum(3)\n    288\n    >>> cube_Sum(4)\n    800\n    \"\"\"\n", "canonical_solution": "     \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum", "entry_point": "cube_Sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 72\n    assert candidate(3) == 288\n    assert candidate(4) == 800\n\n", "language": "python", "description": "Write a python function to find the cube sum of first n even natural numbers."}
{"task_id": "MBPP/421", "prompt": "\n\ndef concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n    'ID-is-4-UTS'\n    >>> concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") )\n    'QWE-is-4-RTY'\n    >>> concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") )\n    'ZEN-is-4-OP'\n    \"\"\"\n", "canonical_solution": "    \n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ", "entry_point": "concatenate_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n    assert candidate((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\n    assert candidate((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n\n", "language": "python", "description": "Write a function to concatenate each element of tuple by the delimiter."}
{"task_id": "MBPP/422", "prompt": "\n\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    >>> find_Average_Of_Cube(2)\n    4.5\n    >>> find_Average_Of_Cube(3)\n    12\n    >>> find_Average_Of_Cube(1)\n    1\n    \"\"\"\n", "canonical_solution": "      \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ", "entry_point": "find_Average_Of_Cube", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4.5\n    assert candidate(3) == 12\n    assert candidate(1) == 1\n\n", "language": "python", "description": "Write a python function to find the average of cubes of first n natural numbers."}
{"task_id": "MBPP/423", "prompt": "\n\ndef get_maxgold(gold, m, n):\n    \"\"\"\n    Write a function to solve gold mine problem.\n    >>> get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)\n    16\n    >>> get_maxgold([[10,20],[30,40]],2,2)\n    70\n    >>> get_maxgold([[4,9],[3,7]],2,2)\n    13\n    \"\"\"\n", "canonical_solution": "     \n    goldTable = [[0 for i in range(n)] \n                        for j in range(m)]   \n    for col in range(n-1, -1, -1): \n        for row in range(m):  \n            if (col == n-1): \n                right = 0\n            else: \n                right = goldTable[row][col+1] \n            if (row == 0 or col == n-1): \n                right_up = 0\n            else: \n                right_up = goldTable[row-1][col+1] \n            if (row == m-1 or col == n-1): \n                right_down = 0\n            else: \n                right_down = goldTable[row+1][col+1] \n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \n    res = goldTable[0][0] \n    for i in range(1, m): \n        res = max(res, goldTable[i][0])  \n    return res ", "entry_point": "get_maxgold", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n    assert candidate([[10,20],[30,40]],2,2)==70\n    assert candidate([[4,9],[3,7]],2,2)==13\n\n", "language": "python", "description": "Write a function to solve gold mine problem."}
{"task_id": "MBPP/424", "prompt": "\n\ndef extract_rear(test_tuple):\n  \"\"\"\n  Write a function to extract only the rear index element of each string in the given tuple.\n  >>> extract_rear(('Mers', 'for', 'Vers') )\n  ['s', 'r', 's']\n  >>> extract_rear(('Avenge', 'for', 'People') )\n  ['e', 'r', 'e']\n  >>> extract_rear(('Gotta', 'get', 'go') )\n  ['a', 't', 'o']\n  \"\"\"\n", "canonical_solution": "  \n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ", "entry_point": "extract_rear", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    assert candidate(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n\n", "language": "python", "description": "Write a function to extract only the rear index element of each string in the given tuple."}
{"task_id": "MBPP/425", "prompt": "\n\ndef count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)\n    3\n    >>> count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')\n    3\n    >>> count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')\n    1\n    \"\"\"\n", "canonical_solution": "     \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "entry_point": "count_element_in_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n\n", "language": "python", "description": "Write a function to count the number of sublists containing a particular element."}
{"task_id": "MBPP/426", "prompt": "\n\ndef filter_oddnumbers(nums):\n \"\"\"\n Write a function to filter odd numbers using lambda function.\n >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n [1,3,5,7,9]\n >>> filter_oddnumbers([10,20,45,67,84,93])\n [45,67,93]\n >>> filter_oddnumbers([5,7,9,8,6,4,3])\n [5,7,9,3]\n \"\"\"\n", "canonical_solution": " \n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums", "entry_point": "filter_oddnumbers", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    assert candidate([10,20,45,67,84,93])==[45,67,93]\n    assert candidate([5,7,9,8,6,4,3])==[5,7,9,3]\n\n", "language": "python", "description": "Write a function to filter odd numbers using lambda function."}
{"task_id": "MBPP/427", "prompt": "\n\ndef change_date_format(dt):\n        \"\"\"\n        Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n        >>> change_date_format(\"2020-11-13\")\n        '13-11-2020'\n        >>> change_date_format(\"2021-04-26\")\n        '26-04-2021'\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "entry_point": "change_date_format", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"2026-01-02\") == '02-01-2026'\n    assert candidate(\"2020-11-13\") == '13-11-2020'\n    assert candidate(\"2021-04-26\") == '26-04-2021'\n\n", "language": "python", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex."}
{"task_id": "MBPP/428", "prompt": "\n\ndef shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    >>> shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n    [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    >>> shell_sort([24, 22, 39, 34, 87, 73, 68])\n    [22, 24, 34, 39, 68, 73, 87]\n    >>> shell_sort([32, 30, 16, 96, 82, 83, 74])\n    [16, 30, 32, 74, 82, 83, 96]\n    \"\"\"\n", "canonical_solution": "    \n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "entry_point": "shell_sort", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n\n", "language": "python", "description": "Write a function to sort the given array by using shell sort."}
{"task_id": "MBPP/429", "prompt": "\n\ndef and_tuples(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to extract the elementwise and tuples from the given two tuples.\n  >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n  (0, 0, 2, 1)\n  >>> and_tuples((1, 2, 3, 4), (5, 6, 7, 8))\n  (1, 2, 3, 0)\n  >>> and_tuples((8, 9, 11, 12), (7, 13, 14, 17))\n  (0, 9, 10, 0)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "entry_point": "and_tuples", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n\n", "language": "python", "description": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"task_id": "MBPP/430", "prompt": "\n\ndef parabola_directrix(a, b, c):\n  \"\"\"\n  Write a function to find the directrix of a parabola.\n  >>> parabola_directrix(5,3,2)\n  -198\n  >>> parabola_directrix(9,8,4)\n  -2336\n  >>> parabola_directrix(2,4,6)\n  -130\n  \"\"\"\n", "canonical_solution": "   \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix", "entry_point": "parabola_directrix", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5,3,2)==-198\n    assert candidate(9,8,4)==-2336\n    assert candidate(2,4,6)==-130\n\n", "language": "python", "description": "Write a function to find the directrix of a parabola."}
{"task_id": "MBPP/431", "prompt": "\n\ndef common_element(list1, list2):\n     \"\"\"\n     Write a function that takes two lists and returns true if they have at least one common element.\n     >>> common_element([1,2,3,4,5], [5,6,7,8,9])\n     True\n     >>> common_element([1,2,3,4,5], [6,7,8,9])\n     None\n     >>> common_element(['a','b','c'], ['d','b','e'])\n     True\n     \"\"\"\n", "canonical_solution": "     \n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result", "entry_point": "common_element", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5], [5,6,7,8,9])==True\n    assert candidate([1,2,3,4,5], [6,7,8,9])==None\n    assert candidate(['a','b','c'], ['d','b','e'])==True\n\n", "language": "python", "description": "Write a function that takes two lists and returns true if they have at least one common element."}
{"task_id": "MBPP/432", "prompt": "\n\ndef median_trapezium(base1,base2,height):\n \"\"\"\n Write a function to find the median of a trapezium.\n >>> median_trapezium(15,25,35)\n 20\n >>> median_trapezium(10,20,30)\n 15\n >>> median_trapezium(6,9,4)\n 7.5\n \"\"\"\n", "canonical_solution": " \n median = 0.5 * (base1+ base2)\n return median", "entry_point": "median_trapezium", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15,25,35)==20\n    assert candidate(10,20,30)==15\n    assert candidate(6,9,4)==7.5\n\n", "language": "python", "description": "Write a function to find the median of a trapezium."}
{"task_id": "MBPP/433", "prompt": "\n\ndef check_greater(arr, number):\n  \"\"\"\n  Write a function to check whether the entered number is greater than the elements of the given array.\n  >>> check_greater([1, 2, 3, 4, 5], 4)\n  'No, entered number is less than those in the array'\n  >>> check_greater([2, 3, 4, 5, 6], 8)\n  'Yes, the entered number is greater than those in the array'\n  >>> check_greater([9, 7, 4, 8, 6, 1], 11)\n  'Yes, the entered number is greater than those in the array'\n  \"\"\"\n", "canonical_solution": "  \n  arr.sort()\n  if number > arr[-1]:\n    return ('Yes, the entered number is greater than those in the array')\n  else:\n    return ('No, entered number is less than those in the array')", "entry_point": "check_greater", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n    assert candidate([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\n    assert candidate([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'\n\n", "language": "python", "description": "Write a function to check whether the entered number is greater than the elements of the given array."}
{"task_id": "MBPP/434", "prompt": "\n\ndef text_match_one(text):\n        \"\"\"\n        Write a function that matches a string that has an a followed by one or more b's.\n        >>> text_match_one(\"ac\")\n        ('Not matched!')\n        >>> text_match_one(\"dc\")\n        ('Not matched!')\n        >>> text_match_one(\"abba\")\n        ('Found a match!')\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n", "entry_point": "text_match_one", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"ac\")==('Not matched!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abba\")==('Found a match!')\n\n", "language": "python", "description": "Write a function that matches a string that has an a followed by one or more b's."}
{"task_id": "MBPP/435", "prompt": "\n\ndef last_Digit(n) :\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    >>> last_Digit(123)\n    3\n    >>> last_Digit(25)\n    5\n    >>> last_Digit(30)\n    0\n    \"\"\"\n", "canonical_solution": "    \n    return (n % 10) ", "entry_point": "last_Digit", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(123) == 3\n    assert candidate(25) == 5\n    assert candidate(30) == 0\n\n", "language": "python", "description": "Write a python function to find the last digit of a given number."}
{"task_id": "MBPP/436", "prompt": "\n\ndef neg_nos(list1):\n  \"\"\"\n  Write a python function to print negative numbers in a list.\n  >>> neg_nos([-1,4,5,-6])\n  -1,-6\n  >>> neg_nos([-1,-2,3,4])\n  -1,-2\n  >>> neg_nos([-7,-6,8,9])\n  -7,-6\n  \"\"\"\n", "canonical_solution": "  \n  for num in list1: \n    if num < 0: \n       return num ", "entry_point": "neg_nos", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1,4,5,-6]) == -1,-6\n    assert candidate([-1,-2,3,4]) == -1,-2\n    assert candidate([-7,-6,8,9]) == -7,-6\n\n", "language": "python", "description": "Write a python function to print negative numbers in a list."}
{"task_id": "MBPP/437", "prompt": "\n\ndef remove_odd(str1):\n \"\"\"\n Write a function to remove odd characters in a string.\n >>> remove_odd(\"python\")\n (\"yhn\")\n >>> remove_odd(\"program\")\n (\"rga\")\n >>> remove_odd(\"language\")\n (\"agae\")\n \"\"\"\n", "canonical_solution": " \n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2", "entry_point": "remove_odd", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"python\")==(\"yhn\")\n    assert candidate(\"program\")==(\"rga\")\n    assert candidate(\"language\")==(\"agae\")\n\n", "language": "python", "description": "Write a function to remove odd characters in a string."}
{"task_id": "MBPP/438", "prompt": "\n\ndef count_bidirectional(test_list):\n  \"\"\"\n  Write a function to count bidirectional tuple pairs.\n  >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] )\n  '3'\n  >>> count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] )\n  '2'\n  >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] )\n  '4'\n  \"\"\"\n", "canonical_solution": "  \n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return (str(res)) ", "entry_point": "count_bidirectional", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'\n\n", "language": "python", "description": "Write a function to count bidirectional tuple pairs."}
{"task_id": "MBPP/439", "prompt": "\n\ndef multiple_to_single(L):\n  \"\"\"\n  Write a function to convert a list of multiple integers into a single integer.\n  >>> multiple_to_single([11, 33, 50])\n  113350\n  >>> multiple_to_single([-1,2,3,4,5,6])\n  -123456\n  >>> multiple_to_single([10,15,20,25])\n  10152025\n  \"\"\"\n", "canonical_solution": "  \n  x = int(\"\".join(map(str, L)))\n  return x", "entry_point": "multiple_to_single", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([11, 33, 50])==113350\n    assert candidate([-1,2,3,4,5,6])==-123456\n    assert candidate([10,15,20,25])==10152025\n\n", "language": "python", "description": "Write a function to convert a list of multiple integers into a single integer."}
{"task_id": "MBPP/440", "prompt": "\n\ndef find_adverb_position(text):\n \"\"\"\n Write a function to find all adverbs and their positions in a given sentence.\n >>> find_adverb_position(\"clearly!! we can see the sky\")\n (0, 7, 'clearly')\n >>> find_adverb_position(\"seriously!! there are many roses\")\n (0, 9, 'seriously')\n >>> find_adverb_position(\"unfortunately!! sita is going to home\")\n (0, 13, 'unfortunately')\n \"\"\"\n", "canonical_solution": " import re\n \n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))", "entry_point": "find_adverb_position", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    assert candidate(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n    assert candidate(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n\n", "language": "python", "description": "Write a function to find all adverbs and their positions in a given sentence."}
{"task_id": "MBPP/441", "prompt": "\n\ndef surfacearea_cube(l):\n  \"\"\"\n  Write a function to find the surface area of a cube.\n  >>> surfacearea_cube(5)\n  150\n  >>> surfacearea_cube(3)\n  54\n  >>> surfacearea_cube(10)\n  600\n  \"\"\"\n", "canonical_solution": "  \n  surfacearea= 6*l*l\n  return surfacearea", "entry_point": "surfacearea_cube", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5)==150\n    assert candidate(3)==54\n    assert candidate(10)==600\n\n", "language": "python", "description": "Write a function to find the surface area of a cube."}
{"task_id": "MBPP/442", "prompt": "\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    >>> positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.54\n    >>> positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    0.69\n    >>> positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    0.56\n    \"\"\"\n", "canonical_solution": "    from array import array\n    \n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "entry_point": "positive_count", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\n\n", "language": "python", "description": "Write a function to find the ration of positive numbers in an array of integers."}
{"task_id": "MBPP/443", "prompt": "\n\ndef largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    >>> largest_neg([1,2,3,-4,-6])\n    -6\n    >>> largest_neg([1,2,3,-8,-9])\n    -9\n    >>> largest_neg([1,2,3,4,-1])\n    -1\n    \"\"\"\n", "canonical_solution": "     \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max", "entry_point": "largest_neg", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,-4,-6]) == -6\n    assert candidate([1,2,3,-8,-9]) == -9\n    assert candidate([1,2,3,4,-1]) == -1\n\n", "language": "python", "description": "Write a python function to find the largest negative number from the given list."}
{"task_id": "MBPP/444", "prompt": "\n\ndef trim_tuple(test_list, K):\n  \"\"\"\n  Write a function to trim each tuple by k in the given tuple list.\n  >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)\n  '[(2,), (9,), (2,), (2,)]'\n  >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1)\n  '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n  >>> trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1)\n  '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n  \"\"\"\n", "canonical_solution": "  \n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ", "entry_point": "trim_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n    assert candidate([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n\n", "language": "python", "description": "Write a function to trim each tuple by k in the given tuple list."}
{"task_id": "MBPP/445", "prompt": "\n\ndef index_multiplication(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n  >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n  ((6, 21), (12, 45), (2, 9), (7, 30))\n  >>> index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) )\n  ((14, 32), (20, 60), (6, 20), (16, 44))\n  >>> index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) )\n  ((24, 45), (30, 77), (12, 33), (27, 60))\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "entry_point": "index_multiplication", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n\n", "language": "python", "description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples."}
{"task_id": "MBPP/446", "prompt": "\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] )\n    3\n    >>> count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7])\n    6\n    >>> count_Occurrence((1,2,3,4,5,6),[1,2])\n    2\n    \"\"\"\n", "canonical_solution": "    from collections import Counter \n     \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ", "entry_point": "count_Occurrence", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n    assert candidate((1,2,3,4,5,6),[1,2]) == 2\n\n", "language": "python", "description": "Write a python function to count the occurence of all elements of list in a tuple."}
{"task_id": "MBPP/447", "prompt": "\n\ndef cube_nums(nums):\n \"\"\"\n Write a function to find cubes of individual elements in a list using lambda function.\n >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n >>> cube_nums([10,20,30])\n ([1000, 8000, 27000])\n >>> cube_nums([12,15])\n ([1728, 3375])\n \"\"\"\n", "canonical_solution": " \n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums", "entry_point": "cube_nums", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert candidate([10,20,30])==([1000, 8000, 27000])\n    assert candidate([12,15])==([1728, 3375])\n\n", "language": "python", "description": "Write a function to find cubes of individual elements in a list using lambda function."}
{"task_id": "MBPP/448", "prompt": "\n\ndef cal_sum(n):\n\t\"\"\"\n\tWrite a function to calculate the sum of perrin numbers.\n\t>>> cal_sum(9)\n\t49\n\t>>> cal_sum(10)\n\t66\n\t>>> cal_sum(11)\n\t88\n\t\"\"\"\n", "canonical_solution": "\t \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum", "entry_point": "cal_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(9) == 49\n    assert candidate(10) == 66\n    assert candidate(11) == 88\n\n", "language": "python", "description": "Write a function to calculate the sum of perrin numbers."}
{"task_id": "MBPP/449", "prompt": "\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    \"\"\"\n    Write a python function to check whether the triangle is valid or not if 3 points are given.\n    >>> check_Triangle(1,5,2,5,4,6)\n    'Yes'\n    >>> check_Triangle(1,1,1,4,1,5)\n    'No'\n    >>> check_Triangle(1,1,1,1,1,1)\n    'No'\n    \"\"\"\n", "canonical_solution": "     \n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \n    if a == 0: \n        return ('No') \n    else: \n        return ('Yes') ", "entry_point": "check_Triangle", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1,5,2,5,4,6) == 'Yes'\n    assert candidate(1,1,1,4,1,5) == 'No'\n    assert candidate(1,1,1,1,1,1) == 'No'\n\n", "language": "python", "description": "Write a python function to check whether the triangle is valid or not if 3 points are given."}
{"task_id": "MBPP/450", "prompt": "\n\ndef extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a give list of string values.\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)\n    ['practice', 'solution']\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)\n    ['Python']\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)\n    ['exercises']\n    \"\"\"\n", "canonical_solution": "    \n    result = [e for e in str if len(e) == l] \n    return result", "entry_point": "extract_string", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n\n", "language": "python", "description": "Write a function to extract specified size of strings from a give list of string values."}
{"task_id": "MBPP/451", "prompt": "\n\ndef remove_whitespaces(text1):\n  \"\"\"\n  Write a function to remove all whitespaces from the given string using regex.\n  >>> remove_whitespaces(' Google    Flutter ')\n  'GoogleFlutter'\n  >>> remove_whitespaces(' Google    Dart ')\n  'GoogleDart'\n  >>> remove_whitespaces(' iOS    Swift ')\n  'iOSSwift'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  return (re.sub(r'\\s+', '',text1))", "entry_point": "remove_whitespaces", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(' Google    Flutter ') == 'GoogleFlutter'\n    assert candidate(' Google    Dart ') == 'GoogleDart'\n    assert candidate(' iOS    Swift ') == 'iOSSwift'\n\n", "language": "python", "description": "Write a function to remove all whitespaces from the given string using regex."}
{"task_id": "MBPP/452", "prompt": "\n\ndef loss_amount(actual_cost,sale_amount):\n  \"\"\"\n  Write a function that gives loss amount if the given amount has loss else return none.\n  >>> loss_amount(1500,1200)\n  None\n  >>> loss_amount(100,200)\n  100\n  >>> loss_amount(2000,5000)\n  3000\n  \"\"\"\n", "canonical_solution": "   \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return None", "entry_point": "loss_amount", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1500,1200)==None\n    assert candidate(100,200)==100\n    assert candidate(2000,5000)==3000\n\n", "language": "python", "description": "Write a function that gives loss amount if the given amount has loss else return none."}
{"task_id": "MBPP/453", "prompt": "\n\ndef sumofFactors(n) :\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    >>> sumofFactors(18)\n    26\n    >>> sumofFactors(30)\n    48\n    >>> sumofFactors(6)\n    8\n    \"\"\"\n", "canonical_solution": "    import math \n     \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res ", "entry_point": "sumofFactors", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(18) == 26\n    assert candidate(30) == 48\n    assert candidate(6) == 8\n\n", "language": "python", "description": "Write a python function to find the sum of even factors of a number."}
{"task_id": "MBPP/454", "prompt": "\n\ndef text_match_wordz(text):\n        \"\"\"\n        Write a function that matches a word containing 'z'.\n        >>> text_match_wordz(\"pythonz.\")\n        ('Found a match!')\n        >>> text_match_wordz(\"xyz.\")\n        ('Found a match!')\n        >>> text_match_wordz(\"  lang  .\")\n        ('Not matched!')\n        \"\"\"\n", "canonical_solution": "        import re\n        \n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "entry_point": "text_match_wordz", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"pythonz.\")==('Found a match!')\n    assert candidate(\"xyz.\")==('Found a match!')\n    assert candidate(\"  lang  .\")==('Not matched!')\n\n", "language": "python", "description": "Write a function that matches a word containing 'z'."}
{"task_id": "MBPP/455", "prompt": "\n\ndef check_monthnumb_number(monthnum2):\n  \"\"\"\n  Write a function to check whether the given month number contains 31 days or not.\n  >>> check_monthnumb_number(5)\n  True\n  >>> check_monthnumb_number(2)\n  False\n  >>> check_monthnumb_number(6)\n  False\n  \"\"\"\n", "canonical_solution": "  \n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False", "entry_point": "check_monthnumb_number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5)==True\n    assert candidate(2)==False\n    assert candidate(6)==False\n\n", "language": "python", "description": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": "MBPP/456", "prompt": "\n\ndef reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse strings in a given list of string values.\n    >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n    ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    >>> reverse_string_list(['john','amal','joel','george'])\n    ['nhoj','lama','leoj','egroeg']\n    >>> reverse_string_list(['jack','john','mary'])\n    ['kcaj','nhoj','yram']\n    \"\"\"\n", "canonical_solution": "    \n    result = [x[::-1] for x in stringlist]\n    return result", "entry_point": "reverse_string_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert candidate(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n    assert candidate(['jack','john','mary'])==['kcaj','nhoj','yram']\n\n", "language": "python", "description": "Write a function to reverse strings in a given list of string values."}
{"task_id": "MBPP/457", "prompt": "\n\ndef Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    >>> Find_Min([[1],[1,2],[1,2,3]])\n    [1]\n    >>> Find_Min([[1,1],[1,1,1],[1,2,7,8]])\n    [1,1]\n    >>> Find_Min([['x'],['x','y'],['x','y','z']])\n    ['x']\n    \"\"\"\n", "canonical_solution": "     \n    minList = min((x) for x in lst) \n    return minList", "entry_point": "Find_Min", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1],[1,2],[1,2,3]]) == [1]\n    assert candidate([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    assert candidate([['x'],['x','y'],['x','y','z']]) == ['x']\n\n", "language": "python", "description": "Write a python function to find the sublist having minimum length."}
{"task_id": "MBPP/458", "prompt": "\n\ndef rectangle_area(l,b):\n  \"\"\"\n  Write a function to find the area of a rectangle.\n  >>> rectangle_area(10,20)\n  200\n  >>> rectangle_area(10,5)\n  50\n  >>> rectangle_area(4,2)\n  8\n  \"\"\"\n", "canonical_solution": "  \n  area=l*b\n  return area", "entry_point": "rectangle_area", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(10,5)==50\n    assert candidate(4,2)==8\n\n", "language": "python", "description": "Write a function to find the area of a rectangle."}
{"task_id": "MBPP/459", "prompt": "\n\ndef remove_uppercase(str1):\n  \"\"\"\n  Write a function to remove uppercase substrings from a given string by using regex.\n  >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n  'cstyoravoitshos'\n  >>> remove_uppercase('wAtchTheinTernEtrAdIo')\n  'wtchheinerntrdo'\n  >>> remove_uppercase('VoicESeaRchAndreComMendaTionS')\n  'oiceachndreomendaion'\n  \"\"\"\n", "canonical_solution": "  import re\n  \n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\n  result =  remove_upper(str1)\n  return (result)", "entry_point": "remove_uppercase", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert candidate('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert candidate('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n\n", "language": "python", "description": "Write a function to remove uppercase substrings from a given string by using regex."}
{"task_id": "MBPP/460", "prompt": "\n\ndef Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    >>> Extract([[1,2,3],[4, 5]])\n    [1,4]\n    >>> Extract([[9,8,1],[1,2]])\n    [9,1]\n    \"\"\"\n", "canonical_solution": "     \n    return [item[0] for item in lst] ", "entry_point": "Extract", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert candidate([[1,2,3],[4, 5]]) == [1,4]\n    assert candidate([[9,8,1],[1,2]]) == [9,1]\n\n", "language": "python", "description": "Write a python function to get the first element of each sublist."}
{"task_id": "MBPP/461", "prompt": "\n\ndef upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    >>> upper_ctr('PYthon')\n    1\n    >>> upper_ctr('BigData')\n    1\n    >>> upper_ctr('program')\n    0\n    \"\"\"\n", "canonical_solution": "    \n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr", "entry_point": "upper_ctr", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('PYthon') == 1\n    assert candidate('BigData') == 1\n    assert candidate('program') == 0\n\n", "language": "python", "description": "Write a python function to count the upper case characters in a given string."}
{"task_id": "MBPP/462", "prompt": "\n\ndef combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    >>> combinations_list(['orange', 'red', 'green', 'blue'])\n    [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    >>> combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])\n    [[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    >>> combinations_list(['red', 'green', 'black', 'orange'])\n    [[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n    \"\"\"\n", "canonical_solution": "    \n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "entry_point": "combinations_list", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert candidate(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n\n", "language": "python", "description": "Write a function to find all possible combinations of the elements of a given list."}
{"task_id": "MBPP/463", "prompt": "\n\ndef max_subarray_product(arr):\n\t\"\"\"\n\tWrite a function to find the maximum product subarray of the given array.\n\t>>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n\t112\n\t>>> max_subarray_product([6, -3, -10, 0, 2])\n\t180\n\t>>> max_subarray_product([-2, -40, 0, -2, -3])\n\t80\n\t\"\"\"\n", "canonical_solution": "\t\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far", "entry_point": "max_subarray_product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert candidate([6, -3, -10, 0, 2]) == 180 \n    assert candidate([-2, -40, 0, -2, -3]) == 80\n\n", "language": "python", "description": "Write a function to find the maximum product subarray of the given array."}
{"task_id": "MBPP/464", "prompt": "\n\ndef check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)\n    False\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)\n    True\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)\n    False\n    \"\"\"\n", "canonical_solution": "    \n    result = all(x == n for x in dict.values()) \n    return result", "entry_point": "check_value", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\n\n", "language": "python", "description": "Write a function to check if all values are same in a dictionary."}
{"task_id": "MBPP/465", "prompt": "\n\ndef drop_empty(dict1):\n  \"\"\"\n  Write a function to drop empty items from a given dictionary.\n  >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n  {'c1': 'Red', 'c2': 'Green'}\n  >>> drop_empty({'c1': 'Red', 'c2': None, 'c3':None})\n  {'c1': 'Red'}\n  >>> drop_empty({'c1': None, 'c2': 'Green', 'c3':None})\n  { 'c2': 'Green'}\n  \"\"\"\n", "canonical_solution": "  \n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "entry_point": "drop_empty", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    assert candidate({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n    assert candidate({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n\n", "language": "python", "description": "Write a function to drop empty items from a given dictionary."}
{"task_id": "MBPP/466", "prompt": "\n\ndef find_peak(arr, n):\n\t\"\"\"\n\tWrite a function to find the peak element in the given array.\n\t>>> find_peak([1, 3, 20, 4, 1, 0], 6)\n\t2\n\t>>> find_peak([2, 3, 4, 5, 6], 5)\n\t4\n\t>>> find_peak([8, 9, 11, 12, 14, 15], 6)\n\t5\n\t\"\"\"\n", "canonical_solution": "\tdef find_peak_util(arr, low, high, n): \n\t\tmid = low + (high - low)/2\n\t\tmid = int(mid) \n\t\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n\t\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \n\t\t\treturn mid \n\t\telif (mid > 0 and arr[mid - 1] > arr[mid]): \n\t\t\treturn find_peak_util(arr, low, (mid - 1), n) \n\t\telse: \n\t\t\treturn find_peak_util(arr, (mid + 1), high, n) \n\t \n\treturn find_peak_util(arr, 0, n - 1, n) ", "entry_point": "find_peak", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 20, 4, 1, 0], 6) == 2\n    assert candidate([2, 3, 4, 5, 6], 5) == 4\n    assert candidate([8, 9, 11, 12, 14, 15], 6) == 5 \n\n", "language": "python", "description": "Write a function to find the peak element in the given array."}
{"task_id": "MBPP/467", "prompt": "\n\ndef decimal_to_Octal(deciNum):\n    \"\"\"\n    Write a python function to convert decimal number to octal number.\n    >>> decimal_to_Octal(10)\n    12\n    >>> decimal_to_Octal(2)\n    2\n    >>> decimal_to_Octal(33)\n    41\n    \"\"\"\n", "canonical_solution": "    \n    octalNum = 0\n    countval = 1;\n    dNo = deciNum;\n    while (deciNum!= 0):\n        remainder= deciNum % 8;\n        octalNum+= remainder*countval;\n        countval= countval*10;\n        deciNum //= 8; \n    return (octalNum)", "entry_point": "decimal_to_Octal", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n    assert candidate(33) == 41\n\n", "language": "python", "description": "Write a python function to convert decimal number to octal number."}
{"task_id": "MBPP/468", "prompt": "\n\ndef max_product(arr, n ):\n\t\"\"\"\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t>>> max_product([3, 100, 4, 5, 150, 6], 6)\n\t45000\n\t>>> max_product([4, 42, 55, 68, 80], 5)\n\t50265600\n\t>>> max_product([10, 22, 9, 33, 21, 50, 41, 60], 8)\n\t21780000\n\t\"\"\"\n", "canonical_solution": "\t \n\tmpis =[0] * (n) \n\tfor i in range(n): \n\t\tmpis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \n\treturn max(mpis)", "entry_point": "max_product", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 100, 4, 5, 150, 6], 6) == 45000 \n    assert candidate([4, 42, 55, 68, 80], 5) == 50265600\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 \n\n", "language": "python", "description": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array."}
{"task_id": "MBPP/469", "prompt": "\n\ndef max_profit(price, k):\n    \"\"\"\n    Write a function to find the maximum profit earned from a maximum of k stock transactions\n    >>> max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n    10\n    >>> max_profit([2, 4, 7, 5, 4, 3, 5], 2)\n    7\n    >>> max_profit([10, 6, 8, 4, 2], 2)\n    2\n    \"\"\"\n", "canonical_solution": "    \n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n                max_so_far = 0\n                for x in range(j):\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\n                    if max_so_far < curr_price:\n                        max_so_far = curr_price\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\n    return final_profit[k][n-1]", "entry_point": "max_profit", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n    assert candidate([2, 4, 7, 5, 4, 3, 5], 2) == 7\n    assert candidate([10, 6, 8, 4, 2], 2) == 2\n\n", "language": "python", "description": "Write a function to find the maximum profit earned from a maximum of k stock transactions"}
{"task_id": "MBPP/470", "prompt": "\n\ndef add_pairwise(test_tup):\n  \"\"\"\n  Write a function to find the pairwise addition of the elements of the given tuples.\n  >>> add_pairwise((1, 5, 7, 8, 10))\n  (6, 12, 15, 18)\n  >>> add_pairwise((2, 6, 8, 9, 11))\n  (8, 14, 17, 20)\n  >>> add_pairwise((3, 7, 9, 10, 12))\n  (10, 16, 19, 22)\n  \"\"\"\n", "canonical_solution": "  \n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "entry_point": "add_pairwise", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n\n", "language": "python", "description": "Write a function to find the pairwise addition of the elements of the given tuples."}
{"task_id": "MBPP/471", "prompt": "\n\ndef find_remainder(arr, lens, n):\n    \"\"\"\n    Write a python function to find remainder of array multiplication divided by n.\n    >>> find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11)\n    9\n    >>> find_remainder([1,1,1],3,1)\n    0\n    >>> find_remainder([1,2,1],3,2)\n    0\n    \"\"\"\n", "canonical_solution": "     \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ", "entry_point": "find_remainder", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n    assert candidate([1,1,1],3,1) == 0\n    assert candidate([1,2,1],3,2) == 0\n\n", "language": "python", "description": "Write a python function to find remainder of array multiplication divided by n."}
{"task_id": "MBPP/472", "prompt": "\n\ndef check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    >>> check_Consecutive([1,2,3,4,5])\n    True\n    >>> check_Consecutive([1,2,3,5,6])\n    False\n    >>> check_Consecutive([1,2,1])\n    False\n    \"\"\"\n", "canonical_solution": "     \n    return sorted(l) == list(range(min(l),max(l)+1)) ", "entry_point": "check_Consecutive", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3,4,5]) == True\n    assert candidate([1,2,3,5,6]) == False\n    assert candidate([1,2,1]) == False\n\n", "language": "python", "description": "Write a python function to check whether the given list contains consecutive numbers or not."}
{"task_id": "MBPP/473", "prompt": "\n\ndef tuple_intersection(test_list1, test_list2):\n  \"\"\"\n  Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n  >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)])\n  {(4, 5), (3, 4), (5, 6)}\n  >>> tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)])\n  {(4, 7), (1, 4)}\n  >>> tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)])\n  {(1, 3), (2, 3)}\n  \"\"\"\n", "canonical_solution": "  \n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)", "entry_point": "tuple_intersection", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    assert candidate([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n    assert candidate([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n\n", "language": "python", "description": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order."}
{"task_id": "MBPP/474", "prompt": "\n\ndef replace_char(str1,ch,newch):\n \"\"\"\n Write a function to replace characters in a string.\n >>> replace_char(\"polygon\",'y','l')\n (\"pollgon\")\n >>> replace_char(\"character\",'c','a')\n (\"aharaater\")\n >>> replace_char(\"python\",'l','a')\n (\"python\")\n \"\"\"\n", "canonical_solution": " \n str2 = str1.replace(ch, newch)\n return str2", "entry_point": "replace_char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"polygon\",'y','l')==(\"pollgon\")\n    assert candidate(\"character\",'c','a')==(\"aharaater\")\n    assert candidate(\"python\",'l','a')==(\"python\")\n\n", "language": "python", "description": "Write a function to replace characters in a string."}
{"task_id": "MBPP/475", "prompt": "\n\ndef sort_counter(dict1):\n \"\"\"\n Write a function to sort counter by value.\n >>> sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})\n [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n >>> sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})\n [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n >>> sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})\n [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n \"\"\"\n", "canonical_solution": " from collections import Counter\n \n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter", "entry_point": "sort_counter", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert candidate({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert candidate({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n\n", "language": "python", "description": "Write a function to sort counter by value."}
{"task_id": "MBPP/476", "prompt": "\n\ndef big_sum(nums):\n      \"\"\"\n      Write a python function to find the sum of the largest and smallest value in a given array.\n      >>> big_sum([1,2,3])\n      4\n      >>> big_sum([-1,2,3,4])\n      3\n      >>> big_sum([2,3,6])\n      8\n      \"\"\"\n", "canonical_solution": "      \n      sum= max(nums)+min(nums)\n      return sum", "entry_point": "big_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1,2,3]) == 4\n    assert candidate([-1,2,3,4]) == 3\n    assert candidate([2,3,6]) == 8\n\n", "language": "python", "description": "Write a python function to find the sum of the largest and smallest value in a given array."}
{"task_id": "MBPP/477", "prompt": "\n\ndef is_lower(string):\n  \"\"\"\n  Write a python function to convert the given string to lower case.\n  >>> is_lower(\"InValid\")\n  \"invalid\"\n  >>> is_lower(\"TruE\")\n  \"true\"\n  >>> is_lower(\"SenTenCE\")\n  \"sentence\"\n  \"\"\"\n", "canonical_solution": "  \n  return (string.lower())", "entry_point": "is_lower", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"InValid\") == \"invalid\"\n    assert candidate(\"TruE\") == \"true\"\n    assert candidate(\"SenTenCE\") == \"sentence\"\n\n", "language": "python", "description": "Write a python function to convert the given string to lower case."}
{"task_id": "MBPP/478", "prompt": "\n\ndef remove_lowercase(str1):\n \"\"\"\n Write a function to remove lowercase substrings from a given string.\n >>> remove_lowercase(\"PYTHon\")\n ('PYTH')\n >>> remove_lowercase(\"FInD\")\n ('FID')\n >>> remove_lowercase(\"STRinG\")\n ('STRG')\n \"\"\"\n", "canonical_solution": " import re\n \n remove_lower = lambda text: re.sub('[a-z]', '', text)\n result =  remove_lower(str1)\n return result", "entry_point": "remove_lowercase", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"PYTHon\")==('PYTH')\n    assert candidate(\"FInD\")==('FID')\n    assert candidate(\"STRinG\")==('STRG')\n\n", "language": "python", "description": "Write a function to remove lowercase substrings from a given string."}
{"task_id": "MBPP/479", "prompt": "\n\ndef first_Digit(n) :\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    >>> first_Digit(123)\n    1\n    >>> first_Digit(456)\n    4\n    >>> first_Digit(12)\n    1\n    \"\"\"\n", "canonical_solution": "      \n    while n >= 10:  \n        n = n / 10; \n    return int(n) ", "entry_point": "first_Digit", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(123) == 1\n    assert candidate(456) == 4\n    assert candidate(12) == 1\n\n", "language": "python", "description": "Write a python function to find the first digit of a given number."}
{"task_id": "MBPP/480", "prompt": "\n\ndef get_max_occuring_char(str1):\n  \"\"\"\n  Write a python function to find the maximum occurring character in a given string.\n  >>> get_max_occuring_char(\"data\")\n  \"a\"\n  >>> get_max_occuring_char(\"create\")\n  \"e\"\n  >>> get_max_occuring_char(\"brilliant girl\")\n  \"i\"\n  \"\"\"\n", "canonical_solution": "  \n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1;\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "entry_point": "get_max_occuring_char", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"data\") == \"a\"\n    assert candidate(\"create\") == \"e\"\n    assert candidate(\"brilliant girl\") == \"i\"\n\n", "language": "python", "description": "Write a python function to find the maximum occurring character in a given string."}
{"task_id": "MBPP/481", "prompt": "\n\ndef is_subset_sum(set, n, sum):\n\t\"\"\"\n\tWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\t>>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9)\n\tTrue\n\t>>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30)\n\tFalse\n\t>>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15)\n\tTrue\n\t\"\"\"\n", "canonical_solution": "\t\n\tif (sum == 0):\n\t\treturn True\n\tif (n == 0):\n\t\treturn False\n\tif (set[n - 1] > sum):\n\t\treturn is_subset_sum(set, n - 1, sum)\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])", "entry_point": "is_subset_sum", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 9) == True\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 30) == False\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 15) == True\n\n", "language": "python", "description": "Write a function to determine if there is a subset of the given set with sum equal to the given sum."}
{"task_id": "MBPP/482", "prompt": "\n\ndef match(text):\n\t\t\"\"\"\n\t\tWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\t\t>>> match(\"Geeks\")\n\t\t'Yes'\n\t\t>>> match(\"geeksforGeeks\")\n\t\t'Yes'\n\t\t>>> match(\"geeks\")\n\t\t'No'\n\t\t\"\"\"\n", "canonical_solution": "\t\timport re \n\t\t \n\t\tpattern = '[A-Z]+[a-z]+$'\n\t\tif re.search(pattern, text): \n\t\t\t\treturn('Yes') \n\t\telse: \n\t\t\t\treturn('No') ", "entry_point": "match", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"Geeks\") == 'Yes'\n    assert candidate(\"geeksforGeeks\") == 'Yes'\n    assert candidate(\"geeks\") == 'No'\n\n", "language": "python", "description": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex."}
{"task_id": "MBPP/483", "prompt": "\n\ndef first_Factorial_Divisible_Number(x):\n    \"\"\"\n    Write a python function to find the first natural number whose factorial is divisible by x.\n    >>> first_Factorial_Divisible_Number(10)\n    5\n    >>> first_Factorial_Divisible_Number(15)\n    5\n    >>> first_Factorial_Divisible_Number(5)\n    4\n    \"\"\"\n", "canonical_solution": "     \n    i = 1;\n    fact = 1; \n    for i in range(1,x): \n        fact = fact * i \n        if (fact % x == 0): \n            break\n    return i ", "entry_point": "first_Factorial_Divisible_Number", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 5\n    assert candidate(15) == 5\n    assert candidate(5) == 4\n\n", "language": "python", "description": "Write a python function to find the first natural number whose factorial is divisible by x."}
{"task_id": "MBPP/484", "prompt": "\n\ndef remove_matching_tuple(test_list1, test_list2):\n  \"\"\"\n  Write a function to remove the matching tuples from the given two tuples.\n  >>> remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])\n  [('you', '?')]\n  >>> remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')])\n  [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n  >>> remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')])\n  [('Its', 'been'), ('day', 'without')]\n  \"\"\"\n", "canonical_solution": "  \n  res = [sub for sub in test_list1 if sub not in test_list2]\n  return (res) ", "entry_point": "remove_matching_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n    assert candidate([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n    assert candidate([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]\n\n", "language": "python", "description": "Write a function to remove the matching tuples from the given two tuples."}
{"task_id": "MBPP/485", "prompt": "\n\ndef largest_palindrome(A, n) :\n\t\"\"\"\n\tWrite a function to find the largest palindromic number in the given array.\n\t>>> largest_palindrome([1, 232, 54545, 999991], 4)\n\t54545\n\t>>> largest_palindrome([1, 2, 3, 4, 5, 50], 6)\n\t5\n\t>>> largest_palindrome([1, 3, 7, 9, 45], 5)\n\t9\n\t\"\"\"\n", "canonical_solution": "\tdef is_palindrome(n) : \n\t\tdivisor = 1\n\t\twhile (n / divisor >= 10) : \n\t\t\tdivisor *= 10\n\t\twhile (n != 0) : \n\t\t\tleading = n // divisor \n\t\t\ttrailing = n % 10\n\t\t\tif (leading != trailing) : \n\t\t\t\treturn False\n\t\t\tn = (n % divisor) // 10\n\t\t\tdivisor = divisor // 100\n\t\treturn True\n\t \n\tA.sort() \n\tfor i in range(n - 1, -1, -1) : \n\t\tif (is_palindrome(A[i])) : \n\t\t\treturn A[i] \n\treturn -1", "entry_point": "largest_palindrome", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 232, 54545, 999991], 4) == 54545\n    assert candidate([1, 2, 3, 4, 5, 50], 6) == 5\n    assert candidate([1, 3, 7, 9, 45], 5)  == 9\n\n", "language": "python", "description": "Write a function to find the largest palindromic number in the given array."}
{"task_id": "MBPP/486", "prompt": "\n\ndef binomial_probability(n, k, p):\n\t\"\"\"\n\tWrite a function to compute binomial probability for the given number.\n\t>>> binomial_probability(10, 5, 1.0/3)\n\t0.13656454808718185\n\t>>> binomial_probability(11, 6, 2.0/4)\n\t0.2255859375\n\t>>> binomial_probability(12, 7, 3.0/5)\n\t0.227030335488\n\t\"\"\"\n", "canonical_solution": "\tdef nCr(n, r): \n\t\tif (r > n / 2): \n\t\t\tr = n - r \n\t\tanswer = 1 \n\t\tfor i in range(1, r + 1): \n\t\t\tanswer *= (n - r + i) \n\t\t\tanswer /= i \n\t\treturn answer \n\t \n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ", "entry_point": "binomial_probability", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10, 5, 1.0/3) == 0.13656454808718185\n    assert candidate(11, 6, 2.0/4) == 0.2255859375\n    assert candidate(12, 7, 3.0/5) == 0.227030335488\n\n", "language": "python", "description": "Write a function to compute binomial probability for the given number."}
{"task_id": "MBPP/487", "prompt": "\n\ndef sort_tuple(tup):\n\t\"\"\"\n\tWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\t>>> sort_tuple([(1, 3), (3, 2), (2, 1)] )\n\t[(2, 1), (3, 2), (1, 3)]\n\t>>> sort_tuple([(2, 4), (3, 3), (1, 1)] )\n\t[(1, 1), (3, 3), (2, 4)]\n\t>>> sort_tuple([(3, 9), (6, 7), (4, 3)] )\n\t[(4, 3), (6, 7), (3, 9)]\n\t\"\"\"\n", "canonical_solution": "\t \n\tlst = len(tup) \n\tfor i in range(0, lst): \n\t\tfor j in range(0, lst-i-1): \n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \n\t\t\t\ttemp = tup[j] \n\t\t\t\ttup[j]= tup[j + 1] \n\t\t\t\ttup[j + 1]= temp \n\treturn tup", "entry_point": "sort_tuple", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n    assert candidate([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\n    assert candidate([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]\n\n", "language": "python", "description": "Write a function to sort a list of tuples in increasing order by the last element in each tuple."}
